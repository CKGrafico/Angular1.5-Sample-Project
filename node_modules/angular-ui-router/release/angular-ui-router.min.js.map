{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-ui-router.min.js","webpack:///webpack/bootstrap a4ffa6d2207b695a9deb?dbaf","webpack:///./ng1.ts?319c","webpack:///./core.ts?b26d","webpack:///./common/module.ts?216c","webpack:///./common/common.ts?a996","webpack:///./common/predicates.ts?3346","webpack:///./common/hof.ts?2590","webpack:///./common/coreservices.ts?cb79","webpack:///./common/glob.ts?9f85","webpack:///./common/queue.ts?8dfe","webpack:///./common/strings.ts?4a12","webpack:///./transition/rejectFactory.ts?39fa","webpack:///./transition/transition.ts?e0c6","webpack:///./common/trace.ts?3953","webpack:///./transition/module.ts?dde7","webpack:///./transition/hookBuilder.ts?5cba","webpack:///./transition/hookRegistry.ts?78c1","webpack:///./transition/transitionHook.ts?c175","webpack:///./state/module.ts?4f0c","webpack:///./state/state.ts?0c7b","webpack:///./state/stateBuilder.ts?59db","webpack:///./params/module.ts?b035","webpack:///./params/param.ts?aa0b","webpack:///./url/urlMatcherConfig.ts?a46d","webpack:///./params/type.ts?5680","webpack:///./params/paramTypes.ts?33e0","webpack:///./params/stateParams.ts?1d6b","webpack:///./state/hooks/transitionManager.ts?2981","webpack:///./state/targetState.ts?636d","webpack:///./state/hooks/viewHooks.ts?791d","webpack:///./state/hooks/enterExitHooks.ts?5a49","webpack:///./state/hooks/resolveHooks.ts?75a1","webpack:///./resolve/interface.ts?9672","webpack:///./resolve/resolvable.ts?7476","webpack:///./state/stateObject.ts?1897","webpack:///./state/stateMatcher.ts?e974","webpack:///./state/stateQueueManager.ts?3dba","webpack:///./state/stateRegistry.ts?fafa","webpack:///./state/stateService.ts?6000","webpack:///./path/pathFactory.ts?5cf3","webpack:///./path/node.ts?f81c","webpack:///./resolve/module.ts?ed8e","webpack:///./resolve/resolveContext.ts?db0c","webpack:///./resolve/resolveInjector.ts?3c6f","webpack:///./transition/transitionService.ts?5ce0","webpack:///./path/module.ts?805c","webpack:///./url/module.ts?b91a","webpack:///./url/urlMatcher.ts?0536","webpack:///./url/urlMatcherFactory.ts?0f3e","webpack:///./url/urlRouter.ts?9e8a","webpack:///./view/module.ts?7429","webpack:///./view/view.ts?e0c9","webpack:///./globals.ts?3d7d","webpack:///./router.ts?40b8","webpack:///./ng1/services.ts?ba07","webpack:///./ng1/viewsBuilder.ts?f803","webpack:///./ng1/templateFactory.ts?4945","webpack:///./ng1/stateDirectives.ts?8554","webpack:///./ng1/stateFilters.ts?ad8f","webpack:///./ng1/viewDirective.ts?6068","webpack:///./ng1/viewScroll.ts?698f"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__export","hasOwnProperty","Object","defineProperty","value","router_1","UIRouter","bindFunctions","from","to","bindTo","fnNames","keys","filter","name","forEach","bind","defaults","opts","defaultsList","_i","arguments","length","merge","apply","concat","extend","pick","dst","objs","obj","key","ancestors","first","second","path","n","push","equalForKeys","a","b","i","k","pickOmitImpl","predicate","objCopy","restArgs","inArray","omit","hof_1","not","pluck","collection","propName","map","prop","callback","arr","predicates_1","isArray","result","accept","x","item","find","pushR","assertPredicate","errMsg","Error","isFunction","arrayTuples","arrayArgs","reduce","min","Math","Array","ignored","idx","applyPairs","memo","keyValTuple","isString","tail","undefined","_copy","src","dest","_forEach","cb","_this","_copyProps","_extend","toObj","rest","identity","_equals","o1","o2","t1","t2","tup","all","_arraysEq","isDate","getTime","isRegExp","toString","predicates","any","fn","a1","a2","t","angular","window","fromJson","JSON","parse","toJson","stringify","copy","equals","noop","abstractKey","inherit","parent","extra","prototype","args","slice","array","indexOf","removeFrom","curry","splice","mergeR","mapObj","values","allTrueR","elem","anyTrueR","unnestR","flattenR","unnest","flatten","pairs","object","isInjectable","val","head","toStr","tis","isUndefined","isDefined","isNull","o","isNumber","isObject","isPromise","and","pipe","curried","func_args_length","initial_args","compose","start","funcs","reverse","fn1","fn2","or","invoke","fnName","pattern","struct","propEq","split","none","is","ctor","constructor","eq","other","v","notImplemented","fnname","services","$q","$injector","location","locationConfig","template","Glob","text","glob","matches","segments","l","unshift","Number","MAX_VALUE","join","fromString","Queue","_items","_limit","enqueue","items","shift","dequeue","size","clear","current","remove","peekTail","peekHead","maxLength","max","str","substr","padString","promiseToString","rejectFactory_1","TransitionRejection","reason","functionToString","fnStr","fnToString","namedFunctionMatch","match","_fn","format","seen","stringifyPattern","replace","common_1","transition_1","resolvable_1","kebobString","camelCase","$1","toLowerCase","Transition","Resolvable","coreservices_1","strings_1","RejectType","type","message","detail","detailString","d","RejectFactory","superseded","options","SUPERSEDED","redirected","reject","invalid","INVALID","IGNORED","aborted","ABORTED","trace_1","module_1","node_1","pathFactory_1","module_2","module_3","module_4","transitionCount","REJECT","stateSelf","fromPath","targetState","_transitionService","_deferred","defer","promise","treeChanges","_treeChanges","isActive","_options","valid","error","HookRegistry","mixin","$id","toPath","PathFactory","buildToPath","applyViewConfigs","$view","reloadState","bindTransitionResolve","$from","state","$to","self","compare","matchState","params","pathname","resolves","resolveContext","getResolvables","res","data","addResolves","stateName","topath","targetNode","node","addResolvables","makeResolvables","previous","entering","exiting","retained","views","redirect","newOptions","TargetState","identifier","$state","redirectTo","redirectedPath","copyResolvesFor","Node","matching","includes","includeResolve","resolve","_changedParams","_a","reload","nodeSchemas","paramSchema","_b","paramValues","toValues","fromValues","tuples","schema","toVals","fromVals","Param","changed","dynamic","changes","hookBuilder","HookBuilder","transition","run","runSynchronousHooks","TransitionHook","runSuccessHooks","getOnSuccessHooks","runErrorHooks","$error$","getOnErrorHooks","then","syncResult","getOnBeforeHooks","isRejection","rejectReason","trace","traceTransitionIgnored","success","traceSuccess","traceError","traceTransitionStart","chain","asyncHooks","_chain","step","invokeStep","validates","parameters","fromStateOrName","toStateOrName","avoidEmptyHash","fromParams","toValid","toParams","uiViewString","viewData","creationContext","fqn","normalizedCat","input","Category","viewConfigString","viewConfig","viewDecl","$uiViewName","$uiViewContextAnchor","$context","Trace","_enabled","approximateDigests","_set","enabled","categories","isNaN","parseInt","category","enable","disable","TRANSITION","tid","digest","transitionStr","console","log","traceHookInvocation","HOOK","event","context","traceHookResult","hookResult","transitionResult","transitionOptions","hookResultStr","transitionResultStr","traceResolvePath","RESOLVE","pathStr","policyStr","resolvePolicy","traceResolvePathElement","pathElement","resolvablePromises","resolvablePromisesStr","pathElementStr","traceResolveResolvable","resolvable","resolvableStr","traceResolvableResolved","tracePathElementInvoke","deps","INVOKE","when","finalState","traceUiViewEvent","UIVIEW","traceUiViewConfigUpdated","traceUiViewScopeCreated","newScope","traceUiViewFill","html","traceViewServiceEvent","VIEWCONFIG","traceViewServiceUiViewEvent","tupleSort","reverseDepthSort","r","factor","depthDelta","hook","priority","$transitions","baseHookOptions","_buildNodeHooks","async","getOnStartHooks","getOnExitHooks","$state$","getOnRetainHooks","getOnEnterHooks","getOnFinishHooks","$treeChanges$","rejectIfSuperseded","toState","fromState","onStartHooks","onExitHooks","onRetainHooks","onEnterHooks","onFinishHooks","hookType","matchingNodesProp","sortHooksFn","getLocals","matchingHooks","_matchingHooks","makeTransitionHooks","nodes","traceData","transitionHook","sort","tuple","hookName","reg","getHooks","criterion","matchGlobs","_state","globStrings","toMatch","glob_1","matchFn","makeHookRegistrationFn","hooks","matchObject","eventHook","EventHook","matchCriteria","_matchingNodes","mc","allMatched","_transitionEvents","onBefore","onStart","onEnter","onRetain","onExit","onFinish","onSuccess","onError","source","target","defaultOptions","locals","isSuperseded","mapHookResult","handleHookResult","moreLocals","invokeNow","invokeLater","swallowExceptions","results","exception","rejections","StateProvider","stateRegistry","invalidCallbacks","decorator","func","definition","register","onInvalid","parseUrl","url","charAt","substring","StateBuilder","matcher","$urlMatcherFactoryProvider","isRoot","builders","$$state","parentName","stateDec","parsed","compile","paramMap","paramConfig","isSearch","reloadOnSearch","isMatcher","navigable","append","makeConfigParam","config","fromConfig","urlParams","nonUrlParams","builder","build","parentFn","lastIndexOf","unwrapShorthand","cfg","isShorthand","$$fn","getType","urlType","paramTypes_1","paramTypes","type_1","Type","DefType","CONFIG","getSquashPolicy","isOptional","squash","urlMatcherConfig_1","matcherConfig","defaultSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","hasOwn","getArrayMode","arrayDefaults","SEARCH","arrayParamNomenclature","$asArray","isDefaultValue","$$getDefaultValue","defaultValue","$replace","replacement","$normalize","normalized","encoded","encode","exec","PATH","fromSearch","param","values1","values2","MatcherConfig","_isCaseInsensitive","_isStrictMode","_defaultSquashPolicy","caseInsensitive","strictMode","ArrayType","mode","arrayWrap","arrayUnwrap","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","left","right","$arrayMode","def","decode","$subPattern","sub","valToString","valFromString","ParamTypes","typeQueue","defaultTypes","hash","String","string","int","bool","Boolean","date","getFullYear","getMonth","getDate","capture","Date","valueOf","acc","json","makeType","types","definitionFn","_flushTypeQueue","StateParams","$inherit","newParams","$current","parentParams","parents","inherited","inheritList","j","param_1","targetState_1","viewHooks_1","enterExitHooks_1","resolveHooks_1","TransitionManager","$urlRouter","globals","viewHooks","ViewHooks","enterExitHooks","EnterExitHooks","resolveHooks","ResolveHooks","registerUpdateGlobalState","registerHooks","runTransition","transitionHistory","trans","transRejected","updateUrl","_redirectMgr","update","defaultErrorHandler","_identifier","_definition","_params","exists","base","relative","enteringViews","exitingViews","loadAllEnteringViews","view","load","updateViews","deactivateViewConfig","activateViewConfig","sync","registerOnEnterHooks","registerOnRetainHooks","registerOnExitHooks","interface_1","hof_2","LAZY","ResolvePolicy","EAGER","$eagerResolvePath","$transition$","resolvePath","$lazyResolveEnteringState","$resolve$","resolvePathElement","resolveResolvable","$inject","resolveFn","preResolvedData","annotate","strictDi","deferred","ancestorsByName","omitOwnLocals","depResolvables","depPromises","get","State","ref","parameter","StateMatcher","_states","isRelative","stateOrName","isStr","baseState","splitName","pathLength","relName","StateQueueManager","states","$urlRouterProvider","queue","flush","orphanIdx","orphans","previousQueueLength","attachRoute","prev","autoFlush","$match","$stateParams","transitionTo","stateMatcher_1","stateBuilder_1","stateQueueManager_1","StateRegistry","urlMatcherFactory","urlRouterProvider","stateQueue","rootStateDef","#","abstract","_root","stateDefinition","found","queue_1","transitionService_1","transitionManager_1","common_2","common_3","StateService","stateProvider","rejectFactory","getters","boundFns","enumerable","configurable","_handleInvalidTargetState","$to$","invokeNextCallback","nextCallback","callbackQueue","invokeCallback","checkForRedirect","latestThing","latest","$from$","makeTargetState","notify","go","defautGoOpts","transOpts","defaultTransOpts","transHistory","latestSuccess","successfulTransitions","rootPath","bindTransNodesToPath","currentPath","create","tMgr","transitionPromise","include","href","defaultHrefOpts","lossy","absolute","nav","buildPath","applyRawParams","inheritParams","createViewConfig","toKeys","nodeParamVals","makeInheritedParamsNode","_fromPath","_toKeys","toNode","toParamVals","incomingParamVals","fromParamVals","ownParamVals","ResolveContext","isolateRootTo","resolveInjector","ResolveInjector","applyToParams","retainedNode","cloned","clone","keep","staticParams","nodesMatch","node1","node2","retainedWithToParams","enteringResolvePath","toResolvePath","rootNode","subPath","_node","elementIdx","getParamVal","paramDef","pDef","paramValsEq","matchedCount","getPolicy","stateResolvePolicyConf","stateLevelPolicy","resolveLevelPolicies","policyName","defaultResolvePolicy","_path","_nodeFor","_pathTo","last","omitProps","filteredResolvables","getResolvablesForFn","resolvables","getOwnResolvables","promiseForNode","policy","policyOrdinal","matchesRequestedPolicy","matchingResolves","getResolvePromise","getPromise","promises","resolvedLocals","_resolveContext","injectedFn","hookRegistry_1","custom","TransitionService","_defaultErrorHandler","handler","quoteRegExp","surroundPattern","predicates_2","memoizeTo","UrlMatcher","_cache","_children","_segments","_compiled","strict","segment","placeholder","searchPlaceholder","patterns","checkParamErrors","nameValidator","test","matchDetails","regexp","index","RegExp","lastIndex","search","prefix","freeze","decodePathArray","reverseString","unquoteDashes","allReversed","allParams","pathParams","searchParams","nPathSegments","urlm","validParamVal","getDetails","urlMatchers","pathSegmentsAndParams","queryParams","pathString","encodeDashes","raw","encodeURIComponent","queryString","charCodeAt","toUpperCase","staticSegments","getDefaultConfig","UrlMatcherFactory","$get","regExpPrefix","re","interpolate","what","handleIfMatch","appendBasePath","isHtml5","baseHref","rules","otherwiseFn","evt","check","rule","handled","$location","defaultPrevented","UrlRouterProvider","$urlMatcherFactory","interceptDeferred","otherwise","handlerIsString","strategies","_what","_handler","regex","global","sticky","deferIntercept","UrlRouter","listen","listener","onChange","read","urlMatcher","html5Mode","hashPrefix","slash","port","protocol","host","ViewService","uiViews","viewConfigs","_viewConfigFactories","uiViewDepth","uiView","viewConfigDepth","count","uiViewsByFqn","uiv","vc","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","depthCompare","depthFn","posNeg","matchingConfigPair","matchingConfigs","configureUiView","configUpdated","rootContext","_rootContext","viewConfigFactory","viewType","decl","cfgFactory","$type","registerUiView","fqnMatches","available","active","normalizeUiViewTarget","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","relativeMatch","anchor","stateParams_1","UIRouterGlobals","transitionService","beforeNewTransition","updateGlobalState","clearCurrentTransition","urlMatcherFactory_1","urlRouter_1","state_1","urlRouter_2","view_1","stateRegistry_1","stateService_1","globals_1","viewService","urlRouter","stateService","annotateController","controllerExpression","$controller","oldInstantiate","instantiate","deps_1","constructorFunction","$scope","runBlock","ng1UIRouter","$locationProvider","$browser","$sniffer","$rootScope","$http","$templateCache","$on","urlListeners","history","cache","headers","Accept","router","viewsBuilder_1","ng1ViewsBuilder","ng1ViewConfigFactory","getUrlRouterProvider","getStateProvider","getTransitionsProvider","loadAllControllerLocals","loadLocals","$loadControllerLocals","resolveCtx","controllerDeps","controller","dep","loadAllLocals","watchDigests","$watch","templateFactory_1","app","resolveFactory","invocables","parentNode","resolveData","parentLocals","rewrap","_locals","local","provider","TemplateFactory","service","tplKeys","ctrlKeys","compKeys","nonCompKeys","allKeys","viewsObject","$default","component","templateProvider","resolveFor","bindings","version","minor","attrs","getComponentInputs","kebobName","resolveAs","$name","cmpDefs","getBindings","Ng1ViewConfig","scopeBindings","bindingsObj","bindToCtrlBindings","attrName","bindToController","$$bindings","$$isolateBindings","scope","hasTemplate","injector","getTemplate","getController","templateUrl","$factory","controllerProvider","injectFn","fromUrl","fromProvider","parseStateRef","preparsed","paramExpr","stateContext","el","$uiView","inheritedData","getTypeInfo","isSvg","isForm","nodeName","attr","isAnchor","clickable","clickHook","$timeout","e","button","which","ctrlKey","metaKey","shiftKey","preventDefault","ignorePreventDefaultCount","cancel","defaultOpts","uiSrefNg1","restrict","require","link","element","uiSrefActive","uiSref","unlinkInfoFn","uiSrefOpts","$eval","$$addStateInfo","$set","uiStateNg1","runStateRefLink","group","uiState","uiStateParams","uiStateOpts","watch","uiSrefActiveNg1","$interpolate","$element","$attrs","addState","stateParams","activeClass","stateHash","createStateHash","stateInfo","activeClasses","anyMatch","addClass","removeClass","exactMatch","activeEqClass","className","uiSrefActiveEq","newState","deregister","updateAfterTransition","deregisterFn","directive","$IsStateFilter","isFilter","$stateful","$IncludedByStateFilter","includesFilter","$ViewDirectiveFill","$compile","getControllerAs","getResolveAs","getResolveContext","tElement","initial","$cfg","contents","controllerAs","controllerInstance","children","registerControllerCallbacks","cmp_1","kebobName_1","getComponentController","directiveEl","tagName","deregisterWatch_1","ctrlInstance","$onInit","hasComponentImpl","hookOptions","uiOnParamsChanged","paramsUpdated_1","ctx","viewCreationTrans","toSchema","fromSchema","changedToParams","changedKeys_1","onDynamic","uiCanExit","criteria","uiViewNg1","$animate","$uiViewScroll","getRenderer","enter","leave","configsEqual","config1","config2","rootData","terminal","transclude","tAttrs","$transclude","configUpdatedCallback","activeUIView","updateView","cleanupLastView","previousEl","currentScope","$destroy","currentEl","_viewData_1","renderer","$$animLeave","$new","animEnter","animLeave","$uiViewData","$animEnter","$animLeave","$emit","autoScrollExp","onloadExp","unregister","onload","autoscroll","$ViewScrollProvider","useAnchorScroll","$anchorScroll","scrollIntoView"],"mappings":"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","file":"angular-ui-router.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory();\n\telse\n\t\troot[\"angular-ui-router\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory();\n\telse\n\t\troot[\"angular-ui-router\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Main entry point for angular 1.x build\n\t * @module ng1\n\t */\n\t/** for typedoc */\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(1));\n\t__export(__webpack_require__(53));\n\t__export(__webpack_require__(54));\n\t__webpack_require__(56);\n\t__webpack_require__(57);\n\t__webpack_require__(58);\n\t__webpack_require__(59);\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = \"ui.router\";\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common */ /** */\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(2));\n\t__export(__webpack_require__(20));\n\t__export(__webpack_require__(44));\n\t__export(__webpack_require__(40));\n\t__export(__webpack_require__(17));\n\t__export(__webpack_require__(13));\n\t__export(__webpack_require__(45));\n\t__export(__webpack_require__(49));\n\t__export(__webpack_require__(51));\n\tvar router_1 = __webpack_require__(52);\n\texports.UIRouter = router_1.UIRouter;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module common */ /** for typedoc */\n\t__export(__webpack_require__(3));\n\t__export(__webpack_require__(6));\n\t__export(__webpack_require__(7));\n\t__export(__webpack_require__(5));\n\t__export(__webpack_require__(4));\n\t__export(__webpack_require__(8));\n\t__export(__webpack_require__(9));\n\t__export(__webpack_require__(12));\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Random utility functions used in the UI-Router code\n\t *\n\t * @preferred @module common\n\t */ /** for typedoc */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar angular = window.angular || {};\n\texports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\n\texports.toJson = angular.toJson || JSON.stringify.bind(JSON);\n\texports.copy = angular.copy || _copy;\n\texports.forEach = angular.forEach || _forEach;\n\texports.extend = angular.extend || _extend;\n\texports.equals = angular.equals || _equals;\n\texports.identity = function (x) { return x; };\n\texports.noop = function () { return undefined; };\n\texports.abstractKey = 'abstract';\n\t/**\n\t * Binds and copies functions onto an object\n\t *\n\t * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n\t * on the 'to' object.\n\t *\n\t * This example creates an new class instance whose functions are prebound to the new'd object.\n\t * @example\n\t * ```\n\t *\n\t * class Foo {\n\t *   constructor(data) {\n\t *     // Binds all functions from Foo.prototype to 'this',\n\t *     // then copies them to 'this'\n\t *     bindFunctions(Foo.prototype, this, this);\n\t *     this.data = data;\n\t *   }\n\t *\n\t *   log() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * let myFoo = new Foo([1,2,3]);\n\t * var logit = myFoo.log;\n\t * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n\t * ```\n\t *\n\t * This example creates a bound version of a service function, and copies it to another object\n\t * @example\n\t * ```\n\t *\n\t * var SomeService = {\n\t *   this.data = [3, 4, 5];\n\t *   this.log = function() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * // Constructor fn\n\t * function OtherThing() {\n\t *   // Binds all functions from SomeService to SomeService,\n\t *   // then copies them to 'this'\n\t *   bindFunctions(SomeService, this, SomeService);\n\t * }\n\t *\n\t * let myOtherThing = new OtherThing();\n\t * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n\t * ```\n\t *\n\t * @param from The object which contains the functions to be bound\n\t * @param to The object which will receive the bound functions\n\t * @param bindTo The object which the functions will be bound to\n\t * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n\t */\n\tfunction bindFunctions(from, to, bindTo, fnNames) {\n\t    if (fnNames === void 0) { fnNames = Object.keys(from); }\n\t    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })\n\t        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });\n\t}\n\texports.bindFunctions = bindFunctions;\n\t/**\n\t * prototypal inheritance helper.\n\t * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n\t */\n\texports.inherit = function (parent, extra) {\n\t    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);\n\t};\n\t/**\n\t * Given an arguments object, converts the arguments at index idx and above to an array.\n\t * This is similar to es6 rest parameters.\n\t *\n\t * Optionally, the argument at index idx may itself already be an array.\n\t *\n\t * For example,\n\t * given either:\n\t *        arguments = [ obj, \"foo\", \"bar\" ]\n\t * or:\n\t *        arguments = [ obj, [\"foo\", \"bar\"] ]\n\t * then:\n\t *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n\t *\n\t * This allows functions like pick() to be implemented such that it allows either a bunch\n\t * of string arguments (like es6 rest parameters), or a single array of strings:\n\t *\n\t * given:\n\t *        var obj = { foo: 1, bar: 2, baz: 3 };\n\t * then:\n\t *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n\t *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n\t */\n\tvar restArgs = function (args, idx) {\n\t    if (idx === void 0) { idx = 0; }\n\t    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\t};\n\t/** Given an array, returns true if the object is found in the array, (using indexOf) */\n\tvar inArray = function (array, obj) { return array.indexOf(obj) !== -1; };\n\t/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\n\texports.removeFrom = hof_1.curry(function (array, obj) {\n\t    var idx = array.indexOf(obj);\n\t    if (idx >= 0)\n\t        array.splice(idx, 1);\n\t    return array;\n\t});\n\t/**\n\t * Applies a set of defaults to an options object.  The options object is filtered\n\t * to only those properties of the objects in the defaultsList.\n\t * Earlier objects in the defaultsList take precedence when applying defaults.\n\t */\n\tfunction defaults(opts) {\n\t    if (opts === void 0) { opts = {}; }\n\t    var defaultsList = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        defaultsList[_i - 1] = arguments[_i];\n\t    }\n\t    var defaults = merge.apply(null, [{}].concat(defaultsList));\n\t    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n\t}\n\texports.defaults = defaults;\n\t/**\n\t * Merges properties from the list of objects to the destination object.\n\t * If a property already exists in the destination object, then it is not overwritten.\n\t */\n\tfunction merge(dst) {\n\t    var objs = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        objs[_i - 1] = arguments[_i];\n\t    }\n\t    exports.forEach(objs, function (obj) {\n\t        exports.forEach(obj, function (value, key) {\n\t            if (!dst.hasOwnProperty(key))\n\t                dst[key] = value;\n\t        });\n\t    });\n\t    return dst;\n\t}\n\texports.merge = merge;\n\t/** Reduce function that merges each element of the list into a single object, using extend */\n\texports.mergeR = function (memo, item) { return exports.extend(memo, item); };\n\t/**\n\t * Finds the common ancestor path between two states.\n\t *\n\t * @param {Object} first The first state.\n\t * @param {Object} second The second state.\n\t * @return {Array} Returns an array of state names in descending order, not including the root.\n\t */\n\tfunction ancestors(first, second) {\n\t    var path = [];\n\t    for (var n in first.path) {\n\t        if (first.path[n] !== second.path[n])\n\t            break;\n\t        path.push(first.path[n]);\n\t    }\n\t    return path;\n\t}\n\texports.ancestors = ancestors;\n\t/**\n\t * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n\t *\n\t * @param {Object} a The first object.\n\t * @param {Object} b The second object.\n\t * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n\t *                     it defaults to the list of keys in `a`.\n\t * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n\t */\n\tfunction equalForKeys(a, b, keys) {\n\t    if (keys === void 0) { keys = Object.keys(a); }\n\t    for (var i = 0; i < keys.length; i++) {\n\t        var k = keys[i];\n\t        if (a[k] != b[k])\n\t            return false; // Not '===', values aren't necessarily normalized\n\t    }\n\t    return true;\n\t}\n\texports.equalForKeys = equalForKeys;\n\tfunction pickOmitImpl(predicate, obj) {\n\t    var objCopy = {}, keys = restArgs(arguments, 2);\n\t    for (var key in obj) {\n\t        if (predicate(keys, key))\n\t            objCopy[key] = obj[key];\n\t    }\n\t    return objCopy;\n\t}\n\t/** Return a copy of the object only containing the whitelisted properties. */\n\tfunction pick(obj) { return pickOmitImpl.apply(null, [inArray].concat(restArgs(arguments))); }\n\texports.pick = pick;\n\t/** Return a copy of the object omitting the blacklisted properties. */\n\tfunction omit(obj) { return pickOmitImpl.apply(null, [hof_1.not(inArray)].concat(restArgs(arguments))); }\n\texports.omit = omit;\n\t/**\n\t * Maps an array, or object to a property (by name)\n\t */\n\tfunction pluck(collection, propName) {\n\t    return map(collection, hof_1.prop(propName));\n\t}\n\texports.pluck = pluck;\n\t/** Filters an Array or an Object's properties based on a predicate */\n\tfunction filter(collection, callback) {\n\t    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\n\t    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\n\t    exports.forEach(collection, function (item, i) {\n\t        if (callback(item, i))\n\t            accept(item, i);\n\t    });\n\t    return result;\n\t}\n\texports.filter = filter;\n\t/** Finds an object from an array, or a property of an object, that matches a predicate */\n\tfunction find(collection, callback) {\n\t    var result;\n\t    exports.forEach(collection, function (item, i) {\n\t        if (result)\n\t            return;\n\t        if (callback(item, i))\n\t            result = item;\n\t    });\n\t    return result;\n\t}\n\texports.find = find;\n\t/** Given an object, returns a new object, where each property is transformed by the callback function */\n\texports.mapObj = map;\n\t/** Maps an array or object properties using a callback function */\n\tfunction map(collection, callback) {\n\t    var result = predicates_1.isArray(collection) ? [] : {};\n\t    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\n\t    return result;\n\t}\n\texports.map = map;\n\t/**\n\t * Given an object, return its enumerable property values\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = { a: 1, b: 2, c: 3 }\n\t * let vals = values(foo); // [ 1, 2, 3 ]\n\t * ```\n\t */\n\texports.values = function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); };\n\t/**\n\t * Reduce function that returns true if all of the values are truthy.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let vals = [ 1, true, {}, \"hello world\"];\n\t * vals.reduce(allTrueR, true); // true\n\t *\n\t * vals.push(0);\n\t * vals.reduce(allTrueR, true); // false\n\t * ```\n\t */\n\texports.allTrueR = function (memo, elem) { return memo && elem; };\n\t/**\n\t * Reduce function that returns true if any of the values are truthy.\n\t *\n\t *  * @example\n\t * ```\n\t *\n\t * let vals = [ 0, null, undefined ];\n\t * vals.reduce(anyTrueR, true); // false\n\t *\n\t * vals.push(\"hello world\");\n\t * vals.reduce(anyTrueR, true); // true\n\t * ```\n\t */\n\texports.anyTrueR = function (memo, elem) { return memo || elem; };\n\t/**\n\t * Reduce function which un-nests a single level of arrays\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnestR = function (memo, elem) { return memo.concat(elem); };\n\t/**\n\t * Reduce function which recursively un-nests all arrays\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flattenR = function (memo, elem) { return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem); };\n\t/** Reduce function that pushes an object to an array, then returns the array.  Mostly just for [[flattenR]] */\n\tfunction pushR(arr, obj) { arr.push(obj); return arr; }\n\t/**\n\t * Return a new array with a single level of arrays unnested.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\n\t/**\n\t * Return a completely flattened version of an array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\n\t/**\n\t * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n\t * @example\n\t * ```\n\t *\n\t * let isNumber = (obj) => typeof(obj) === 'number';\n\t * let allNumbers = [ 1, 2, 3, 4, 5 ];\n\t * allNumbers.filter(assertPredicate(isNumber)); //OK\n\t *\n\t * let oneString = [ 1, 2, 3, 4, \"5\" ];\n\t * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n\t * ```\n\t */\n\tfunction assertPredicate(predicate, errMsg) {\n\t    if (errMsg === void 0) { errMsg = \"assert failure\"; }\n\t    return function (obj) {\n\t        if (!predicate(obj)) {\n\t            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\n\t        }\n\t        return true;\n\t    };\n\t}\n\texports.assertPredicate = assertPredicate;\n\t/**\n\t * Like _.pairs: Given an object, returns an array of key/value pairs\n\t *\n\t * @example\n\t * ```\n\t *\n\t * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n\t * ```\n\t */\n\texports.pairs = function (object) { return Object.keys(object).map(function (key) { return [key, object[key]]; }); };\n\t/**\n\t * Given two or more parallel arrays, returns an array of tuples where\n\t * each tuple is composed of [ a[i], b[i], ... z[i] ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = [ 0, 2, 4, 6 ];\n\t * let bar = [ 1, 3, 5, 7 ];\n\t * let baz = [ 10, 30, 50, 70 ];\n\t * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n\t * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n\t * ```\n\t */\n\tfunction arrayTuples() {\n\t    var arrayArgs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        arrayArgs[_i - 0] = arguments[_i];\n\t    }\n\t    if (arrayArgs.length === 0)\n\t        return [];\n\t    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n\t    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });\n\t}\n\texports.arrayTuples = arrayTuples;\n\t/**\n\t * Reduce function which builds an object from an array of [key, value] pairs.\n\t *\n\t * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n\t *\n\t * Each keyValueTuple should be an array with values [ key: string, value: any ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n\t *\n\t * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t *\n\t * // Or, more simply:\n\t * var pairsToObj = pairs.reduce(applyPairs, {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t * ```\n\t */\n\tfunction applyPairs(memo, keyValTuple) {\n\t    var key, value;\n\t    if (predicates_1.isArray(keyValTuple))\n\t        key = keyValTuple[0], value = keyValTuple[1];\n\t    if (!predicates_1.isString(key))\n\t        throw new Error(\"invalid parameters to applyPairs\");\n\t    memo[key] = value;\n\t    return memo;\n\t}\n\texports.applyPairs = applyPairs;\n\t/** Get the last element of an array */\n\tfunction tail(arr) {\n\t    return arr.length && arr[arr.length - 1] || undefined;\n\t}\n\texports.tail = tail;\n\t/**\n\t * shallow copy from src to dest\n\t *\n\t * note: This is a shallow copy, while angular.copy is a deep copy.\n\t * ui-router uses `copy` only to make copies of state parameters.\n\t */\n\tfunction _copy(src, dest) {\n\t    if (dest)\n\t        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\n\t    if (!dest)\n\t        dest = {};\n\t    return exports.extend(dest, src);\n\t}\n\tfunction _forEach(obj, cb, _this) {\n\t    if (predicates_1.isArray(obj))\n\t        return obj.forEach(cb, _this);\n\t    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\n\t}\n\tfunction _copyProps(to, from) { Object.keys(from).forEach(function (key) { return to[key] = from[key]; }); return to; }\n\tfunction _extend(toObj, rest) {\n\t    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);\n\t}\n\tfunction _equals(o1, o2) {\n\t    if (o1 === o2)\n\t        return true;\n\t    if (o1 === null || o2 === null)\n\t        return false;\n\t    if (o1 !== o1 && o2 !== o2)\n\t        return true; // NaN === NaN\n\t    var t1 = typeof o1, t2 = typeof o2;\n\t    if (t1 !== t2 || t1 !== 'object')\n\t        return false;\n\t    var tup = [o1, o2];\n\t    if (hof_1.all(predicates_1.isArray)(tup))\n\t        return _arraysEq(o1, o2);\n\t    if (hof_1.all(predicates_1.isDate)(tup))\n\t        return o1.getTime() === o2.getTime();\n\t    if (hof_1.all(predicates_1.isRegExp)(tup))\n\t        return o1.toString() === o2.toString();\n\t    if (hof_1.all(predicates_1.isFunction)(tup))\n\t        return true; // meh\n\t    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\n\t    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\n\t        return false;\n\t    var key, keys = {};\n\t    for (key in o1) {\n\t        if (!_equals(o1[key], o2[key]))\n\t            return false;\n\t        keys[key] = true;\n\t    }\n\t    for (key in o2) {\n\t        if (!keys[key])\n\t            return false;\n\t    }\n\t    return true;\n\t}\n\tfunction _arraysEq(a1, a2) {\n\t    if (a1.length !== a2.length)\n\t        return false;\n\t    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\n\t}\n\t//\n\t//const _addToGroup = (result, keyFn) => (item) =>\n\t//  (result[keyFn(item)] = result[keyFn(item)] || []).push(item) && result;\n\t//const groupBy = (array, keyFn) => array.reduce((memo, item) => _addToGroup(memo, keyFn), {});\n\t//\n\t//\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** Predicates @module common_predicates */ /** */\n\tvar hof_1 = __webpack_require__(5);\n\tvar toStr = Object.prototype.toString;\n\tvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\n\texports.isUndefined = tis('undefined');\n\texports.isDefined = hof_1.not(exports.isUndefined);\n\texports.isNull = function (o) { return o === null; };\n\texports.isFunction = tis('function');\n\texports.isNumber = tis('number');\n\texports.isString = tis('string');\n\texports.isObject = function (x) { return x !== null && typeof x === 'object'; };\n\texports.isArray = Array.isArray;\n\texports.isDate = function (x) { return toStr.call(x) === '[object Date]'; };\n\texports.isRegExp = function (x) { return toStr.call(x) === '[object RegExp]'; };\n\t/**\n\t * Predicate which checks if a value is injectable\n\t *\n\t * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n\t * where all the elements in the array are Strings, except the last one, which is a Function\n\t */\n\tfunction isInjectable(val) {\n\t    if (exports.isArray(val) && val.length) {\n\t        var head = val.slice(0, -1), tail = val.slice(-1);\n\t        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\n\t    }\n\t    return exports.isFunction(val);\n\t}\n\texports.isInjectable = isInjectable;\n\t/**\n\t * Predicate which checks if a value looks like a Promise\n\t *\n\t * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n\t */\n\texports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Higher order functions\n\t *\n\t * @module common_hof\n\t */\n\t\"use strict\";\n\t/**\n\t * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n\t *\n\t * Given a function with N parameters, returns a new function that supports partial application.\n\t * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n\t * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n\t * accept more parameters until all N parameters have been supplied.\n\t *\n\t *\n\t * This contrived example uses a partially applied function as an predicate, which returns true\n\t * if an object is found in both arrays.\n\t * @example\n\t * ```\n\t * // returns true if an object is in both of the two arrays\n\t * function inBoth(array1, array2, object) {\n\t *   return array1.indexOf(object) !== -1 &&\n\t *          array2.indexOf(object) !== 1;\n\t * }\n\t * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n\t * let foos = [obj1, obj3]\n\t * let bars = [obj3, obj4, obj5]\n\t *\n\t * // A curried \"copy\" of inBoth\n\t * let curriedInBoth = curry(inBoth);\n\t * // Partially apply both the array1 and array2\n\t * let inFoosAndBars = curriedInBoth(foos, bars);\n\t *\n\t * // Supply the final argument; since all arguments are\n\t * // supplied, the original inBoth function is then called.\n\t * let obj1InBoth = inFoosAndBars(obj1); // false\n\t *\n\t * // Use the inFoosAndBars as a predicate.\n\t * // Filter, on each iteration, supplies the final argument\n\t * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n\t * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n\t *\n\t * ```\n\t *\n\t * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n\t *\n\t * @param fn\n\t * @returns {*|function(): (*|any)}\n\t */\n\tfunction curry(fn) {\n\t    var initial_args = [].slice.apply(arguments, [1]);\n\t    var func_args_length = fn.length;\n\t    function curried(args) {\n\t        if (args.length >= func_args_length)\n\t            return fn.apply(null, args);\n\t        return function () {\n\t            return curried(args.concat([].slice.apply(arguments)));\n\t        };\n\t    }\n\t    return curried(initial_args);\n\t}\n\texports.curry = curry;\n\t/**\n\t * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n\t * given: f(x), g(x), h(x)\n\t * let composed = compose(f,g,h)\n\t * then, composed is: f(g(h(x)))\n\t */\n\tfunction compose() {\n\t    var args = arguments;\n\t    var start = args.length - 1;\n\t    return function () {\n\t        var i = start, result = args[start].apply(this, arguments);\n\t        while (i--)\n\t            result = args[i].call(this, result);\n\t        return result;\n\t    };\n\t}\n\texports.compose = compose;\n\t/**\n\t * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n\t * given: f(x), g(x), h(x)\n\t * let piped = pipe(f,g,h);\n\t * then, piped is: h(g(f(x)))\n\t */\n\tfunction pipe() {\n\t    var funcs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        funcs[_i - 0] = arguments[_i];\n\t    }\n\t    return compose.apply(null, [].slice.call(arguments).reverse());\n\t}\n\texports.pipe = pipe;\n\t/**\n\t * Given a property name, returns a function that returns that property from an object\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = prop(\"name\");\n\t * getName(obj) === \"blarg\"\n\t */\n\texports.prop = function (name) { return function (obj) { return obj && obj[name]; }; };\n\t/**\n\t * Given a property name and a value, returns a function that returns a boolean based on whether\n\t * the passed object has a property that matches the value\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = propEq(\"name\", \"blarg\");\n\t * getName(obj) === true\n\t */\n\texports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\n\t/**\n\t * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n\t * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n\t * let getName = prop(\"nestedObj.name\");\n\t * getName(obj) === \"blarg\"\n\t * let propNotFound = prop(\"this.property.doesnt.exist\");\n\t * propNotFound(obj) === undefined\n\t */\n\texports.parse = function (name) { return pipe.apply(null, name.split(\".\").map(exports.prop)); };\n\t/**\n\t * Given a function that returns a truthy or falsey value, returns a\n\t * function that returns the opposite (falsey or truthy) value given the same inputs\n\t */\n\texports.not = function (fn) { return function () {\n\t    var args = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        args[_i - 0] = arguments[_i];\n\t    }\n\t    return !fn.apply(null, args);\n\t}; };\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if both functions return truthy for the given arguments\n\t */\n\tfunction and(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) && fn2.apply(null, args);\n\t    };\n\t}\n\texports.and = and;\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if at least one of the functions returns truthy for the given arguments\n\t */\n\tfunction or(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) || fn2.apply(null, args);\n\t    };\n\t}\n\texports.or = or;\n\t/**\n\t * Check if all the elements of an array match a predicate function\n\t *\n\t * @param fn1 a predicate function `fn1`\n\t * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n\t */\n\texports.all = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); }; };\n\texports.any = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); }; };\n\texports.none = exports.not(exports.any);\n\t/** Given a class, returns a Predicate function that returns true if the object is of that class */\n\texports.is = function (ctor) { return function (obj) { return (obj != null && obj.constructor === ctor || obj instanceof ctor); }; };\n\t/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\n\texports.eq = function (val) { return function (other) { return val === other; }; };\n\t/** Given a value, returns a function which returns the value */\n\texports.val = function (v) { return function () { return v; }; };\n\tfunction invoke(fnName, args) {\n\t    return function (obj) { return obj[fnName].apply(obj, args); };\n\t}\n\texports.invoke = invoke;\n\t/**\n\t * Sorta like Pattern Matching (a functional programming conditional construct)\n\t *\n\t * See http://c2.com/cgi/wiki?PatternMatching\n\t *\n\t * This is a conditional construct which allows a series of predicates and output functions\n\t * to be checked and then applied.  Each predicate receives the input.  If the predicate\n\t * returns truthy, then its matching output function (mapping function) is provided with\n\t * the input and, then the result is returned.\n\t *\n\t * Each combination (2-tuple) of predicate + output function should be placed in an array\n\t * of size 2: [ predicate, mapFn ]\n\t *\n\t * These 2-tuples should be put in an outer array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * // Here's a 2-tuple where the first element is the isString predicate\n\t * // and the second element is a function that returns a description of the input\n\t * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n\t *\n\t * // Second tuple: predicate \"isNumber\", mapfn returns a description\n\t * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n\t *\n\t * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n\t *\n\t * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n\t *\n\t * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n\t *\n\t * console.log(descriptionOf(undefined)); // 'notdefined'\n\t * console.log(descriptionOf(55)); // '(55) That's a number!'\n\t * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n\t * ```\n\t *\n\t * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n\t * with a Predicate and a mapping/output function\n\t * @returns {function(any): *}\n\t */\n\tfunction pattern(struct) {\n\t    return function (x) {\n\t        for (var i = 0; i < struct.length; i++) {\n\t            if (struct[i][0](x))\n\t                return struct[i][1](x);\n\t        }\n\t    };\n\t}\n\texports.pattern = pattern;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This module is a stub for core services such as Dependency Injection or Browser Location.\n\t * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n\t *\n\t * @module common\n\t */\n\t\"use strict\";\n\t/** for typedoc */\n\t//import {IQService} from \"angular\";\n\t//import {IInjectorService} from \"angular\";\n\tvar notImplemented = function (fnname) { return function () {\n\t    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']\");\n\t}; };\n\tvar services = {\n\t    $q: undefined,\n\t    $injector: undefined,\n\t    location: {},\n\t    locationConfig: {},\n\t    template: {}\n\t};\n\texports.services = services;\n\t[\"replace\", \"url\", \"path\", \"search\", \"hash\", \"onChange\"]\n\t    .forEach(function (key) { return services.location[key] = notImplemented(key); });\n\t[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"]\n\t    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar Glob = (function () {\n\t    function Glob(text) {\n\t        this.text = text;\n\t        this.glob = text.split('.');\n\t    }\n\t    Glob.prototype.matches = function (name) {\n\t        var segments = name.split('.');\n\t        // match single stars\n\t        for (var i = 0, l = this.glob.length; i < l; i++) {\n\t            if (this.glob[i] === '*')\n\t                segments[i] = '*';\n\t        }\n\t        // match greedy starts\n\t        if (this.glob[0] === '**') {\n\t            segments = segments.slice(segments.indexOf(this.glob[1]));\n\t            segments.unshift('**');\n\t        }\n\t        // match greedy ends\n\t        if (this.glob[this.glob.length - 1] === '**') {\n\t            segments.splice(segments.indexOf(this.glob[this.glob.length - 2]) + 1, Number.MAX_VALUE);\n\t            segments.push('**');\n\t        }\n\t        if (this.glob.length != segments.length)\n\t            return false;\n\t        return segments.join('') === this.glob.join('');\n\t    };\n\t    Glob.is = function (text) {\n\t        return text.indexOf('*') > -1;\n\t    };\n\t    Glob.fromString = function (text) {\n\t        if (!this.is(text))\n\t            return null;\n\t        return new Glob(text);\n\t    };\n\t    return Glob;\n\t}());\n\texports.Glob = Glob;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/** @module common */ /** for typedoc */\n\t\"use strict\";\n\tvar Queue = (function () {\n\t    function Queue(_items, _limit) {\n\t        if (_items === void 0) { _items = []; }\n\t        if (_limit === void 0) { _limit = null; }\n\t        this._items = _items;\n\t        this._limit = _limit;\n\t    }\n\t    Queue.prototype.enqueue = function (item) {\n\t        var items = this._items;\n\t        items.push(item);\n\t        if (this._limit && items.length > this._limit)\n\t            items.shift();\n\t        return item;\n\t    };\n\t    Queue.prototype.dequeue = function () {\n\t        if (this.size())\n\t            return this._items.splice(0, 1)[0];\n\t    };\n\t    Queue.prototype.clear = function () {\n\t        var current = this._items;\n\t        this._items = [];\n\t        return current;\n\t    };\n\t    Queue.prototype.size = function () {\n\t        return this._items.length;\n\t    };\n\t    Queue.prototype.remove = function (item) {\n\t        var idx = this._items.indexOf(item);\n\t        return idx > -1 && this._items.splice(idx, 1)[0];\n\t    };\n\t    Queue.prototype.peekTail = function () {\n\t        return this._items[this._items.length - 1];\n\t    };\n\t    Queue.prototype.peekHead = function () {\n\t        if (this.size())\n\t            return this._items[0];\n\t    };\n\t    return Queue;\n\t}());\n\texports.Queue = Queue;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common_strings */ /** */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(4);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar transition_1 = __webpack_require__(11);\n\tvar resolvable_1 = __webpack_require__(32);\n\t/**\n\t * Returns a string shortened to a maximum length\n\t *\n\t * If the string is already less than the `max` length, return the string.\n\t * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n\t *\n\t * @param max the maximum length of the string to return\n\t * @param str the input string\n\t */\n\tfunction maxLength(max, str) {\n\t    if (str.length <= max)\n\t        return str;\n\t    return str.substr(0, max - 3) + \"...\";\n\t}\n\texports.maxLength = maxLength;\n\t/**\n\t * Returns a string, with spaces added to the end, up to a desired str length\n\t *\n\t * If the string is already longer than the desired length, return the string.\n\t * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n\t *\n\t * @param length the desired length of the string to return\n\t * @param str the input string\n\t */\n\tfunction padString(length, str) {\n\t    while (str.length < length)\n\t        str += \" \";\n\t    return str;\n\t}\n\texports.padString = padString;\n\texports.kebobString = function (camelCase) { return camelCase.replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); };\n\tfunction _toJson(obj) {\n\t    return JSON.stringify(obj);\n\t}\n\tfunction _fromJson(json) {\n\t    return predicates_1.isString(json) ? JSON.parse(json) : json;\n\t}\n\tfunction promiseToString(p) {\n\t    if (hof_1.is(rejectFactory_1.TransitionRejection)(p.reason))\n\t        return p.reason.toString();\n\t    return \"Promise(\" + JSON.stringify(p) + \")\";\n\t}\n\tfunction functionToString(fn) {\n\t    var fnStr = fnToString(fn);\n\t    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n\t    return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\t}\n\texports.functionToString = functionToString;\n\tfunction fnToString(fn) {\n\t    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\n\t    return _fn && _fn.toString() || \"undefined\";\n\t}\n\texports.fnToString = fnToString;\n\tvar stringifyPattern = hof_1.pattern([\n\t    [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\n\t    [predicates_1.isNull, hof_1.val(\"null\")],\n\t    [predicates_1.isPromise, promiseToString],\n\t    [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\n\t    [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\n\t    [predicates_1.isInjectable, functionToString],\n\t    [hof_1.val(true), common_1.identity]\n\t]);\n\tfunction stringify(o) {\n\t    var seen = [];\n\t    function format(val) {\n\t        if (predicates_1.isObject(val)) {\n\t            if (seen.indexOf(val) !== -1)\n\t                return '[circular ref]';\n\t            seen.push(val);\n\t        }\n\t        return stringifyPattern(val);\n\t    }\n\t    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\n\t}\n\texports.stringify = stringify;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar strings_1 = __webpack_require__(9);\n\t(function (RejectType) {\n\t    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n\t    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n\t    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n\t    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n\t})(exports.RejectType || (exports.RejectType = {}));\n\tvar RejectType = exports.RejectType;\n\tvar TransitionRejection = (function () {\n\t    function TransitionRejection(type, message, detail) {\n\t        common_1.extend(this, {\n\t            type: type,\n\t            message: message,\n\t            detail: detail\n\t        });\n\t    }\n\t    TransitionRejection.prototype.toString = function () {\n\t        var detailString = function (d) { return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d); };\n\t        var type = this.type, message = this.message, detail = detailString(this.detail);\n\t        return \"TransitionRejection(type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n\t    };\n\t    return TransitionRejection;\n\t}());\n\texports.TransitionRejection = TransitionRejection;\n\tvar RejectFactory = (function () {\n\t    function RejectFactory() {\n\t    }\n\t    RejectFactory.prototype.superseded = function (detail, options) {\n\t        var message = \"The transition has been superseded by a different transition (see detail).\";\n\t        var reason = new TransitionRejection(RejectType.SUPERSEDED, message, detail);\n\t        if (options && options.redirected) {\n\t            reason.redirected = true;\n\t        }\n\t        return common_1.extend(coreservices_1.services.$q.reject(reason), { reason: reason });\n\t    };\n\t    RejectFactory.prototype.redirected = function (detail) {\n\t        return this.superseded(detail, { redirected: true });\n\t    };\n\t    RejectFactory.prototype.invalid = function (detail) {\n\t        var message = \"This transition is invalid (see detail)\";\n\t        var reason = new TransitionRejection(RejectType.INVALID, message, detail);\n\t        return common_1.extend(coreservices_1.services.$q.reject(reason), { reason: reason });\n\t    };\n\t    RejectFactory.prototype.ignored = function (detail) {\n\t        var message = \"The transition was ignored.\";\n\t        var reason = new TransitionRejection(RejectType.IGNORED, message, detail);\n\t        return common_1.extend(coreservices_1.services.$q.reject(reason), { reason: reason });\n\t    };\n\t    RejectFactory.prototype.aborted = function (detail) {\n\t        // TODO think about how to encapsulate an Error() object\n\t        var message = \"The transition has been aborted.\";\n\t        var reason = new TransitionRejection(RejectType.ABORTED, message, detail);\n\t        return common_1.extend(coreservices_1.services.$q.reject(reason), { reason: reason });\n\t    };\n\t    return RejectFactory;\n\t}());\n\texports.RejectFactory = RejectFactory;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar module_1 = __webpack_require__(13);\n\tvar node_1 = __webpack_require__(39);\n\tvar pathFactory_1 = __webpack_require__(38);\n\tvar module_2 = __webpack_require__(17);\n\tvar module_3 = __webpack_require__(20);\n\tvar module_4 = __webpack_require__(40);\n\tvar transitionCount = 0, REJECT = new module_1.RejectFactory();\n\tvar stateSelf = hof_1.prop(\"self\");\n\t/**\n\t * The representation of a transition between two states.\n\t *\n\t * Contains all contextual information about the to/from states, parameters, resolves, as well as the\n\t * list of states being entered and exited as a result of this transition.\n\t */\n\tvar Transition = (function () {\n\t    /**\n\t     * Creates a new Transition object.\n\t     *\n\t     * If the target state is not valid, an error is thrown.\n\t     *\n\t     * @param fromPath The path of [[Node]]s from which the transition is leaving.  The last node in the `fromPath`\n\t     *        encapsulates the \"from state\".\n\t     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n\t     * @param _transitionService The Transition Service instance\n\t     */\n\t    function Transition(fromPath, targetState, _transitionService) {\n\t        var _this = this;\n\t        this._transitionService = _transitionService;\n\t        this._deferred = coreservices_1.services.$q.defer();\n\t        /**\n\t         * This promise is resolved or rejected based on the outcome of the Transition.\n\t         *\n\t         * When the transition is successful, the promise is resolved\n\t         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n\t         */\n\t        this.promise = this._deferred.promise;\n\t        this.treeChanges = function () { return _this._treeChanges; };\n\t        this.isActive = function () { return _this === _this._options.current(); };\n\t        if (!targetState.valid()) {\n\t            throw new Error(targetState.error());\n\t        }\n\t        // Makes the Transition instance a hook registry (onStart, etc)\n\t        module_1.HookRegistry.mixin(new module_1.HookRegistry(), this);\n\t        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n\t        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\n\t        this.$id = transitionCount++;\n\t        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);\n\t        toPath = pathFactory_1.PathFactory.applyViewConfigs(_transitionService.$view, toPath);\n\t        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n\t        pathFactory_1.PathFactory.bindTransitionResolve(this._treeChanges, this);\n\t    }\n\t    Transition.prototype.$from = function () {\n\t        return common_1.tail(this._treeChanges.from).state;\n\t    };\n\t    Transition.prototype.$to = function () {\n\t        return common_1.tail(this._treeChanges.to).state;\n\t    };\n\t    /**\n\t     * Returns the \"from state\"\n\t     *\n\t     * @returns The state object for the Transition's \"from state\".\n\t     */\n\t    Transition.prototype.from = function () {\n\t        return this.$from().self;\n\t    };\n\t    /**\n\t     * Returns the \"to state\"\n\t     *\n\t     * @returns The state object for the Transition's target state (\"to state\").\n\t     */\n\t    Transition.prototype.to = function () {\n\t        return this.$to().self;\n\t    };\n\t    /**\n\t     * Determines whether two transitions are equivalent.\n\t     */\n\t    Transition.prototype.is = function (compare) {\n\t        if (compare instanceof Transition) {\n\t            // TODO: Also compare parameters\n\t            return this.is({ to: compare.$to().name, from: compare.$from().name });\n\t        }\n\t        return !((compare.to && !module_1.matchState(this.$to(), compare.to)) ||\n\t            (compare.from && !module_1.matchState(this.$from(), compare.from)));\n\t    };\n\t    /**\n\t     * Gets transition parameter values\n\t     *\n\t     * @param pathname Pick which treeChanges path to get parameters for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @returns transition parameter values for the desired path.\n\t     */\n\t    Transition.prototype.params = function (pathname) {\n\t        if (pathname === void 0) { pathname = \"to\"; }\n\t        return this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {});\n\t    };\n\t    /**\n\t     * Get resolved data\n\t     *\n\t     * @returns an object (key/value pairs) where keys are resolve names and values are any settled resolve data,\n\t     *    or `undefined` for pending resolve data\n\t     */\n\t    Transition.prototype.resolves = function () {\n\t        return common_1.map(common_1.tail(this._treeChanges.to).resolveContext.getResolvables(), function (res) { return res.data; });\n\t    };\n\t    /**\n\t     * Adds new resolves to this transition.\n\t     *\n\t     * @param resolves an [[ResolveDeclarations]] object which describes the new resolves\n\t     * @param state the state in the \"to path\" which should receive the new resolves (otherwise, the root state)\n\t     */\n\t    Transition.prototype.addResolves = function (resolves, state) {\n\t        if (state === void 0) { state = \"\"; }\n\t        var stateName = (typeof state === \"string\") ? state : state.name;\n\t        var topath = this._treeChanges.to;\n\t        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\n\t        common_1.tail(topath).resolveContext.addResolvables(module_4.Resolvable.makeResolvables(resolves), targetNode.state);\n\t    };\n\t    /**\n\t     * Gets the previous transition, from which this transition was redirected.\n\t     *\n\t     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n\t     */\n\t    Transition.prototype.previous = function () {\n\t        return this._options.previous || null;\n\t    };\n\t    /**\n\t     * Get the transition options\n\t     *\n\t     * @returns the options for this Transition.\n\t     */\n\t    Transition.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    /**\n\t     * Gets the states being entered.\n\t     *\n\t     * @returns an array of states that will be entered during this transition.\n\t     */\n\t    Transition.prototype.entering = function () {\n\t        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Gets the states being exited.\n\t     *\n\t     * @returns an array of states that will be exited during this transition.\n\t     */\n\t    Transition.prototype.exiting = function () {\n\t        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\n\t    };\n\t    /**\n\t     * Gets the states being retained.\n\t     *\n\t     * @returns an array of states that are already entered from a previous Transition, that will not be\n\t     *    exited during this Transition\n\t     */\n\t    Transition.prototype.retained = function () {\n\t        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Get the [[ViewConfig]]s associated with this Transition\n\t     *\n\t     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n\t     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n\t     *\n\t     * @param pathname the name of the path to fetch views for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n\t     *\n\t     * @returns a list of ViewConfig objects for the given path.\n\t     */\n\t    Transition.prototype.views = function (pathname, state) {\n\t        if (pathname === void 0) { pathname = \"entering\"; }\n\t        var path = this._treeChanges[pathname];\n\t        path = !state ? path : path.filter(hof_1.propEq('state', state));\n\t        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:Transition#redirect\n\t     * @methodOf ui.router.state.type:Transition\n\t     *\n\t     * @description\n\t     * Creates a new transition that is a redirection of the current one. This transition can\n\t     * be returned from a `$transitionsProvider` hook, `$state` event, or other method, to\n\t     * redirect a transition to a new state and/or set of parameters.\n\t     *\n\t     * @returns {Transition} Returns a new `Transition` instance.\n\t     */\n\t    Transition.prototype.redirect = function (targetState) {\n\t        var newOptions = common_1.extend({}, this.options(), targetState.options(), { previous: this });\n\t        targetState = new module_2.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\t        var redirectTo = new Transition(this._treeChanges.from, targetState, this._transitionService);\n\t        var reloadState = targetState.options().reloadState;\n\t        // If the current transition has already resolved any resolvables which are also in the redirected \"to path\", then\n\t        // add those resolvables to the redirected transition.  Allows you to define a resolve at a parent level, wait for\n\t        // the resolve, then redirect to a child state based on the result, and not have to re-fetch the resolve.\n\t        var redirectedPath = this.treeChanges().to;\n\t        var copyResolvesFor = node_1.Node.matching(redirectTo.treeChanges().to, redirectedPath)\n\t            .filter(function (node) { return !reloadState || !reloadState.includes[node.state.name]; });\n\t        var includeResolve = function (resolve, key) { return ['$stateParams', '$transition$'].indexOf(key) === -1; };\n\t        copyResolvesFor.forEach(function (node, idx) { return common_1.extend(node.resolves, common_1.filter(redirectedPath[idx].resolves, includeResolve)); });\n\t        return redirectTo;\n\t    };\n\t    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n\t    Transition.prototype._changedParams = function () {\n\t        var _a = this._treeChanges, to = _a.to, from = _a.from;\n\t        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)\n\t            return undefined;\n\t        var nodeSchemas = to.map(function (node) { return node.paramSchema; });\n\t        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];\n\t        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\n\t        return tuples.map(function (_a) {\n\t            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\n\t            return module_3.Param.changed(schema, toVals, fromVals);\n\t        }).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * Returns true if the transition is dynamic.\n\t     *\n\t     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n\t     *\n\t     * @returns true if the Transition is dynamic\n\t     */\n\t    Transition.prototype.dynamic = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\n\t    };\n\t    /**\n\t     * Returns true if the transition is ignored.\n\t     *\n\t     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n\t     *\n\t     * @returns true if the Transition is ignored.\n\t     */\n\t    Transition.prototype.ignored = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.length === 0;\n\t    };\n\t    /**\n\t     * @hidden\n\t     */\n\t    Transition.prototype.hookBuilder = function () {\n\t        return new module_1.HookBuilder(this._transitionService, this, {\n\t            transition: this,\n\t            current: this._options.current\n\t        });\n\t    };\n\t    /**\n\t     * Runs the transition\n\t     *\n\t     * This method is generally called from the [[StateService.transitionTo]]\n\t     *\n\t     * @returns a promise for a successful transition.\n\t     */\n\t    Transition.prototype.run = function () {\n\t        var _this = this;\n\t        var hookBuilder = this.hookBuilder();\n\t        var runSynchronousHooks = module_1.TransitionHook.runSynchronousHooks;\n\t        // TODO: nuke these in favor of chaining off the promise, i.e.,\n\t        // $transitions.onBefore({}, $transition$ => {$transition$.promise.then()}\n\t        var runSuccessHooks = function () { return runSynchronousHooks(hookBuilder.getOnSuccessHooks(), {}, true); };\n\t        var runErrorHooks = function ($error$) { return runSynchronousHooks(hookBuilder.getOnErrorHooks(), { $error$: $error$ }, true); };\n\t        // Run the success/error hooks *after* the Transition promise is settled.\n\t        this.promise.then(runSuccessHooks, runErrorHooks);\n\t        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\t        if (module_1.TransitionHook.isRejection(syncResult)) {\n\t            var rejectReason = syncResult.reason;\n\t            this._deferred.reject(rejectReason);\n\t            return this.promise;\n\t        }\n\t        if (!this.valid()) {\n\t            var error = new Error(this.error());\n\t            this._deferred.reject(error);\n\t            return this.promise;\n\t        }\n\t        if (this.ignored()) {\n\t            trace_1.trace.traceTransitionIgnored(this);\n\t            var ignored = REJECT.ignored();\n\t            this._deferred.reject(ignored.reason);\n\t            return this.promise;\n\t        }\n\t        // When the chain is complete, then resolve or reject the deferred\n\t        var resolve = function () {\n\t            _this.success = true;\n\t            _this._deferred.resolve(_this);\n\t            trace_1.trace.traceSuccess(_this.$to(), _this);\n\t        };\n\t        var reject = function (error) {\n\t            _this.success = false;\n\t            _this._deferred.reject(error);\n\t            trace_1.trace.traceError(error, _this);\n\t            return coreservices_1.services.$q.reject(error);\n\t        };\n\t        trace_1.trace.traceTransitionStart(this);\n\t        var chain = hookBuilder.asyncHooks().reduce(function (_chain, step) { return _chain.then(step.invokeStep); }, syncResult);\n\t        chain.then(resolve, reject);\n\t        return this.promise;\n\t    };\n\t    /**\n\t     * Checks if the Transition is valid\n\t     *\n\t     * @returns true if the Transition is valid\n\t     */\n\t    Transition.prototype.valid = function () {\n\t        return !this.error();\n\t    };\n\t    /**\n\t     * The reason the Transition is invalid\n\t     *\n\t     * @returns an error message explaining why the transition is invalid\n\t     */\n\t    Transition.prototype.error = function () {\n\t        var state = this.$to();\n\t        if (state.self[common_1.abstractKey])\n\t            return \"Cannot transition to abstract state '\" + state.name + \"'\";\n\t        if (!module_3.Param.validates(state.parameters(), this.params()))\n\t            return \"Param values not valid for state '\" + state.name + \"'\";\n\t    };\n\t    /**\n\t     * A string representation of the Transition\n\t     *\n\t     * @returns A string representation of the Transition\n\t     */\n\t    Transition.prototype.toString = function () {\n\t        var fromStateOrName = this.from();\n\t        var toStateOrName = this.to();\n\t        var avoidEmptyHash = function (params) {\n\t            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, \"#\");\n\t        };\n\t        // (X) means the to state is invalid.\n\t        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\n\t        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n\t    };\n\t    return Transition;\n\t}());\n\texports.Transition = Transition;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * UI-Router Transition Tracing\n\t *\n\t * Enable transition tracing to print transition information to the console, in order to help debug your application.\n\t * Tracing logs detailed information about each Transition to your console.\n\t *\n\t * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n\t *\n\t * ES6\n\t * ```\n\t *\n\t * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n\t * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n\t * ```\n\t *\n\t * CJS\n\t * ```\n\t *\n\t * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n\t * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n\t * ```\n\t *\n\t * Globals\n\t * ```\n\t *\n\t * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n\t * trace.enable(); // Trace everything (very verbose)\n\t * ```\n\t *\n\t * @module trace\n\t */ /** for typedoc */\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar strings_1 = __webpack_require__(9);\n\t/** @hidden */\n\tfunction uiViewString(viewData) {\n\t    if (!viewData)\n\t        return 'ui-view (defunct)';\n\t    return \"ui-view id#\" + viewData.id + \", contextual name '\" + viewData.name + \"@\" + viewData.creationContext + \"', fqn: '\" + viewData.fqn + \"'\";\n\t}\n\t/** @hidden */\n\tvar viewConfigString = function (viewConfig) {\n\t    return (\"ViewConfig targeting ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"', context: '\" + viewConfig.viewDecl.$context.name + \"'\");\n\t};\n\t/** @hidden */\n\tfunction normalizedCat(input) {\n\t    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\n\t}\n\t/**\n\t * Trace categories\n\t *\n\t * [[Trace.enable]] or [[Trace.disable]] a category\n\t *\n\t * `trace.enable(Category.TRANSITION)`\n\t *\n\t * These can also be provided using a matching string, or position ordinal\n\t *\n\t * `trace.enable(\"TRANSITION\")`\n\t *\n\t * `trace.enable(1)`\n\t */\n\t(function (Category) {\n\t    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\n\t    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\n\t    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\n\t    Category[Category[\"INVOKE\"] = 3] = \"INVOKE\";\n\t    Category[Category[\"UIVIEW\"] = 4] = \"UIVIEW\";\n\t    Category[Category[\"VIEWCONFIG\"] = 5] = \"VIEWCONFIG\";\n\t})(exports.Category || (exports.Category = {}));\n\tvar Category = exports.Category;\n\t/**\n\t * Prints UI-Router Transition trace information to the console.\n\t */\n\tvar Trace = (function () {\n\t    function Trace() {\n\t        /** @hidden */\n\t        this._enabled = {};\n\t        this.approximateDigests = 0;\n\t    }\n\t    /** @hidden */\n\t    Trace.prototype._set = function (enabled, categories) {\n\t        var _this = this;\n\t        if (!categories.length) {\n\t            categories = Object.keys(Category)\n\t                .filter(function (k) { return isNaN(parseInt(k, 10)); })\n\t                .map(function (key) { return Category[key]; });\n\t        }\n\t        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\n\t    };\n\t    /**\n\t     * Enables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enable(\"TRANSITION\");\n\t     * ```\n\t     *\n\t     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.enable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(true, categories);\n\t    };\n\t    /**\n\t     * Disables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.disable(\"VIEWCONFIG\");\n\t     * ```\n\t     *\n\t     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.disable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(false, categories);\n\t    };\n\t    /**\n\t     * Retrieves the enabled stateus of a [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enabled(\"VIEWCONFIG\"); // true or false\n\t     * ```\n\t     *\n\t     * @returns boolean true if the category is enabled\n\t     */\n\t    Trace.prototype.enabled = function (category) {\n\t        return !!this._enabled[normalizedCat(category)];\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionStart = function (transition) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Started  -> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionIgnored = function (transition) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Ignored  <> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookInvocation = function (step, options) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.fn);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookResult = function (hookResult, transitionResult, transitionOptions) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult), transitionResultStr = strings_1.stringify(transitionResult);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   <- Hook returned: \" + strings_1.maxLength(200, hookResultStr) + \", transition result: \" + strings_1.maxLength(200, transitionResultStr));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvePath = function (path, options) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, pathStr = path && path.toString(), policyStr = options && options.resolvePolicy;\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolving \" + pathStr + \" (\" + policyStr + \")\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvePathElement = function (pathElement, resolvablePromises, options) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        if (!resolvablePromises.length)\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, resolvablePromisesStr = Object.keys(resolvablePromises).join(\", \"), pathElementStr = pathElement && pathElement.toString(), policyStr = options && options.resolvePolicy;\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolve \" + pathElementStr + \" resolvables: [\" + resolvablePromisesStr + \"] (\" + policyStr + \")\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolveResolvable = function (resolvable, options) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString();\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               Resolving -> \" + resolvableStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvableResolved = function (resolvable, options) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               <- Resolved  \" + resolvableStr + \" to: \" + strings_1.maxLength(200, result));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.tracePathElementInvoke = function (node, fn, deps, options) {\n\t        if (!this.enabled(Category.INVOKE))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, stateName = node && node.state && node.state.toString(), fnName = strings_1.functionToString(fn);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Invoke \" + options.when + \": context: \" + stateName + \" \" + strings_1.maxLength(200, fnName));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceError = function (error, transition) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Rejected \" + transitionStr + \", reason: \" + error);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceSuccess = function (finalState, transition) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = transition.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(transition);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Success  \" + transitionStr + \", final state: \" + state);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUiViewEvent = function (event, viewData, extra) {\n\t        if (extra === void 0) { extra = \"\"; }\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUiViewConfigUpdated = function (viewData, context) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUiViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUiViewScopeCreated = function (viewData, newScope) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUiViewEvent(\"Created scope for\", viewData, \", scope #\" + newScope.$id);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUiViewFill = function (viewData, html) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUiViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"$view.ViewConfig: \" + event + \" \" + viewConfigString(viewConfig));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceUiViewEvent = function (event, viewData) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"$view.ViewConfig: \" + event + \" \" + uiViewString(viewData));\n\t    };\n\t    return Trace;\n\t}());\n\texports.Trace = Trace;\n\t/**\n\t * The [[Trace]] singleton\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * import {trace} from \"angular-ui-router\";\n\t * trace.enable(1, 5);\n\t * ```\n\t */\n\tvar trace = new Trace();\n\texports.trace = trace;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains APIs related to a Transition.\n\t *\n\t * See [[Transition]], [[$transitions]]\n\t *\n\t * @module transition\n\t * @preferred\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(14));\n\t__export(__webpack_require__(15));\n\t__export(__webpack_require__(10));\n\t__export(__webpack_require__(11));\n\t__export(__webpack_require__(16));\n\t__export(__webpack_require__(43));\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar module_1 = __webpack_require__(13);\n\t/**\n\t * This class returns applicable TransitionHooks for a specific Transition instance.\n\t *\n\t * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n\t * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n\t * determined by the type of hook)\n\t *\n\t * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n\t *\n\t * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n\t * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n\t * in the Transition class, so we must also provide the Transition's _treeChanges)\n\t *\n\t */\n\tvar HookBuilder = (function () {\n\t    function HookBuilder($transitions, transition, baseHookOptions) {\n\t        var _this = this;\n\t        this.$transitions = $transitions;\n\t        this.transition = transition;\n\t        this.baseHookOptions = baseHookOptions;\n\t        // TODO: These get* methods are returning different cardinalities of hooks\n\t        // onBefore/onStart/onFinish/onSuccess/onError returns an array of hooks\n\t        // onExit/onRetain/onEnter returns an array of arrays of hooks\n\t        this.getOnBeforeHooks = function () { return _this._buildNodeHooks(\"onBefore\", \"to\", tupleSort(), undefined, { async: false }); };\n\t        this.getOnStartHooks = function () { return _this._buildNodeHooks(\"onStart\", \"to\", tupleSort()); };\n\t        this.getOnExitHooks = function () { return _this._buildNodeHooks(\"onExit\", \"exiting\", tupleSort(true), function (node) { return ({ $state$: node.state }); }); };\n\t        this.getOnRetainHooks = function () { return _this._buildNodeHooks(\"onRetain\", \"retained\", tupleSort(), function (node) { return ({ $state$: node.state }); }); };\n\t        this.getOnEnterHooks = function () { return _this._buildNodeHooks(\"onEnter\", \"entering\", tupleSort(), function (node) { return ({ $state$: node.state }); }); };\n\t        this.getOnFinishHooks = function () { return _this._buildNodeHooks(\"onFinish\", \"to\", tupleSort(), function (node) { return ({ $treeChanges$: _this.treeChanges }); }); };\n\t        this.getOnSuccessHooks = function () { return _this._buildNodeHooks(\"onSuccess\", \"to\", tupleSort(), undefined, { async: false, rejectIfSuperseded: false }); };\n\t        this.getOnErrorHooks = function () { return _this._buildNodeHooks(\"onError\", \"to\", tupleSort(), undefined, { async: false, rejectIfSuperseded: false }); };\n\t        this.treeChanges = transition.treeChanges();\n\t        this.toState = common_1.tail(this.treeChanges.to).state;\n\t        this.fromState = common_1.tail(this.treeChanges.from).state;\n\t        this.transitionOptions = transition.options();\n\t    }\n\t    HookBuilder.prototype.asyncHooks = function () {\n\t        var onStartHooks = this.getOnStartHooks();\n\t        var onExitHooks = this.getOnExitHooks();\n\t        var onRetainHooks = this.getOnRetainHooks();\n\t        var onEnterHooks = this.getOnEnterHooks();\n\t        var onFinishHooks = this.getOnFinishHooks();\n\t        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n\t        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);\n\t    };\n\t    /**\n\t     * Returns an array of newly built TransitionHook objects.\n\t     *\n\t     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n\t     * - Finds [[Node]] (or `Node[]`) to use as the TransitionHook context(s)\n\t     * - For each of the [[Node]]s, creates a TransitionHook\n\t     *\n\t     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n\t     * @param matchingNodesProp selects which [[Node]]s from the [[IMatchingNodes]] object to create hooks for.\n\t     * @param getLocals a function which accepts a [[Node]] and returns additional locals to provide to the hook as injectables\n\t     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n\t     * @param options any specific Transition Hook Options\n\t     */\n\t    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, getLocals, options) {\n\t        var _this = this;\n\t        if (getLocals === void 0) { getLocals = function (node) { return ({}); }; }\n\t        // Find all the matching registered hooks for a given hook type\n\t        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n\t        if (!matchingHooks)\n\t            return [];\n\t        var makeTransitionHooks = function (hook) {\n\t            // Fetch the Nodes that caused this hook to match.\n\t            var matches = hook.matches(_this.treeChanges);\n\t            // Select the Node[] that will be used as TransitionHook context objects\n\t            var nodes = matches[matchingNodesProp];\n\t            // Return an array of HookTuples\n\t            return nodes.map(function (node) {\n\t                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);\n\t                var transitionHook = new module_1.TransitionHook(hook.callback, getLocals(node), node.resolveContext, _options);\n\t                return { hook: hook, node: node, transitionHook: transitionHook };\n\t            });\n\t        };\n\t        return matchingHooks.map(makeTransitionHooks)\n\t            .reduce(common_1.unnestR, [])\n\t            .sort(sortHooksFn)\n\t            .map(function (tuple) { return tuple.transitionHook; });\n\t    };\n\t    /**\n\t     * Finds all IEventHooks from:\n\t     * - The Transition object instance hook registry\n\t     * - The TransitionService ($transitions) global hook registry\n\t     *\n\t     * which matched:\n\t     * - the eventType\n\t     * - the matchCriteria (to, from, exiting, retained, entering)\n\t     *\n\t     * @returns an array of matched [[IEventHook]]s\n\t     */\n\t    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {\n\t        return [this.transition, this.$transitions] // Instance and Global hook registries\n\t            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries\n\t            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookName)) // Sanity check\n\t            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array\n\t            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\n\t    };\n\t    return HookBuilder;\n\t}());\n\texports.HookBuilder = HookBuilder;\n\t/**\n\t * A factory for a sort function for HookTuples.\n\t *\n\t * The sort function first compares the Node depth (how deep in the state tree a node is), then compares\n\t * the EventHook priority.\n\t *\n\t * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n\t * @returns a tuple sort function\n\t */\n\tfunction tupleSort(reverseDepthSort) {\n\t    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\n\t    return function nodeDepthThenPriority(l, r) {\n\t        var factor = reverseDepthSort ? -1 : 1;\n\t        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n\t        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n\t    };\n\t}\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar glob_1 = __webpack_require__(7);\n\t/**\n\t * Determines if the given state matches the matchCriteria\n\t * @param state a State Object to test against\n\t * @param criterion\n\t * - If a string, matchState uses the string as a glob-matcher against the state name\n\t * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n\t *   and returns a positive match if any of the globs match.\n\t * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n\t * @returns {boolean}\n\t */\n\tfunction matchState(state, criterion) {\n\t    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\n\t    function matchGlobs(_state) {\n\t        var globStrings = toMatch;\n\t        for (var i = 0; i < globStrings.length; i++) {\n\t            var glob = glob_1.Glob.fromString(globStrings[i]);\n\t            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\n\t    return !!matchFn(state);\n\t}\n\texports.matchState = matchState;\n\tvar EventHook = (function () {\n\t    function EventHook(matchCriteria, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        this.callback = callback;\n\t        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n\t        this.priority = options.priority || 0;\n\t        this.bind = options.bind || null;\n\t    }\n\t    EventHook._matchingNodes = function (nodes, criterion) {\n\t        if (criterion === true)\n\t            return nodes;\n\t        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\n\t        return matching.length ? matching : null;\n\t    };\n\t    /**\n\t     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n\t     *\n\t     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n\t     * are the matching [[Node]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n\t     */\n\t    EventHook.prototype.matches = function (treeChanges) {\n\t        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\t        var matches = {\n\t            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),\n\t            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),\n\t            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n\t            retained: _matchingNodes(treeChanges.retained, mc.retained),\n\t            entering: _matchingNodes(treeChanges.entering, mc.entering),\n\t        };\n\t        // Check if all the criteria matched the TreeChanges object\n\t        var allMatched = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n\t            .map(function (prop) { return matches[prop]; })\n\t            .reduce(common_1.allTrueR, true);\n\t        return allMatched ? matches : null;\n\t    };\n\t    return EventHook;\n\t}());\n\texports.EventHook = EventHook;\n\t// Return a registration function of the requested type.\n\tfunction makeHookRegistrationFn(hooks, name) {\n\t    return function (matchObject, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        var eventHook = new EventHook(matchObject, callback, options);\n\t        hooks[name].push(eventHook);\n\t        return function deregisterEventHook() {\n\t            common_1.removeFrom(hooks[name])(eventHook);\n\t        };\n\t    };\n\t}\n\tvar HookRegistry = (function () {\n\t    function HookRegistry() {\n\t        var _this = this;\n\t        this._transitionEvents = {\n\t            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n\t        };\n\t        this.getHooks = function (name) { return _this._transitionEvents[name]; };\n\t        this.onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n\t        this.onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n\t        /**\n\t         * @ngdoc function\n\t         * @name ui.router.state.$transitionsProvider#onEnter\n\t         * @methodOf ui.router.state.$transitionsProvider\n\t         *\n\t         * @description\n\t         * Registers a function to be injected and invoked during a transition between the matched 'to' and 'from' states,\n\t         * when the matched 'to' state is being entered. This function is injected with the entering state's resolves.\n\t         *\n\t         * This function can be injected with two additional special value:\n\t         * - **`$transition$`**: The current transition\n\t         * - **`$state$`**: The state being entered\n\t         *\n\t         * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         */\n\t        this.onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n\t        /**\n\t         * @ngdoc function\n\t         * @name ui.router.state.$transitionsProvider#onRetain\n\t         * @methodOf ui.router.state.$transitionsProvider\n\t         *\n\t         * @description\n\t         * Registers a function to be injected and invoked during a transition between the matched 'to' and 'from states,\n\t         * when the matched 'from' state is already active and is not being exited nor entered.\n\t         *\n\t         * This function can be injected with two additional special value:\n\t         * - **`$transition$`**: The current transition\n\t         * - **`$state$`**: The state that is retained\n\t         *\n\t         * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         */\n\t        this.onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n\t        /**\n\t         * @ngdoc function\n\t         * @name ui.router.state.$transitionsProvider#onExit\n\t         * @methodOf ui.router.state.$transitionsProvider\n\t         *\n\t         * @description\n\t         * Registers a function to be injected and invoked during a transition between the matched 'to' and 'from states,\n\t         * when the matched 'from' state is being exited. This function is in injected with the exiting state's resolves.\n\t         *\n\t         * This function can be injected with two additional special value:\n\t         * - **`$transition$`**: The current transition\n\t         * - **`$state$`**: The state being entered\n\t         *\n\t         * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         */\n\t        this.onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n\t        /**\n\t         * @ngdoc function\n\t         * @name ui.router.state.$transitionsProvider#onFinish\n\t         * @methodOf ui.router.state.$transitionsProvider\n\t         *\n\t         * @description\n\t         * Registers a function to be injected and invoked when a transition is finished entering/exiting all states.\n\t         *\n\t         * This function can be injected with:\n\t         * - **`$transition$`**: The current transition\n\t         *\n\t         * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         */\n\t        this.onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n\t        /**\n\t         * @ngdoc function\n\t         * @name ui.router.state.$transitionsProvider#onSuccess\n\t         * @methodOf ui.router.state.$transitionsProvider\n\t         *\n\t         * @description\n\t         * Registers a function to be injected and invoked when a transition has successfully completed between the matched\n\t         * 'to' and 'from' state is being exited.\n\t         * This function is in injected with the 'to' state's resolves (note: `JIT` resolves are not injected).\n\t         *\n\t         * This function can be injected with two additional special value:\n\t         * - **`$transition$`**: The current transition\n\t         *\n\t         * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         * @param {function} callback The function which will be injected and invoked, when a matching transition is started.\n\t         *   The function's return value is ignored.\n\t         */\n\t        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n\t        /**\n\t         * @ngdoc function\n\t         * @name ui.router.state.$transitionsProvider#onError\n\t         * @methodOf ui.router.state.$transitionsProvider\n\t         *\n\t         * @description\n\t         * Registers a function to be injected and invoked when a transition has failed for any reason between the matched\n\t         * 'to' and 'from' state. The transition rejection reason is injected as `$error$`.\n\t         *\n\t         * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n\t         * @param {function} callback The function which will be injected and invoked, when a matching transition is started.\n\t         *   The function's return value is ignored.\n\t         */\n\t        this.onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n\t    }\n\t    HookRegistry.mixin = function (source, target) {\n\t        Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(function (key) { return target[key] = source[key]; });\n\t    };\n\t    return HookRegistry;\n\t}());\n\texports.HookRegistry = HookRegistry;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar module_1 = __webpack_require__(17);\n\tvar REJECT = new rejectFactory_1.RejectFactory();\n\tvar defaultOptions = {\n\t    async: true,\n\t    rejectIfSuperseded: true,\n\t    current: common_1.noop,\n\t    transition: null,\n\t    traceData: {},\n\t    bind: null\n\t};\n\tvar TransitionHook = (function () {\n\t    function TransitionHook(fn, locals, resolveContext, options) {\n\t        var _this = this;\n\t        this.fn = fn;\n\t        this.locals = locals;\n\t        this.resolveContext = resolveContext;\n\t        this.options = options;\n\t        this.isSuperseded = function () { return _this.options.current() !== _this.options.transition; };\n\t        /**\n\t         * Handles transition abort and transition redirect. Also adds any returned resolvables\n\t         * to the pathContext for the current pathElement.  If the transition is rejected, then a rejected\n\t         * promise is returned here, otherwise undefined is returned.\n\t         */\n\t        this.mapHookResult = hof_1.pattern([\n\t            // Transition is no longer current\n\t            [this.isSuperseded, function () { return REJECT.superseded(_this.options.current()); }],\n\t            // If the hook returns false, abort the current Transition\n\t            [hof_1.eq(false), function () { return REJECT.aborted(\"Hook aborted transition\"); }],\n\t            // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n\t            [hof_1.is(module_1.TargetState), function (target) { return REJECT.redirected(target); }],\n\t            // A promise was returned, wait for the promise and then chain another hookHandler\n\t            [predicates_1.isPromise, function (promise) { return promise.then(_this.handleHookResult.bind(_this)); }]\n\t        ]);\n\t        this.invokeStep = function (moreLocals) {\n\t            var _a = _this, options = _a.options, fn = _a.fn, resolveContext = _a.resolveContext;\n\t            var locals = common_1.extend({}, _this.locals, moreLocals);\n\t            trace_1.trace.traceHookInvocation(_this, options);\n\t            if (options.rejectIfSuperseded && _this.isSuperseded()) {\n\t                return REJECT.superseded(options.current());\n\t            }\n\t            // TODO: Need better integration of returned promises in synchronous code.\n\t            if (!options.async) {\n\t                var hookResult = resolveContext.invokeNow(fn, locals, options);\n\t                return _this.handleHookResult(hookResult);\n\t            }\n\t            return resolveContext.invokeLater(fn, locals, options).then(_this.handleHookResult.bind(_this));\n\t        };\n\t        this.options = common_1.defaults(options, defaultOptions);\n\t    }\n\t    TransitionHook.prototype.handleHookResult = function (hookResult) {\n\t        if (!predicates_1.isDefined(hookResult))\n\t            return undefined;\n\t        trace_1.trace.traceHookResult(hookResult, undefined, this.options);\n\t        var transitionResult = this.mapHookResult(hookResult);\n\t        if (transitionResult)\n\t            trace_1.trace.traceHookResult(hookResult, transitionResult, this.options);\n\t        return transitionResult;\n\t    };\n\t    TransitionHook.prototype.toString = function () {\n\t        var _a = this, options = _a.options, fn = _a.fn;\n\t        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(fn);\n\t        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\n\t    };\n\t    /**\n\t     * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n\t     *\n\t     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n\t     */\n\t    TransitionHook.runSynchronousHooks = function (hooks, locals, swallowExceptions) {\n\t        if (locals === void 0) { locals = {}; }\n\t        if (swallowExceptions === void 0) { swallowExceptions = false; }\n\t        var results = [];\n\t        for (var i = 0; i < hooks.length; i++) {\n\t            try {\n\t                results.push(hooks[i].invokeStep(locals));\n\t            }\n\t            catch (exception) {\n\t                if (!swallowExceptions)\n\t                    return REJECT.aborted(exception);\n\t                console.log(\"Swallowed exception during synchronous hook handler: \" + exception); // TODO: What to do here?\n\t            }\n\t        }\n\t        var rejections = results.filter(TransitionHook.isRejection);\n\t        if (rejections.length)\n\t            return rejections[0];\n\t        return results\n\t            .filter(hof_1.not(TransitionHook.isRejection))\n\t            .filter(predicates_1.isPromise)\n\t            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());\n\t    };\n\t    TransitionHook.isRejection = function (hookResult) {\n\t        return hookResult && hookResult.reason instanceof rejectFactory_1.TransitionRejection && hookResult;\n\t    };\n\t    return TransitionHook;\n\t}());\n\texports.TransitionHook = TransitionHook;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module state */ /** for typedoc */\n\t__export(__webpack_require__(18));\n\t__export(__webpack_require__(19));\n\t__export(__webpack_require__(26));\n\t__export(__webpack_require__(33));\n\t__export(__webpack_require__(34));\n\t__export(__webpack_require__(35));\n\t__export(__webpack_require__(36));\n\t__export(__webpack_require__(37));\n\t__export(__webpack_require__(27));\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar common_1 = __webpack_require__(3);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.$stateProvider\n\t *\n\t * @requires ui.router.router.$urlRouterProvider\n\t * @requires ui.router.util.$urlMatcherFactoryProvider\n\t *\n\t * @description\n\t * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n\t * on state.\n\t *\n\t * A state corresponds to a \"place\" in the application in terms of the overall UI and\n\t * navigation. A state describes (via the controller / template / view properties) what\n\t * the UI looks like and does at that place.\n\t *\n\t * States often have things in common, and the primary way of factoring out these\n\t * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n\t * nested states.\n\t *\n\t * The `$stateProvider` provides interfaces to declare these states for your app.\n\t */\n\tvar StateProvider = (function () {\n\t    function StateProvider(stateRegistry) {\n\t        this.stateRegistry = stateRegistry;\n\t        this.invalidCallbacks = [];\n\t        common_1.bindFunctions(StateProvider.prototype, this, this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#decorator\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Allows you to extend (carefully) or override (at your own peril) the\n\t     * `stateBuilder` object used internally by `$stateProvider`. This can be used\n\t     * to add custom functionality to ui-router, for example inferring templateUrl\n\t     * based on the state name.\n\t     *\n\t     * When passing only a name, it returns the current (original or decorated) builder\n\t     * function that matches `name`.\n\t     *\n\t     * The builder functions that can be decorated are listed below. Though not all\n\t     * necessarily have a good use case for decoration, that is up to you to decide.\n\t     *\n\t     * In addition, users can attach custom decorators, which will generate new\n\t     * properties within the state's internal definition. There is currently no clear\n\t     * use-case for this beyond accessing internal states (i.e. $state.$current),\n\t     * however, expect this to become increasingly relevant as we introduce additional\n\t     * meta-programming features.\n\t     *\n\t     * **Warning**: Decorators should not be interdependent because the order of\n\t     * execution of the builder functions in non-deterministic. Builder functions\n\t     * should only be dependent on the state definition object and super function.\n\t     *\n\t     *\n\t     * Existing builder functions and current return values:\n\t     *\n\t     * - **parent** `{object}` - returns the parent state object.\n\t     * - **data** `{object}` - returns state data, including any inherited data that is not\n\t     *   overridden by own values (if any).\n\t     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n\t     *   or `null`.\n\t     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n\t     *   navigable).\n\t     * - **params** `{object}` - returns an array of state params that are ensured to\n\t     *   be a super-set of parent's params.\n\t     * - **views** `{object}` - returns a views object where each key is an absolute view\n\t     *   name (i.e. \"viewName@stateName\") and each value is the config object\n\t     *   (template, controller) for the view. Even when you don't use the views object\n\t     *   explicitly on a state config, one is still created for you internally.\n\t     *   So by decorating this builder function you have access to decorating template\n\t     *   and controller properties.\n\t     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n\t     *   not including any params defined by ancestor states.\n\t     * - **path** `{string}` - returns the full path from the root down to this state.\n\t     *   Needed for state activation.\n\t     * - **includes** `{object}` - returns an object that includes every state that\n\t     *   would pass a `$state.includes()` test.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * // Override the internal 'views' builder with a function that takes the state\n\t     * // definition, and a reference to the internal function being overridden:\n\t     * $stateProvider.decorator('views', function (state, parent) {\n\t     *   let result = {},\n\t     *       views = parent(state);\n\t     *\n\t     *   angular.forEach(views, function (config, name) {\n\t     *     let autoName = (state.name + '.' + name).replace('.', '/');\n\t     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n\t     *     result[name] = config;\n\t     *   });\n\t     *   return result;\n\t     * });\n\t     *\n\t     * $stateProvider.state('home', {\n\t     *   views: {\n\t     *     'contact.list': { controller: 'ListController' },\n\t     *     'contact.item': { controller: 'ItemController' }\n\t     *   }\n\t     * });\n\t     *\n\t     * // ...\n\t     *\n\t     * $state.go('home');\n\t     * // Auto-populates list and item views with /partials/home/contact/list.html,\n\t     * // and /partials/home/contact/item.html, respectively.\n\t     * </pre>\n\t     *\n\t     * @param {string} name The name of the builder function to decorate.\n\t     * @param {object} func A function that is responsible for decorating the original\n\t     * builder function. The function receives two parameters:\n\t     *\n\t     *   - `{object}` - state - The state config object.\n\t     *   - `{object}` - super - The original builder function.\n\t     *\n\t     * @return {object} $stateProvider - $stateProvider instance\n\t     */\n\t    StateProvider.prototype.decorator = function (name, func) {\n\t        return this.stateRegistry.decorator(name, func) || this;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#state\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Registers a state configuration under a given state name. The stateConfig object\n\t     * has the following acceptable properties.\n\t     *\n\t     * <a id='template'></a>\n\t     *\n\t     * - **`template`** - {string|function=} - html template as a string or a function that returns\n\t     *   an html template as a string which should be used by the uiView directives. This property\n\t     *   takes precedence over templateUrl.\n\t     *\n\t     *   If `template` is a function, it will be called with the following parameters:\n\t     *\n\t     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n\t     *     applying the current state\n\t     *\n\t     * <a id='templateUrl'></a>\n\t     *\n\t     * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n\t     *   template that should be used by uiView.\n\t     *\n\t     *   If `templateUrl` is a function, it will be called with the following parameters:\n\t     *\n\t     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n\t     *     applying the current state\n\t     *\n\t     * <a id='templateProvider'></a>\n\t     *\n\t     * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n\t     *   string.\n\t     *\n\t     * <a id='controller'></a>\n\t     *\n\t     * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n\t     *   related scope or the name of a registered controller if passed as a string.\n\t     *\n\t     * <a id='controllerProvider'></a>\n\t     *\n\t     * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n\t     *   the actual controller or string.\n\t     *\n\t     * <a id='controllerAs'></a>\n\t     *\n\t     * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n\t     *   published to scope under the controllerAs name.\n\t     *\n\t     * <a id='resolve'></a>\n\t     *\n\t     * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n\t     *   should be injected into the controller. If any of these dependencies are promises,\n\t     *   the router will wait for them all to be resolved or one to be rejected before the\n\t     *   controller is instantiated. If all the promises are resolved successfully, the values\n\t     *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n\t     *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n\t     *\n\t     *   - key - {string}: name of dependency to be injected into controller\n\t     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n\t     *     it is injected and return value it treated as dependency. If result is a promise, it is\n\t     *     resolved before its value is injected into controller.\n\t     *\n\t     * <a id='url'></a>\n\t     *\n\t     * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n\t     *   transitioned to, the `$stateParams` service will be populated with any\n\t     *   parameters that were passed.\n\t     *\n\t     * <a id='params'></a>\n\t     *\n\t     * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n\t     *   use this within a state if you are not using url. Otherwise you can specify your\n\t     *   parameters within the url. When a state is navigated or transitioned to, the\n\t     *   $stateParams service will be populated with any parameters that were passed.\n\t     *\n\t     * <a id='views'></a>\n\t     *\n\t     * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n\t     *   manually/explicitly.\n\t     *\n\t     * <a id='abstract'></a>\n\t     *\n\t     * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n\t     *   but can provide inherited properties to its common children states.\n\t     *\n\t     * <a id='onEnter'></a>\n\t     *\n\t     * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n\t     *   to trigger an action or dispatch an event, such as opening a dialog.\n\t     * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n\t     *\n\t     * <a id='onExit'></a>\n\t     *\n\t     * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n\t     *   trigger an action or dispatch an event, such as opening a dialog.\n\t     * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n\t     *\n\t     * <a id='reloadOnSearch'></a>\n\t     *\n\t     * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n\t     *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n\t     *   Useful for when you'd like to modify $location.search() without triggering a reload.\n\t     *\n\t     * <a id='data'></a>\n\t     *\n\t     * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * // Some state name examples\n\t     *\n\t     * // stateName can be a single top-level name (must be unique).\n\t     * $stateProvider.state(\"home\", {});\n\t     *\n\t     * // Or it can be a nested state name. This state is a child of the\n\t     * // above \"home\" state.\n\t     * $stateProvider.state(\"home.newest\", {});\n\t     *\n\t     * // Nest states as deeply as needed.\n\t     * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n\t     *\n\t     * // state() returns $stateProvider, so you can chain state declarations.\n\t     * $stateProvider\n\t     *   .state(\"home\", {})\n\t     *   .state(\"about\", {})\n\t     *   .state(\"contacts\", {});\n\t     * </pre>\n\t     *\n\t     * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n\t     * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n\t     * @param {object} definition State configuration object.\n\t     */\n\t    StateProvider.prototype.state = function (name, definition) {\n\t        if (predicates_1.isObject(name)) {\n\t            definition = name;\n\t        }\n\t        else {\n\t            definition.name = name;\n\t        }\n\t        this.stateRegistry.register(definition);\n\t        return this;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#onInvalid\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Registers a function to be injected and invoked when transitionTo has been called with an invalid\n\t     * state reference parameter\n\t     *\n\t     * This function can be injected with one some special values:\n\t     * - **`$to$`**: TargetState\n\t     * - **`$from$`**: TargetState\n\t     *\n\t     * @param {function} callback\n\t     *   The function which will be injected and invoked, when a matching transition is started.\n\t     *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n\t     *   is returned, it is treated as a redirect.\n\t     */\n\t    StateProvider.prototype.onInvalid = function (callback) {\n\t        this.invalidCallbacks.push(callback);\n\t    };\n\t    return StateProvider;\n\t}());\n\texports.StateProvider = StateProvider;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar module_1 = __webpack_require__(20);\n\tvar parseUrl = function (url) {\n\t    if (!predicates_1.isString(url))\n\t        return false;\n\t    var root = url.charAt(0) === '^';\n\t    return { val: root ? url.substring(1) : url, root: root };\n\t};\n\t/**\n\t * @internalapi A internal global service\n\t *\n\t * StateBuilder is a factory for the internal [[State]] objects.\n\t *\n\t * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n\t * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n\t * [[State]] object, which has an API and is used internally.\n\t *\n\t * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n\t * using the [[builder]] method.\n\t */\n\tvar StateBuilder = (function () {\n\t    function StateBuilder(matcher, $urlMatcherFactoryProvider) {\n\t        this.matcher = matcher;\n\t        var self = this;\n\t        var isRoot = function (state) { return state.name === \"\"; };\n\t        var root = function () { return matcher.find(\"\"); };\n\t        this.builders = {\n\t            self: [function (state) {\n\t                    state.self.$$state = function () { return state; };\n\t                    return state.self;\n\t                }],\n\t            parent: [function (state) {\n\t                    if (isRoot(state))\n\t                        return null;\n\t                    return matcher.find(self.parentName(state)) || root();\n\t                }],\n\t            data: [function (state) {\n\t                    if (state.parent && state.parent.data) {\n\t                        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\n\t                    }\n\t                    return state.data;\n\t                }],\n\t            // Build a URLMatcher if necessary, either via a relative or absolute URL\n\t            url: [function (state) {\n\t                    var stateDec = state;\n\t                    var parsed = parseUrl(stateDec.url), parent = state.parent;\n\t                    var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n\t                        params: state.params || {},\n\t                        paramMap: function (paramConfig, isSearch) {\n\t                            if (stateDec.reloadOnSearch === false && isSearch)\n\t                                paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\n\t                            return paramConfig;\n\t                        }\n\t                    });\n\t                    if (!url)\n\t                        return null;\n\t                    if (!$urlMatcherFactoryProvider.isMatcher(url))\n\t                        throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n\t                    return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\n\t                }],\n\t            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n\t            navigable: [function (state) {\n\t                    return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n\t                }],\n\t            params: [function (state) {\n\t                    var makeConfigParam = function (config, id) { return module_1.Param.fromConfig(id, null, config); };\n\t                    var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\n\t                    var nonUrlParams = common_1.values(common_1.map(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\n\t                    return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\n\t                }],\n\t            // Each framework-specific ui-router implementation should define its own `views` builder\n\t            // e.g., src/ng1/viewsBuilder.ts\n\t            views: [],\n\t            // Keep a full path from the root down to this state as this is needed for state activation.\n\t            path: [function (state) {\n\t                    return state.parent ? state.parent.path.concat(state) : [state];\n\t                }],\n\t            // Speed up $state.includes() as it's used a lot\n\t            includes: [function (state) {\n\t                    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\n\t                    includes[state.name] = true;\n\t                    return includes;\n\t                }]\n\t        };\n\t    }\n\t    /**\n\t     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n\t     * More than one BuilderFunction can be registered for a given property.\n\t     *\n\t     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n\t     *\n\t     * @param name The name of the State property being registered for.\n\t     * @param fn The BuilderFunction which will be used to build the State property\n\t     * @returns a function which deregisters the BuilderFunction\n\t     */\n\t    StateBuilder.prototype.builder = function (name, fn) {\n\t        var builders = this.builders;\n\t        var array = builders[name] || [];\n\t        // Backwards compat: if only one builder exists, return it, else return whole arary.\n\t        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\n\t            return array.length > 1 ? array : array[0];\n\t        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\n\t            return;\n\t        builders[name] = array;\n\t        builders[name].push(fn);\n\t        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\n\t    };\n\t    /**\n\t     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n\t     * properties and API built.\n\t     *\n\t     * @param state an uninitialized State object\n\t     * @returns the built State object\n\t     */\n\t    StateBuilder.prototype.build = function (state) {\n\t        var _a = this, matcher = _a.matcher, builders = _a.builders;\n\t        var parent = this.parentName(state);\n\t        if (parent && !matcher.find(parent))\n\t            return null;\n\t        for (var key in builders) {\n\t            if (!builders.hasOwnProperty(key))\n\t                continue;\n\t            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\n\t            state[key] = chain(state);\n\t        }\n\t        return state;\n\t    };\n\t    StateBuilder.prototype.parentName = function (state) {\n\t        var name = state.name || \"\";\n\t        if (name.indexOf('.') !== -1)\n\t            return name.substring(0, name.lastIndexOf('.'));\n\t        if (!state.parent)\n\t            return \"\";\n\t        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t    };\n\t    StateBuilder.prototype.name = function (state) {\n\t        var name = state.name;\n\t        if (name.indexOf('.') !== -1 || !state.parent)\n\t            return name;\n\t        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t        return parentName ? parentName + \".\" + name : name;\n\t    };\n\t    return StateBuilder;\n\t}());\n\texports.StateBuilder = StateBuilder;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains code for State Parameters.\n\t *\n\t * See [[ParamDeclaration]]\n\t * @module params\n\t * @preferred doc\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(21));\n\t__export(__webpack_require__(24));\n\t__export(__webpack_require__(25));\n\t__export(__webpack_require__(23));\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar urlMatcherConfig_1 = __webpack_require__(22);\n\tvar type_1 = __webpack_require__(23);\n\tvar paramTypes_1 = __webpack_require__(24);\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar isShorthand = function (cfg) { return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0; };\n\t(function (DefType) {\n\t    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\n\t    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\n\t    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\n\t})(exports.DefType || (exports.DefType = {}));\n\tvar DefType = exports.DefType;\n\tfunction unwrapShorthand(cfg) {\n\t    cfg = isShorthand(cfg) && { value: cfg } || cfg;\n\t    return common_1.extend(cfg, {\n\t        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }\n\t    });\n\t}\n\tfunction getType(cfg, urlType, location, id) {\n\t    if (cfg.type && urlType && urlType.name !== 'string')\n\t        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n\t    if (cfg.type && urlType && urlType.name === 'string' && paramTypes_1.paramTypes.type(cfg.type))\n\t        return paramTypes_1.paramTypes.type(cfg.type);\n\t    if (urlType)\n\t        return urlType;\n\t    if (!cfg.type)\n\t        return (location === DefType.CONFIG ? paramTypes_1.paramTypes.type(\"any\") : paramTypes_1.paramTypes.type(\"string\"));\n\t    return cfg.type instanceof type_1.Type ? cfg.type : paramTypes_1.paramTypes.type(cfg.type);\n\t}\n\t/**\n\t * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n\t */\n\tfunction getSquashPolicy(config, isOptional) {\n\t    var squash = config.squash;\n\t    if (!isOptional || squash === false)\n\t        return false;\n\t    if (!predicates_1.isDefined(squash) || squash == null)\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();\n\t    if (squash === true || predicates_1.isString(squash))\n\t        return squash;\n\t    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n\t}\n\tfunction getReplace(config, arrayMode, isOptional, squash) {\n\t    var replace, configuredKeys, defaultPolicy = [\n\t        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\n\t        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n\t    ];\n\t    replace = predicates_1.isArray(config.replace) ? config.replace : [];\n\t    if (predicates_1.isString(squash))\n\t        replace.push({ from: squash, to: undefined });\n\t    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\n\t    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\n\t}\n\tvar Param = (function () {\n\t    function Param(id, type, config, location) {\n\t        config = unwrapShorthand(config);\n\t        type = getType(config, type, location, id);\n\t        var arrayMode = getArrayMode();\n\t        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n\t        var isOptional = config.value !== undefined;\n\t        var dynamic = config.dynamic === true;\n\t        var squash = getSquashPolicy(config, isOptional);\n\t        var replace = getReplace(config, arrayMode, isOptional, squash);\n\t        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n\t        function getArrayMode() {\n\t            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n\t            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n\t            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\n\t        }\n\t        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });\n\t    }\n\t    Param.prototype.isDefaultValue = function (value) {\n\t        return this.isOptional && this.type.equals(this.value(), value);\n\t    };\n\t    /**\n\t     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n\t     * default value, which may be the result of an injectable function.\n\t     */\n\t    Param.prototype.value = function (value) {\n\t        var _this = this;\n\t        /**\n\t         * [Internal] Get the default value of a parameter, which may be an injectable function.\n\t         */\n\t        var $$getDefaultValue = function () {\n\t            if (!coreservices_1.services.$injector)\n\t                throw new Error(\"Injectable functions cannot be called at configuration time\");\n\t            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\n\t            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\n\t                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of Type (\" + _this.type.name + \")\");\n\t            return defaultValue;\n\t        };\n\t        var $replace = function (val) {\n\t            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop(\"to\"));\n\t            return replacement.length ? replacement[0] : val;\n\t        };\n\t        value = $replace(value);\n\t        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n\t    };\n\t    Param.prototype.isSearch = function () {\n\t        return this.location === DefType.SEARCH;\n\t    };\n\t    Param.prototype.validates = function (value) {\n\t        // There was no parameter value, but the param is optional\n\t        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)\n\t            return true;\n\t        // The value was not of the correct Type, and could not be decoded to the correct Type\n\t        var normalized = this.type.$normalize(value);\n\t        if (!this.type.is(normalized))\n\t            return false;\n\t        // The value was of the correct type, but when encoded, did not match the Type's regexp\n\t        var encoded = this.type.encode(normalized);\n\t        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\n\t    };\n\t    Param.prototype.toString = function () {\n\t        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\n\t    };\n\t    /** Creates a new [[Param]] from a CONFIG block */\n\t    Param.fromConfig = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.CONFIG);\n\t    };\n\t    /** Creates a new [[Param]] from a url PATH */\n\t    Param.fromPath = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.PATH);\n\t    };\n\t    /** Creates a new [[Param]] from a url SEARCH */\n\t    Param.fromSearch = function (id, type, config) {\n\t        return new Param(id, type, config, DefType.SEARCH);\n\t    };\n\t    Param.values = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});\n\t    };\n\t    /**\n\t     * Finds [[Param]] objects which have different param values\n\t     *\n\t     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n\t     *\n\t     * @param params: The list of Param objects to filter\n\t     * @param values1: The first set of parameter values\n\t     * @param values2: the second set of parameter values\n\t     *\n\t     * @returns any Param objects whose values were different between values1 and values2\n\t     */\n\t    Param.changed = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\n\t    };\n\t    /**\n\t     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n\t     *\n\t     * @param params The list of [[Param]] objects to check\n\t     * @param values1 The first set of param values\n\t     * @param values2 The second set of param values\n\t     *\n\t     * @returns true if the param values in values1 and values2 are equal\n\t     */\n\t    Param.equals = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return Param.changed(params, values1, values2).length === 0;\n\t    };\n\t    /** Returns true if a the parameter values are valid, according to the Param definitions */\n\t    Param.validates = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\n\t    };\n\t    return Param;\n\t}());\n\texports.Param = Param;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar MatcherConfig = (function () {\n\t    function MatcherConfig() {\n\t        this._isCaseInsensitive = false;\n\t        this._isStrictMode = true;\n\t        this._defaultSquashPolicy = false;\n\t    }\n\t    MatcherConfig.prototype.caseInsensitive = function (value) {\n\t        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\n\t    };\n\t    MatcherConfig.prototype.strictMode = function (value) {\n\t        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\n\t    };\n\t    MatcherConfig.prototype.defaultSquashPolicy = function (value) {\n\t        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\n\t            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n\t        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\n\t    };\n\t    return MatcherConfig;\n\t}());\n\texports.MatcherConfig = MatcherConfig;\n\t// TODO: Do not export global instance; create one in UIRouter() constructor\n\texports.matcherConfig = new MatcherConfig();\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\t/**\n\t * Wraps up a `Type` object to handle array values.\n\t */\n\tfunction ArrayType(type, mode) {\n\t    var _this = this;\n\t    // Wrap non-array value as array\n\t    function arrayWrap(val) { return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []); }\n\t    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n\t    function arrayUnwrap(val) {\n\t        switch (val.length) {\n\t            case 0: return undefined;\n\t            case 1: return mode === \"auto\" ? val[0] : val;\n\t            default: return val;\n\t        }\n\t    }\n\t    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n\t    function arrayHandler(callback, allTruthyMode) {\n\t        return function handleArray(val) {\n\t            if (predicates_1.isArray(val) && val.length === 0)\n\t                return val;\n\t            var arr = arrayWrap(val);\n\t            var result = common_1.map(arr, callback);\n\t            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\n\t        };\n\t    }\n\t    // Wraps type (.equals) functions to operate on each value of an array\n\t    function arrayEqualsHandler(callback) {\n\t        return function handleArray(val1, val2) {\n\t            var left = arrayWrap(val1), right = arrayWrap(val2);\n\t            if (left.length !== right.length)\n\t                return false;\n\t            for (var i = 0; i < left.length; i++) {\n\t                if (!callback(left[i], right[i]))\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t    }\n\t    ['encode', 'decode', 'equals', '$normalize'].map(function (name) {\n\t        _this[name] = (name === 'equals' ? arrayEqualsHandler : arrayHandler)(type[name].bind(type));\n\t    });\n\t    common_1.extend(this, {\n\t        name: type.name,\n\t        pattern: type.pattern,\n\t        is: arrayHandler(type.is.bind(type), true),\n\t        $arrayMode: mode\n\t    });\n\t}\n\t/**\n\t * Implements an interface to define custom parameter types that can be decoded from and encoded to\n\t * string parameters matched in a URL. Used by [[UrlMatcher]]\n\t * objects when matching or formatting URLs, or comparing or validating parameter values.\n\t *\n\t * See [[UrlMatcherFactory.type]] for more information on registering custom types.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * {\n\t *   decode: function(val) { return parseInt(val, 10); },\n\t *   encode: function(val) { return val && val.toString(); },\n\t *   equals: function(a, b) { return this.is(a) && a === b; },\n\t *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n\t *   pattern: /\\d+/\n\t * }\n\t * ```\n\t */\n\tvar Type = (function () {\n\t    /**\n\t     * @param def  A configuration object which contains the custom type definition.  The object's\n\t     *        properties will override the default methods and/or pattern in `Type`'s public interface.\n\t     * @returns a new Type object\n\t     */\n\t    function Type(def) {\n\t        this.pattern = /.*/;\n\t        common_1.extend(this, def);\n\t    }\n\t    // consider these four methods to be \"abstract methods\" that should be overridden\n\t    /** @inheritdoc */\n\t    Type.prototype.is = function (val, key) { return true; };\n\t    /** @inheritdoc */\n\t    Type.prototype.encode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    Type.prototype.decode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    Type.prototype.equals = function (a, b) { return a == b; };\n\t    Type.prototype.$subPattern = function () {\n\t        var sub = this.pattern.toString();\n\t        return sub.substr(1, sub.length - 2);\n\t    };\n\t    Type.prototype.toString = function () {\n\t        return \"{Type:\" + this.name + \"}\";\n\t    };\n\t    /** Given an encoded string, or a decoded object, returns a decoded object */\n\t    Type.prototype.$normalize = function (val) {\n\t        return this.is(val) ? val : this.decode(val);\n\t    };\n\t    /**\n\t     * Wraps an existing custom Type as an array of Type, depending on 'mode'.\n\t     * e.g.:\n\t     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n\t     * - url: \"/path?queryParam=1&queryParam=2\n\t     * - $stateParams.queryParam will be [1, 2]\n\t     * if `mode` is \"auto\", then\n\t     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n\t     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n\t     */\n\t    Type.prototype.$asArray = function (mode, isSearch) {\n\t        if (!mode)\n\t            return this;\n\t        if (mode === \"auto\" && !isSearch)\n\t            throw new Error(\"'auto' array mode is for query parameters only\");\n\t        return new ArrayType(this, mode);\n\t    };\n\t    return Type;\n\t}());\n\texports.Type = Type;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar type_1 = __webpack_require__(23);\n\t// Use tildes to pre-encode slashes.\n\t// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n\t// and bidirectional encoding/decoding fails.\n\t// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n\tfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\n\tfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\tvar ParamTypes = (function () {\n\t    function ParamTypes() {\n\t        this.enqueue = true;\n\t        this.typeQueue = [];\n\t        this.defaultTypes = {\n\t            \"hash\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /.*/,\n\t                equals: hof_1.val(true)\n\t            },\n\t            \"string\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /[^/]*/\n\t            },\n\t            \"int\": {\n\t                encode: valToString,\n\t                decode: function (val) { return parseInt(val, 10); },\n\t                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },\n\t                pattern: /-?\\d+/\n\t            },\n\t            \"bool\": {\n\t                encode: function (val) { return val && 1 || 0; },\n\t                decode: function (val) { return parseInt(val, 10) !== 0; },\n\t                is: hof_1.is(Boolean),\n\t                pattern: /0|1/\n\t            },\n\t            \"date\": {\n\t                encode: function (val) {\n\t                    return !this.is(val) ? undefined : [\n\t                        val.getFullYear(),\n\t                        ('0' + (val.getMonth() + 1)).slice(-2),\n\t                        ('0' + val.getDate()).slice(-2)\n\t                    ].join(\"-\");\n\t                },\n\t                decode: function (val) {\n\t                    if (this.is(val))\n\t                        return val;\n\t                    var match = this.capture.exec(val);\n\t                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n\t                },\n\t                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\n\t                equals: function (l, r) {\n\t                    return ['getFullYear', 'getMonth', 'getDate']\n\t                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\n\t                },\n\t                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n\t                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n\t            },\n\t            \"json\": {\n\t                encode: common_1.toJson,\n\t                decode: common_1.fromJson,\n\t                is: hof_1.is(Object),\n\t                equals: common_1.equals,\n\t                pattern: /[^/]*/\n\t            },\n\t            \"any\": {\n\t                encode: common_1.identity,\n\t                decode: common_1.identity,\n\t                equals: common_1.equals,\n\t                pattern: /.*/\n\t            }\n\t        };\n\t        // Register default types. Store them in the prototype of this.types.\n\t        var makeType = function (definition, name) { return new type_1.Type(common_1.extend({ name: name }, definition)); };\n\t        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\n\t    }\n\t    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n\t        if (!predicates_1.isDefined(definition))\n\t            return this.types[name];\n\t        if (this.types.hasOwnProperty(name))\n\t            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\t        this.types[name] = new type_1.Type(common_1.extend({ name: name }, definition));\n\t        if (definitionFn) {\n\t            this.typeQueue.push({ name: name, def: definitionFn });\n\t            if (!this.enqueue)\n\t                this._flushTypeQueue();\n\t        }\n\t        return this;\n\t    };\n\t    ParamTypes.prototype._flushTypeQueue = function () {\n\t        while (this.typeQueue.length) {\n\t            var type = this.typeQueue.shift();\n\t            if (type.pattern)\n\t                throw new Error(\"You cannot override a type's .pattern at runtime.\");\n\t            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\n\t        }\n\t    };\n\t    return ParamTypes;\n\t}());\n\texports.ParamTypes = ParamTypes;\n\texports.paramTypes = new ParamTypes();\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar StateParams = (function () {\n\t    function StateParams(params) {\n\t        if (params === void 0) { params = {}; }\n\t        common_1.extend(this, params);\n\t    }\n\t    /**\n\t     * Merges a set of parameters with all parameters inherited between the common parents of the\n\t     * current state and a given destination state.\n\t     *\n\t     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n\t     * @param {Object} $current Internal definition of object representing the current state.\n\t     * @param {Object} $to Internal definition of object representing state to transition to.\n\t     */\n\t    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n\t        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\t        for (var i in parents) {\n\t            if (!parents[i] || !parents[i].params)\n\t                continue;\n\t            parentParams = Object.keys(parents[i].params);\n\t            if (!parentParams.length)\n\t                continue;\n\t            for (var j in parentParams) {\n\t                if (inheritList.indexOf(parentParams[j]) >= 0)\n\t                    continue;\n\t                inheritList.push(parentParams[j]);\n\t                inherited[parentParams[j]] = this[parentParams[j]];\n\t            }\n\t        }\n\t        return common_1.extend({}, inherited, newParams);\n\t    };\n\t    ;\n\t    return StateParams;\n\t}());\n\texports.StateParams = StateParams;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar hof_1 = __webpack_require__(5);\n\tvar param_1 = __webpack_require__(21);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar targetState_1 = __webpack_require__(27);\n\tvar viewHooks_1 = __webpack_require__(28);\n\tvar enterExitHooks_1 = __webpack_require__(29);\n\tvar resolveHooks_1 = __webpack_require__(30);\n\tvar coreservices_1 = __webpack_require__(6);\n\t/**\n\t * This class:\n\t *\n\t * * Takes a blank transition object and adds all the hooks necessary for it to behave like a state transition.\n\t *\n\t * * Runs the transition, returning a chained promise which:\n\t *   * transforms the resolved Transition.promise to the final destination state.\n\t *   * manages the rejected Transition.promise, checking for Dynamic or Redirected transitions\n\t *\n\t * * Registers a handler to update global $state data such as \"active transitions\" and \"current state/params\"\n\t *\n\t * * Registers view hooks, which maintain the list of active view configs and sync with/update the ui-views\n\t *\n\t * * Registers onEnter/onRetain/onExit hooks which delegate to the state's hooks of the same name, at the appropriate time\n\t *\n\t * * Registers eager and lazy resolve hooks\n\t */\n\tvar TransitionManager = (function () {\n\t    function TransitionManager(transition, $transitions, $urlRouter, $view, // service\n\t        $state, globals) {\n\t        this.transition = transition;\n\t        this.$transitions = $transitions;\n\t        this.$urlRouter = $urlRouter;\n\t        this.$view = $view;\n\t        this.$state = $state;\n\t        this.globals = globals;\n\t        this.$q = coreservices_1.services.$q;\n\t        this.viewHooks = new viewHooks_1.ViewHooks(transition, $view);\n\t        this.enterExitHooks = new enterExitHooks_1.EnterExitHooks(transition);\n\t        this.resolveHooks = new resolveHooks_1.ResolveHooks(transition);\n\t        this.treeChanges = transition.treeChanges();\n\t        this.registerUpdateGlobalState();\n\t        this.viewHooks.registerHooks();\n\t        this.enterExitHooks.registerHooks();\n\t        this.resolveHooks.registerHooks();\n\t    }\n\t    TransitionManager.prototype.runTransition = function () {\n\t        var _this = this;\n\t        this.globals.transitionHistory.enqueue(this.transition);\n\t        return this.transition.run()\n\t            .then(function (trans) { return trans.to(); }) // resolve to the final state (TODO: good? bad?)\n\t            .catch(function (error) { return _this.transRejected(error); }); // if rejected, handle dynamic and redirect\n\t    };\n\t    TransitionManager.prototype.registerUpdateGlobalState = function () {\n\t        // After globals.current is updated at priority: 10000\n\t        this.transition.onSuccess({}, this.updateUrl.bind(this), { priority: 9999 });\n\t    };\n\t    TransitionManager.prototype.transRejected = function (error) {\n\t        var _a = this, transition = _a.transition, $state = _a.$state, $q = _a.$q;\n\t        // Handle redirect and abort\n\t        if (error instanceof rejectFactory_1.TransitionRejection) {\n\t            if (error.type === rejectFactory_1.RejectType.IGNORED) {\n\t                // Update $stateParmas/$state.params/$location.url if transition ignored, but dynamic params have changed.\n\t                var dynamic = $state.$current.parameters().filter(hof_1.prop('dynamic'));\n\t                if (!param_1.Param.equals(dynamic, $state.params, transition.params())) {\n\t                    this.updateUrl();\n\t                }\n\t                return $state.current;\n\t            }\n\t            if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && error.detail instanceof targetState_1.TargetState) {\n\t                return this._redirectMgr(transition.redirect(error.detail)).runTransition();\n\t            }\n\t            if (error.type === rejectFactory_1.RejectType.ABORTED) {\n\t                this.$urlRouter.update();\n\t            }\n\t        }\n\t        this.$transitions.defaultErrorHandler()(error);\n\t        return $q.reject(error);\n\t    };\n\t    TransitionManager.prototype.updateUrl = function () {\n\t        var transition = this.transition;\n\t        var _a = this, $urlRouter = _a.$urlRouter, $state = _a.$state;\n\t        var options = transition.options();\n\t        var toState = transition.$to();\n\t        if (options.location && $state.$current.navigable) {\n\t            $urlRouter.push($state.$current.navigable.url, $state.params, { replace: options.location === 'replace' });\n\t        }\n\t        $urlRouter.update(true);\n\t    };\n\t    TransitionManager.prototype._redirectMgr = function (redirect) {\n\t        var _a = this, $transitions = _a.$transitions, $urlRouter = _a.$urlRouter, $view = _a.$view, $state = _a.$state, globals = _a.globals;\n\t        return new TransitionManager(redirect, $transitions, $urlRouter, $view, $state, globals);\n\t    };\n\t    return TransitionManager;\n\t}());\n\texports.TransitionManager = TransitionManager;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:TargetState\n\t *\n\t * @description\n\t * Encapsulate the desired target of a transition.\n\t * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n\t *\n\t * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n\t *            used to define the state.\n\t * @param {IState} _definition The `State` object definition.\n\t * @param {ParamsOrArray} _params Parameters for the target state\n\t * @param {TransitionOptions} _options Transition options.\n\t */\n\tvar TargetState = (function () {\n\t    function TargetState(_identifier, _definition, _params, _options) {\n\t        if (_params === void 0) { _params = {}; }\n\t        if (_options === void 0) { _options = {}; }\n\t        this._identifier = _identifier;\n\t        this._definition = _definition;\n\t        this._options = _options;\n\t        this._params = _params || {};\n\t    }\n\t    TargetState.prototype.name = function () {\n\t        return this._definition && this._definition.name || this._identifier;\n\t    };\n\t    TargetState.prototype.identifier = function () {\n\t        return this._identifier;\n\t    };\n\t    TargetState.prototype.params = function () {\n\t        return this._params;\n\t    };\n\t    TargetState.prototype.$state = function () {\n\t        return this._definition;\n\t    };\n\t    TargetState.prototype.state = function () {\n\t        return this._definition && this._definition.self;\n\t    };\n\t    TargetState.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    TargetState.prototype.exists = function () {\n\t        return !!(this._definition && this._definition.self);\n\t    };\n\t    TargetState.prototype.valid = function () {\n\t        return !this.error();\n\t    };\n\t    TargetState.prototype.error = function () {\n\t        var base = this.options().relative;\n\t        if (!this._definition && !!base) {\n\t            var stateName = base.name ? base.name : base;\n\t            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n\t        }\n\t        if (!this._definition)\n\t            return \"No such state '\" + this.name() + \"'\";\n\t        if (!this._definition.self)\n\t            return \"State '\" + this.name() + \"' has an invalid definition\";\n\t    };\n\t    return TargetState;\n\t}());\n\texports.TargetState = TargetState;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar ViewHooks = (function () {\n\t    function ViewHooks(transition, $view) {\n\t        this.transition = transition;\n\t        this.$view = $view;\n\t        this.treeChanges = transition.treeChanges();\n\t        this.enteringViews = transition.views(\"entering\");\n\t        this.exitingViews = transition.views(\"exiting\");\n\t    }\n\t    ViewHooks.prototype.loadAllEnteringViews = function () {\n\t        return coreservices_1.services.$q.all(this.enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);\n\t    };\n\t    ViewHooks.prototype.updateViews = function () {\n\t        var $view = this.$view;\n\t        this.exitingViews.forEach(function (viewConfig) { return $view.deactivateViewConfig(viewConfig); });\n\t        this.enteringViews.forEach(function (viewConfig) { return $view.activateViewConfig(viewConfig); });\n\t        $view.sync();\n\t    };\n\t    ViewHooks.prototype.registerHooks = function () {\n\t        if (this.enteringViews.length) {\n\t            this.transition.onStart({}, this.loadAllEnteringViews.bind(this));\n\t        }\n\t        if (this.exitingViews.length || this.enteringViews.length)\n\t            this.transition.onSuccess({}, this.updateViews.bind(this));\n\t    };\n\t    return ViewHooks;\n\t}());\n\texports.ViewHooks = ViewHooks;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar EnterExitHooks = (function () {\n\t    function EnterExitHooks(transition) {\n\t        this.transition = transition;\n\t    }\n\t    EnterExitHooks.prototype.registerHooks = function () {\n\t        this.registerOnEnterHooks();\n\t        this.registerOnRetainHooks();\n\t        this.registerOnExitHooks();\n\t    };\n\t    EnterExitHooks.prototype.registerOnEnterHooks = function () {\n\t        var _this = this;\n\t        this.transition.entering().filter(function (state) { return !!state.onEnter; })\n\t            .forEach(function (state) { return _this.transition.onEnter({ entering: state.name }, state.onEnter); });\n\t    };\n\t    EnterExitHooks.prototype.registerOnRetainHooks = function () {\n\t        var _this = this;\n\t        this.transition.retained().filter(function (state) { return !!state.onRetain; })\n\t            .forEach(function (state) { return _this.transition.onRetain({ retained: state.name }, state.onRetain); });\n\t    };\n\t    EnterExitHooks.prototype.registerOnExitHooks = function () {\n\t        var _this = this;\n\t        this.transition.exiting().filter(function (state) { return !!state.onExit; })\n\t            .forEach(function (state) { return _this.transition.onExit({ exiting: state.name }, state.onExit); });\n\t    };\n\t    return EnterExitHooks;\n\t}());\n\texports.EnterExitHooks = EnterExitHooks;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar interface_1 = __webpack_require__(31);\n\tvar hof_2 = __webpack_require__(5);\n\tvar resolvable_1 = __webpack_require__(32);\n\tvar LAZY = interface_1.ResolvePolicy[interface_1.ResolvePolicy.LAZY];\n\tvar EAGER = interface_1.ResolvePolicy[interface_1.ResolvePolicy.EAGER];\n\t/**\n\t * Registers Eager and Lazy (for entering states) resolve hooks\n\t *\n\t * * registers a hook that resolves EAGER resolves, for the To Path, onStart of the transition\n\t * * registers a hook that resolves LAZY resolves, for each state, before it is entered\n\t */\n\tvar ResolveHooks = (function () {\n\t    function ResolveHooks(transition) {\n\t        this.transition = transition;\n\t    }\n\t    ResolveHooks.prototype.registerHooks = function () {\n\t        var treeChanges = this.transition.treeChanges();\n\t        /** a function which resolves any EAGER Resolvables for a Path */\n\t        $eagerResolvePath.$inject = ['$transition$'];\n\t        function $eagerResolvePath($transition$) {\n\t            return common_1.tail(treeChanges.to).resolveContext.resolvePath(common_1.extend({ transition: $transition$ }, { resolvePolicy: EAGER }));\n\t        }\n\t        /** Returns a function which pre-resolves any LAZY Resolvables for a Node in a Path */\n\t        $lazyResolveEnteringState.$inject = ['$state$', '$transition$'];\n\t        function $lazyResolveEnteringState($state$, $transition$) {\n\t            var node = common_1.find(treeChanges.entering, hof_1.propEq('state', $state$));\n\t            // A new Resolvable contains all the resolved data in this context as a single object, for injection as `$resolve$`\n\t            var context = node.resolveContext;\n\t            var $resolve$ = new resolvable_1.Resolvable(\"$resolve$\", function () { return common_1.map(context.getResolvables(), function (r) { return r.data; }); });\n\t            var options = common_1.extend({ transition: $transition$ }, { resolvePolicy: LAZY });\n\t            // Resolve all the LAZY resolves, then resolve the `$resolve$` object, then add `$resolve$` to the context\n\t            return context.resolvePathElement(node.state, options)\n\t                .then(function () { return $resolve$.resolveResolvable(context); })\n\t                .then(function () { return context.addResolvables({ $resolve$: $resolve$ }, node.state); });\n\t        }\n\t        // Resolve eager resolvables before when the transition starts\n\t        this.transition.onStart({}, $eagerResolvePath, { priority: 1000 });\n\t        // Resolve lazy resolvables before each state is entered\n\t        this.transition.onEnter({ entering: hof_2.val(true) }, $lazyResolveEnteringState, { priority: 1000 });\n\t    };\n\t    return ResolveHooks;\n\t}());\n\texports.ResolveHooks = ResolveHooks;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Defines the available policies and their ordinals.\n\t(function (ResolvePolicy) {\n\t    ResolvePolicy[ResolvePolicy[\"JIT\"] = 0] = \"JIT\";\n\t    ResolvePolicy[ResolvePolicy[\"LAZY\"] = 1] = \"LAZY\";\n\t    ResolvePolicy[ResolvePolicy[\"EAGER\"] = 2] = \"EAGER\"; // Eager resolves are resolved before the transition starts.\n\t})(exports.ResolvePolicy || (exports.ResolvePolicy = {}));\n\tvar ResolvePolicy = exports.ResolvePolicy;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar trace_1 = __webpack_require__(12);\n\t/**\n\t * The basic building block for the resolve system.\n\t *\n\t * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n\t * and the unwrapped-when-complete (.data) result of the resolveFn.\n\t *\n\t * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n\t * resolveFn) and returns the resulting promise.\n\t *\n\t * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n\t * parameter to those fns.\n\t */\n\tvar Resolvable = (function () {\n\t    function Resolvable(name, resolveFn, preResolvedData) {\n\t        this.promise = undefined;\n\t        common_1.extend(this, {\n\t            name: name,\n\t            resolveFn: resolveFn,\n\t            deps: coreservices_1.services.$injector.annotate(resolveFn, coreservices_1.services.$injector.strictDi),\n\t            data: preResolvedData\n\t        });\n\t    }\n\t    // synchronous part:\n\t    // - sets up the Resolvable's promise\n\t    // - retrieves dependencies' promises\n\t    // - returns promise for async part\n\t    // asynchronous part:\n\t    // - wait for dependencies promises to resolve\n\t    // - invoke the resolveFn\n\t    // - wait for resolveFn promise to resolve\n\t    // - store unwrapped data\n\t    // - resolve the Resolvable's promise\n\t    Resolvable.prototype.resolveResolvable = function (resolveContext, options) {\n\t        var _this = this;\n\t        if (options === void 0) { options = {}; }\n\t        var _a = this, name = _a.name, deps = _a.deps, resolveFn = _a.resolveFn;\n\t        trace_1.trace.traceResolveResolvable(this, options);\n\t        // First, set up an overall deferred/promise for this Resolvable\n\t        var deferred = coreservices_1.services.$q.defer();\n\t        this.promise = deferred.promise;\n\t        // Load a map of all resolvables for this state from the context path\n\t        // Omit the current Resolvable from the result, so we don't try to inject this into this\n\t        var ancestorsByName = resolveContext.getResolvables(null, { omitOwnLocals: [name] });\n\t        // Limit the ancestors Resolvables map to only those that the current Resolvable fn's annotations depends on\n\t        var depResolvables = common_1.pick(ancestorsByName, deps);\n\t        // Get promises (or synchronously invoke resolveFn) for deps\n\t        var depPromises = common_1.map(depResolvables, function (resolvable) { return resolvable.get(resolveContext, options); });\n\t        // Return a promise chain that waits for all the deps to resolve, then invokes the resolveFn passing in the\n\t        // dependencies as locals, then unwraps the resulting promise's data.\n\t        return coreservices_1.services.$q.all(depPromises).then(function (locals) {\n\t            try {\n\t                var result = coreservices_1.services.$injector.invoke(resolveFn, null, locals);\n\t                deferred.resolve(result);\n\t            }\n\t            catch (error) {\n\t                deferred.reject(error);\n\t            }\n\t            return _this.promise;\n\t        }).then(function (data) {\n\t            _this.data = data;\n\t            trace_1.trace.traceResolvableResolved(_this, options);\n\t            return _this.promise;\n\t        });\n\t    };\n\t    Resolvable.prototype.get = function (resolveContext, options) {\n\t        return this.promise || this.resolveResolvable(resolveContext, options);\n\t    };\n\t    Resolvable.prototype.toString = function () {\n\t        return \"Resolvable(name: \" + this.name + \", requires: [\" + this.deps + \"])\";\n\t    };\n\t    /**\n\t     * Validates the result map as a \"resolve:\" style object, then transforms the resolves into Resolvables\n\t     */\n\t    Resolvable.makeResolvables = function (resolves) {\n\t        // If a hook result is an object, it should be a map of strings to functions.\n\t        var invalid = common_1.filter(resolves, hof_1.not(predicates_1.isInjectable)), keys = Object.keys(invalid);\n\t        if (keys.length)\n\t            throw new Error(\"Invalid resolve key/value: \" + keys[0] + \"/\" + invalid[keys[0]]);\n\t        return common_1.map(resolves, function (fn, name) { return new Resolvable(name, fn); });\n\t    };\n\t    return Resolvable;\n\t}());\n\texports.Resolvable = Resolvable;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:State\n\t *\n\t * @description\n\t * Definition object for states. Includes methods for manipulating the state heirarchy.\n\t *\n\t * @param {Object} config  A configuration object hash that includes the results of user-supplied\n\t *        values, as well as values from `StateBuilder`.\n\t *\n\t * @returns {Object}  Returns a new `State` object.\n\t */\n\tvar State = (function () {\n\t    function State(config) {\n\t        common_1.extend(this, config);\n\t        // Object.freeze(this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#is\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Compares the identity of the state against the passed value, which is either an object\n\t     * reference to the actual `State` instance, the original definition object passed to\n\t     * `$stateProvider.state()`, or the fully-qualified name.\n\t     *\n\t     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n\t     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n\t     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n\t     */\n\t    State.prototype.is = function (ref) {\n\t        return this === ref || this.self === ref || this.fqn() === ref;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#fqn\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the fully-qualified name of the state, based on its current position in the tree.\n\t     *\n\t     * @returns {string} Returns a dot-separated name of the state.\n\t     */\n\t    State.prototype.fqn = function () {\n\t        if (!this.parent || !(this.parent instanceof this.constructor))\n\t            return this.name;\n\t        var name = this.parent.fqn();\n\t        return name ? name + \".\" + this.name : this.name;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#root\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the root node of this state's tree.\n\t     *\n\t     * @returns {State} The root of this state's tree.\n\t     */\n\t    State.prototype.root = function () {\n\t        return this.parent && this.parent.root() || this;\n\t    };\n\t    State.prototype.parameters = function (opts) {\n\t        opts = common_1.defaults(opts, { inherit: true });\n\t        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n\t        return inherited.concat(common_1.values(this.params));\n\t    };\n\t    State.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        return (this.url && this.url.parameter(id, opts) ||\n\t            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\n\t            opts.inherit && this.parent && this.parent.parameter(id));\n\t    };\n\t    State.prototype.toString = function () {\n\t        return this.fqn();\n\t    };\n\t    return State;\n\t}());\n\texports.State = State;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar StateMatcher = (function () {\n\t    function StateMatcher(_states) {\n\t        this._states = _states;\n\t    }\n\t    StateMatcher.prototype.isRelative = function (stateName) {\n\t        stateName = stateName || \"\";\n\t        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n\t    };\n\t    StateMatcher.prototype.find = function (stateOrName, base) {\n\t        if (!stateOrName && stateOrName !== \"\")\n\t            return undefined;\n\t        var isStr = predicates_1.isString(stateOrName);\n\t        var name = isStr ? stateOrName : stateOrName.name;\n\t        if (this.isRelative(name))\n\t            name = this.resolvePath(name, base);\n\t        var state = this._states[name];\n\t        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n\t            return state;\n\t        }\n\t        return undefined;\n\t    };\n\t    StateMatcher.prototype.resolvePath = function (name, base) {\n\t        if (!base)\n\t            throw new Error(\"No reference point given for path '\" + name + \"'\");\n\t        var baseState = this.find(base);\n\t        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\t        for (; i < pathLength; i++) {\n\t            if (splitName[i] === \"\" && i === 0) {\n\t                current = baseState;\n\t                continue;\n\t            }\n\t            if (splitName[i] === \"^\") {\n\t                if (!current.parent)\n\t                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\n\t                current = current.parent;\n\t                continue;\n\t            }\n\t            break;\n\t        }\n\t        var relName = splitName.slice(i).join(\".\");\n\t        return current.name + (current.name && relName ? \".\" : \"\") + relName;\n\t    };\n\t    return StateMatcher;\n\t}());\n\texports.StateMatcher = StateMatcher;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar module_1 = __webpack_require__(17);\n\tvar StateQueueManager = (function () {\n\t    function StateQueueManager(states, builder, $urlRouterProvider) {\n\t        this.states = states;\n\t        this.builder = builder;\n\t        this.$urlRouterProvider = $urlRouterProvider;\n\t        this.queue = [];\n\t    }\n\t    StateQueueManager.prototype.register = function (config) {\n\t        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;\n\t        // Wrap a new object around the state so we can store our private details easily.\n\t        // @TODO: state = new State(extend({}, config, { ... }))\n\t        var state = common_1.inherit(new module_1.State(), common_1.extend({}, config, {\n\t            self: config,\n\t            resolve: config.resolve || {},\n\t            toString: function () { return config.name; }\n\t        }));\n\t        if (!predicates_1.isString(state.name))\n\t            throw new Error(\"State must have a valid name\");\n\t        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)\n\t            throw new Error(\"State '\" + state.name + \"' is already defined\");\n\t        queue.push(state);\n\t        if (this.$state) {\n\t            this.flush($state);\n\t        }\n\t        return state;\n\t    };\n\t    StateQueueManager.prototype.flush = function ($state) {\n\t        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\n\t        var result, state, orphans = [], orphanIdx, previousQueueLength = {};\n\t        while (queue.length > 0) {\n\t            state = queue.shift();\n\t            result = builder.build(state);\n\t            orphanIdx = orphans.indexOf(state);\n\t            if (result) {\n\t                if (states.hasOwnProperty(state.name))\n\t                    throw new Error(\"State '\" + name + \"' is already defined\");\n\t                states[state.name] = state;\n\t                this.attachRoute($state, state);\n\t                if (orphanIdx >= 0)\n\t                    orphans.splice(orphanIdx, 1);\n\t                continue;\n\t            }\n\t            var prev = previousQueueLength[state.name];\n\t            previousQueueLength[state.name] = queue.length;\n\t            if (orphanIdx >= 0 && prev === queue.length) {\n\t                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n\t                throw new Error(\"Cannot register orphaned state '\" + state.name + \"'\");\n\t            }\n\t            else if (orphanIdx < 0) {\n\t                orphans.push(state);\n\t            }\n\t            queue.push(state);\n\t        }\n\t        return states;\n\t    };\n\t    StateQueueManager.prototype.autoFlush = function ($state) {\n\t        this.$state = $state;\n\t        this.flush($state);\n\t    };\n\t    StateQueueManager.prototype.attachRoute = function ($state, state) {\n\t        var $urlRouterProvider = this.$urlRouterProvider;\n\t        if (state[common_1.abstractKey] || !state.url)\n\t            return;\n\t        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n\t                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {\n\t                    $state.transitionTo(state, $match, { inherit: true });\n\t                }\n\t            }]);\n\t    };\n\t    return StateQueueManager;\n\t}());\n\texports.StateQueueManager = StateQueueManager;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar stateMatcher_1 = __webpack_require__(34);\n\tvar stateBuilder_1 = __webpack_require__(19);\n\tvar stateQueueManager_1 = __webpack_require__(35);\n\tvar StateRegistry = (function () {\n\t    function StateRegistry(urlMatcherFactory, urlRouterProvider) {\n\t        this.states = {};\n\t        this.matcher = new stateMatcher_1.StateMatcher(this.states);\n\t        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);\n\t        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider);\n\t        var rootStateDef = {\n\t            name: '',\n\t            url: '^',\n\t            views: null,\n\t            params: {\n\t                '#': { value: null, type: 'hash' }\n\t            },\n\t            abstract: true\n\t        };\n\t        var _root = this._root = this.stateQueue.register(rootStateDef);\n\t        _root.navigable = null;\n\t    }\n\t    StateRegistry.prototype.root = function () {\n\t        return this._root;\n\t    };\n\t    StateRegistry.prototype.register = function (stateDefinition) {\n\t        return this.stateQueue.register(stateDefinition);\n\t    };\n\t    StateRegistry.prototype.get = function (stateOrName, base) {\n\t        var _this = this;\n\t        if (arguments.length === 0)\n\t            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\n\t        var found = this.matcher.find(stateOrName, base);\n\t        return found && found.self || null;\n\t    };\n\t    StateRegistry.prototype.decorator = function (name, func) {\n\t        return this.builder.builder(name, func);\n\t    };\n\t    return StateRegistry;\n\t}());\n\texports.StateRegistry = StateRegistry;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar queue_1 = __webpack_require__(8);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar pathFactory_1 = __webpack_require__(38);\n\tvar node_1 = __webpack_require__(39);\n\tvar transitionService_1 = __webpack_require__(43);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar targetState_1 = __webpack_require__(27);\n\tvar transitionManager_1 = __webpack_require__(26);\n\tvar param_1 = __webpack_require__(21);\n\tvar glob_1 = __webpack_require__(7);\n\tvar common_2 = __webpack_require__(3);\n\tvar common_3 = __webpack_require__(3);\n\tvar StateService = (function () {\n\t    function StateService($view, $urlRouter, $transitions, stateRegistry, stateProvider, globals) {\n\t        this.$view = $view;\n\t        this.$urlRouter = $urlRouter;\n\t        this.$transitions = $transitions;\n\t        this.stateRegistry = stateRegistry;\n\t        this.stateProvider = stateProvider;\n\t        this.globals = globals;\n\t        this.rejectFactory = new rejectFactory_1.RejectFactory();\n\t        var getters = ['current', '$current', 'params', 'transition'];\n\t        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });\n\t        common_3.bindFunctions(StateService.prototype, this, this, boundFns);\n\t    }\n\t    Object.defineProperty(StateService.prototype, \"transition\", {\n\t        get: function () { return this.globals.transition; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"params\", {\n\t        get: function () { return this.globals.params; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"current\", {\n\t        get: function () { return this.globals.current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"$current\", {\n\t        get: function () { return this.globals.$current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Invokes the onInvalid callbacks, in natural order.  Each callback's return value is checked in sequence\n\t     * until one of them returns an instance of TargetState.   The results of the callbacks are wrapped\n\t     * in $q.when(), so the callbacks may return promises.\n\t     *\n\t     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and\n\t     * the result returned.\n\t     */\n\t    StateService.prototype._handleInvalidTargetState = function (fromPath, $to$) {\n\t        var _this = this;\n\t        var latestThing = function () { return _this.globals.transitionHistory.peekTail(); };\n\t        var latest = latestThing();\n\t        var $from$ = pathFactory_1.PathFactory.makeTargetState(fromPath);\n\t        var callbackQueue = new queue_1.Queue([].concat(this.stateProvider.invalidCallbacks));\n\t        var rejectFactory = this.rejectFactory;\n\t        var $q = coreservices_1.services.$q, $injector = coreservices_1.services.$injector;\n\t        var invokeCallback = function (callback) { return $q.when($injector.invoke(callback, null, { $to$: $to$, $from$: $from$ })); };\n\t        var checkForRedirect = function (result) {\n\t            if (!(result instanceof targetState_1.TargetState)) {\n\t                return;\n\t            }\n\t            var target = result;\n\t            // Recreate the TargetState, in case the state is now defined.\n\t            target = _this.target(target.identifier(), target.params(), target.options());\n\t            if (!target.valid())\n\t                return rejectFactory.invalid(target.error());\n\t            if (latestThing() !== latest)\n\t                return rejectFactory.superseded();\n\t            return _this.transitionTo(target.identifier(), target.params(), target.options());\n\t        };\n\t        function invokeNextCallback() {\n\t            var nextCallback = callbackQueue.dequeue();\n\t            if (nextCallback === undefined)\n\t                return rejectFactory.invalid($to$.error());\n\t            return invokeCallback(nextCallback).then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\n\t        }\n\t        return invokeNextCallback();\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#reload\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n\t     * controllers reinstantiated, and events re-fired.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     $state.reload();\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * `reload()` is just an alias for:\n\t     * <pre>\n\t     * $state.transitionTo($state.current, $stateParams, {\n\t     *   reload: true, inherit: false, notify: true\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n\t     * @example\n\t     * <pre>\n\t     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n\t     * //and current state is 'contacts.detail.item'\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n\t     *     $state.reload('contact.detail');\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.reload = function (reloadState) {\n\t        return this.transitionTo(this.current, this.params, {\n\t            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\n\t            inherit: false,\n\t            notify: false\n\t        });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#go\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Convenience method for transitioning to a new state. `$state.go` calls\n\t     * `$state.transitionTo` internally but automatically sets options to\n\t     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n\t     * This allows you to easily use an absolute or relative to path and specify\n\t     * only the parameters you'd like to update (while letting unspecified parameters\n\t     * inherit from the currently active ancestor states).\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.go('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n\t     *\n\t     * @param {string} to Absolute state name or relative state path. Some examples:\n\t     *\n\t     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n\t     * - `$state.go('^')` - will go to a parent state\n\t     * - `$state.go('^.sibling')` - will go to a sibling state\n\t     * - `$state.go('.child.grandchild')` - will go to grandchild state\n\t     *\n\t     * @param {object=} params A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n\t     * defined parameters. This allows, for example, going to a sibling state that shares parameters\n\t     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n\t     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n\t     * will get you all current parameters, etc.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition.\n\t     *\n\t     * Possible success values:\n\t     *\n\t     * - $state.current\n\t     *\n\t     * <br/>Possible rejection values:\n\t     *\n\t     * - 'transition superseded' - when a newer transition has been started after this one\n\t     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n\t     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n\t     *   when a `$stateNotFound` `event.retry` promise errors.\n\t     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n\t     * - *resolve error* - when an error has occurred with a `resolve`\n\t     *\n\t     */\n\t    StateService.prototype.go = function (to, params, options) {\n\t        var defautGoOpts = { relative: this.$current, inherit: true };\n\t        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\n\t        return this.transitionTo(to, params, transOpts);\n\t    };\n\t    ;\n\t    /** Factory method for creating a TargetState */\n\t    StateService.prototype.target = function (identifier, params, options) {\n\t        if (options === void 0) { options = {}; }\n\t        // If we're reloading, find the state object to reload from\n\t        if (predicates_1.isObject(options.reload) && !options.reload.name)\n\t            throw new Error('Invalid reload state object');\n\t        options.reloadState = options.reload === true ? this.stateRegistry.root() : this.stateRegistry.matcher.find(options.reload, options.relative);\n\t        if (options.reload && !options.reloadState)\n\t            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n\t        var stateDefinition = this.stateRegistry.matcher.find(identifier, options.relative);\n\t        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#transitionTo\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n\t     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.transitionTo('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string} to State name.\n\t     * @param {object=} toParams A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.transitionTo = function (to, toParams, options) {\n\t        var _this = this;\n\t        if (toParams === void 0) { toParams = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var transHistory = this.globals.transitionHistory;\n\t        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\n\t        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });\n\t        var ref = this.target(to, toParams, options);\n\t        var latestSuccess = this.globals.successfulTransitions.peekTail();\n\t        var rootPath = function () { return pathFactory_1.PathFactory.bindTransNodesToPath([new node_1.Node(_this.stateRegistry.root())]); };\n\t        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\t        if (!ref.exists())\n\t            return this._handleInvalidTargetState(currentPath, ref);\n\t        if (!ref.valid())\n\t            return coreservices_1.services.$q.reject(ref.error());\n\t        var transition = this.$transitions.create(currentPath, ref);\n\t        var tMgr = new transitionManager_1.TransitionManager(transition, this.$transitions, this.$urlRouter, this.$view, this, this.globals);\n\t        var transitionPromise = tMgr.runTransition();\n\t        // Return a promise for the transition, which also has the transition object on it.\n\t        return common_1.extend(transitionPromise, { transition: transition });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#is\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n\t     * but only checks for the full state name. If params is supplied then it will be\n\t     * tested for strict equality against the current active params object, so all params\n\t     * must match with none missing and no extras.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // absolute name\n\t     * $state.is('contact.details.item'); // returns true\n\t     * $state.is(contactDetailItemStateObject); // returns true\n\t     *\n\t     * // relative name (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n\t     * to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n\t     * test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it is the state.\n\t     */\n\t    StateService.prototype.is = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var state = this.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (this.$current !== state)\n\t            return false;\n\t        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#includes\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method to determine if the current active state is equal to or is the child of the\n\t     * state stateName. If any params are passed then they will be tested for a match as well.\n\t     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n\t     *\n\t     * @example\n\t     * Partial and relative names\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // Using partial names\n\t     * $state.includes(\"contacts\"); // returns true\n\t     * $state.includes(\"contacts.details\"); // returns true\n\t     * $state.includes(\"contacts.details.item\"); // returns true\n\t     * $state.includes(\"contacts.list\"); // returns false\n\t     * $state.includes(\"about\"); // returns false\n\t     *\n\t     * // Using relative names (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * Basic globbing patterns\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item.url';\n\t     *\n\t     * $state.includes(\"*.details.*.*\"); // returns true\n\t     * $state.includes(\"*.details.**\"); // returns true\n\t     * $state.includes(\"**.item.**\"); // returns true\n\t     * $state.includes(\"*.details.item.url\"); // returns true\n\t     * $state.includes(\"*.details.*.url\"); // returns true\n\t     * $state.includes(\"*.details.*\"); // returns false\n\t     * $state.includes(\"item.**\"); // returns false\n\t     * </pre>\n\t     *\n\t     * @param {string} stateOrName A partial name, relative name, or glob pattern\n\t     * to be searched for within the current state name.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n\t     * that you'd like to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n\t     * .includes will test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it does include the state\n\t     */\n\t    StateService.prototype.includes = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\n\t        if (glob) {\n\t            if (!glob.matches(this.$current.name))\n\t                return false;\n\t            stateOrName = this.$current.name;\n\t        }\n\t        var state = this.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (!predicates_1.isDefined(include[state.name]))\n\t            return false;\n\t        // @TODO Replace with Param.equals() ?\n\t        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#href\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A url generation method that returns the compiled url for the given state populated with the given params.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n\t     * @param {object=} params An object of parameter values to fill the state's required parameters.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n\t     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n\t     *    ancestor with a valid url).\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns {string} compiled state url\n\t     */\n\t    StateService.prototype.href = function (stateOrName, params, options) {\n\t        var defaultHrefOpts = {\n\t            lossy: true,\n\t            inherit: true,\n\t            absolute: false,\n\t            relative: this.$current\n\t        };\n\t        options = common_1.defaults(options, defaultHrefOpts);\n\t        var state = this.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return null;\n\t        if (options.inherit)\n\t            params = this.params.$inherit(params || {}, this.$current, state);\n\t        var nav = (state && options.lossy) ? state.navigable : state;\n\t        if (!nav || nav.url === undefined || nav.url === null) {\n\t            return null;\n\t        }\n\t        return this.$urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {\n\t            absolute: options.absolute\n\t        });\n\t    };\n\t    ;\n\t    StateService.prototype.get = function (stateOrName, base) {\n\t        if (arguments.length === 0)\n\t            return this.stateRegistry.get();\n\t        return this.stateRegistry.get(stateOrName, base || this.$current);\n\t    };\n\t    return StateService;\n\t}());\n\texports.StateService = StateService;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module path */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar module_1 = __webpack_require__(17);\n\tvar node_1 = __webpack_require__(39);\n\tvar module_2 = __webpack_require__(40);\n\t/**\n\t * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n\t */\n\tvar PathFactory = (function () {\n\t    function PathFactory() {\n\t    }\n\t    /** Given a Node[], create an TargetState */\n\t    PathFactory.makeTargetState = function (path) {\n\t        var state = common_1.tail(path).state;\n\t        return new module_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n\t    };\n\t    PathFactory.buildPath = function (targetState) {\n\t        var toParams = targetState.params();\n\t        return targetState.$state().path.map(function (state) { return new node_1.Node(state).applyRawParams(toParams); });\n\t    };\n\t    /** Given a fromPath: Node[] and a TargetState, builds a toPath: Node[] */\n\t    PathFactory.buildToPath = function (fromPath, targetState) {\n\t        var toPath = PathFactory.buildPath(targetState);\n\t        if (targetState.options().inherit) {\n\t            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n\t        }\n\t        return toPath;\n\t    };\n\t    PathFactory.applyViewConfigs = function ($view, path) {\n\t        return path.map(function (node) {\n\t            return common_1.extend(node, { views: common_1.values(node.state.views || {}).map(function (view) { return $view.createViewConfig(node, view); }) });\n\t        });\n\t    };\n\t    /**\n\t     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n\t     *\n\t     * For a parameter in a node to be inherited from the from path:\n\t     * - The toPath's node must have a matching node in the fromPath (by state).\n\t     * - The parameter name must not be found in the toKeys parameter array.\n\t     *\n\t     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n\t     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n\t     * it is not inherited from the fromPath.\n\t     */\n\t    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {\n\t        if (toKeys === void 0) { toKeys = []; }\n\t        function nodeParamVals(path, state) {\n\t            var node = common_1.find(path, hof_1.propEq('state', state));\n\t            return common_1.extend({}, node && node.paramValues);\n\t        }\n\t        /**\n\t         * Given an Node \"toNode\", return a new Node with param values inherited from the\n\t         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n\t         */\n\t        var makeInheritedParamsNode = hof_1.curry(function (_fromPath, _toKeys, toNode) {\n\t            // All param values for the node (may include default key/vals, when key was not found in toParams)\n\t            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\n\t            // limited to only those keys found in toParams\n\t            var incomingParamVals = common_1.pick(toParamVals, _toKeys);\n\t            toParamVals = common_1.omit(toParamVals, _toKeys);\n\t            var fromParamVals = nodeParamVals(_fromPath, toNode.state) || {};\n\t            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n\t            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\n\t            return new node_1.Node(toNode.state).applyRawParams(ownParamVals);\n\t        });\n\t        // The param keys specified by the incoming toParams\n\t        return toPath.map(makeInheritedParamsNode(fromPath, toKeys));\n\t    };\n\t    /**\n\t     * Given a path, upgrades the path to a Node[].  Each node is assigned a ResolveContext\n\t     * and ParamValues object which is bound to the whole path, but closes over the subpath from root to the node.\n\t     * The views are also added to the node.\n\t     */\n\t    PathFactory.bindTransNodesToPath = function (resolvePath) {\n\t        var resolveContext = new module_2.ResolveContext(resolvePath);\n\t        // let paramValues = new ParamValues(resolvePath);\n\t        // Attach bound resolveContext and paramValues to each node\n\t        // Attach views to each node\n\t        resolvePath.forEach(function (node) {\n\t            node.resolveContext = resolveContext.isolateRootTo(node.state);\n\t            node.resolveInjector = new module_2.ResolveInjector(node.resolveContext, node.state);\n\t            node.resolves['$stateParams'] = new module_2.Resolvable(\"$stateParams\", function () { return node.paramValues; }, node.paramValues);\n\t        });\n\t        return resolvePath;\n\t    };\n\t    /**\n\t     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n\t     */\n\t    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {\n\t        var keep = 0, max = Math.min(fromPath.length, toPath.length);\n\t        var staticParams = function (state) { return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id')); };\n\t        var nodesMatch = function (node1, node2) { return node1.equals(node2, staticParams(node1.state)); };\n\t        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n\t            keep++;\n\t        }\n\t        /** Given a retained node, return a new node which uses the to node's param values */\n\t        function applyToParams(retainedNode, idx) {\n\t            var cloned = node_1.Node.clone(retainedNode);\n\t            cloned.paramValues = toPath[idx].paramValues;\n\t            return cloned;\n\t        }\n\t        var from, retained, exiting, entering, to;\n\t        // intermediate vars\n\t        var retainedWithToParams, enteringResolvePath, toResolvePath;\n\t        from = fromPath;\n\t        retained = from.slice(0, keep);\n\t        exiting = from.slice(keep);\n\t        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n\t        retainedWithToParams = retained.map(applyToParams);\n\t        enteringResolvePath = toPath.slice(keep);\n\t        // \"toResolvePath\" is \"retainedWithToParams\" concat \"enteringResolvePath\".\n\t        toResolvePath = (retainedWithToParams).concat(enteringResolvePath);\n\t        // \"to: is \"toResolvePath\" with ParamValues/ResolveContext added to each node and bound to the path context\n\t        to = PathFactory.bindTransNodesToPath(toResolvePath);\n\t        // \"entering\" is the tail of \"to\"\n\t        entering = to.slice(keep);\n\t        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\n\t    };\n\t    PathFactory.bindTransitionResolve = function (treeChanges, transition) {\n\t        var rootNode = treeChanges.to[0];\n\t        rootNode.resolves['$transition$'] = new module_2.Resolvable('$transition$', function () { return transition; }, transition);\n\t    };\n\t    /**\n\t     * Find a subpath of a path that stops at the node for a given state\n\t     *\n\t     * Given an array of nodes, returns a subset of the array starting from the first node, up to the\n\t     * node whose state matches `stateName`\n\t     *\n\t     * @param path a path of [[Node]]s\n\t     * @param state the [[State]] to stop at\n\t     */\n\t    PathFactory.subPath = function (path, state) {\n\t        var node = common_1.find(path, function (_node) { return _node.state === state; });\n\t        var elementIdx = path.indexOf(node);\n\t        if (elementIdx === -1)\n\t            throw new Error(\"The path does not contain the state: \" + state);\n\t        return path.slice(0, elementIdx + 1);\n\t    };\n\t    /** Gets the raw parameter values from a path */\n\t    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };\n\t    return PathFactory;\n\t}());\n\texports.PathFactory = PathFactory;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module path */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar module_1 = __webpack_require__(40);\n\tvar Node = (function () {\n\t    function Node(state) {\n\t        if (state instanceof Node) {\n\t            var node = state;\n\t            this.state = node.state;\n\t            this.paramSchema = node.paramSchema.slice();\n\t            this.paramValues = common_1.extend({}, node.paramValues);\n\t            this.resolves = common_1.extend({}, node.resolves);\n\t            this.views = node.views && node.views.slice();\n\t            this.resolveContext = node.resolveContext;\n\t            this.resolveInjector = node.resolveInjector;\n\t        }\n\t        else {\n\t            this.state = state;\n\t            this.paramSchema = state.parameters({ inherit: false });\n\t            this.paramValues = {};\n\t            this.resolves = common_1.mapObj(state.resolve, function (fn, name) { return new module_1.Resolvable(name, fn); });\n\t        }\n\t    }\n\t    Node.prototype.applyRawParams = function (params) {\n\t        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\n\t        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\n\t        return this;\n\t    };\n\t    Node.prototype.parameter = function (name) {\n\t        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\n\t    };\n\t    Node.prototype.equals = function (node, keys) {\n\t        var _this = this;\n\t        if (keys === void 0) { keys = this.paramSchema.map(hof_1.prop('id')); }\n\t        var paramValsEq = function (key) { return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]); };\n\t        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);\n\t    };\n\t    Node.clone = function (node) {\n\t        return new Node(node);\n\t    };\n\t    /**\n\t     * Returns a new path which is a subpath of the first path. The new path starts from root and contains any nodes\n\t     * that match the nodes in the second path. Nodes are compared using their state property.\n\t     * @param first {Node[]}\n\t     * @param second {Node[]}\n\t     * @returns {Node[]}\n\t     */\n\t    Node.matching = function (first, second) {\n\t        var matchedCount = first.reduce(function (prev, node, i) {\n\t            return prev === i && i < second.length && node.state === second[i].state ? i + 1 : prev;\n\t        }, 0);\n\t        return first.slice(0, matchedCount);\n\t    };\n\t    return Node;\n\t}());\n\texports.Node = Node;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module resolve */ /** for typedoc */\n\t__export(__webpack_require__(31));\n\t__export(__webpack_require__(32));\n\t__export(__webpack_require__(41));\n\t__export(__webpack_require__(42));\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar trace_1 = __webpack_require__(12);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar interface_1 = __webpack_require__(31);\n\tvar common_2 = __webpack_require__(3);\n\tvar pathFactory_1 = __webpack_require__(38);\n\t// TODO: make this configurable\n\tvar defaultResolvePolicy = interface_1.ResolvePolicy[interface_1.ResolvePolicy.LAZY];\n\tvar ResolveContext = (function () {\n\t    function ResolveContext(_path) {\n\t        this._path = _path;\n\t        common_1.extend(this, {\n\t            _nodeFor: function (state) {\n\t                return common_1.find(this._path, hof_1.propEq('state', state));\n\t            },\n\t            _pathTo: function (state) {\n\t                return pathFactory_1.PathFactory.subPath(this._path, state);\n\t            }\n\t        });\n\t    }\n\t    /**\n\t     * Gets the available Resolvables for the last element of this path.\n\t     *\n\t     * @param state the State (within the ResolveContext's Path) for which to get resolvables\n\t     * @param options\n\t     *\n\t     * options.omitOwnLocals: array of property names\n\t     *   Omits those Resolvables which are found on the last element of the path.\n\t     *\n\t     *   This will hide a deepest-level resolvable (by name), potentially exposing a parent resolvable of\n\t     *   the same name further up the state tree.\n\t     *\n\t     *   This is used by Resolvable.resolve() in order to provide the Resolvable access to all the other\n\t     *   Resolvables at its own PathElement level, yet disallow that Resolvable access to its own injectable Resolvable.\n\t     *\n\t     *   This is also used to allow a state to override a parent state's resolve while also injecting\n\t     *   that parent state's resolve:\n\t     *\n\t     *   state({ name: 'G', resolve: { _G: function() { return \"G\"; } } });\n\t     *   state({ name: 'G.G2', resolve: { _G: function(_G) { return _G + \"G2\"; } } });\n\t     *   where injecting _G into a controller will yield \"GG2\"\n\t     */\n\t    ResolveContext.prototype.getResolvables = function (state, options) {\n\t        options = common_1.defaults(options, { omitOwnLocals: [] });\n\t        var path = (state ? this._pathTo(state) : this._path);\n\t        var last = common_1.tail(path);\n\t        return path.reduce(function (memo, node) {\n\t            var omitProps = (node === last) ? options.omitOwnLocals : [];\n\t            var filteredResolvables = common_1.omit(node.resolves, omitProps);\n\t            return common_1.extend(memo, filteredResolvables);\n\t        }, {});\n\t    };\n\t    /** Inspects a function `fn` for its dependencies.  Returns an object containing any matching Resolvables */\n\t    ResolveContext.prototype.getResolvablesForFn = function (fn) {\n\t        var deps = coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);\n\t        return common_1.pick(this.getResolvables(), deps);\n\t    };\n\t    ResolveContext.prototype.isolateRootTo = function (state) {\n\t        return new ResolveContext(this._pathTo(state));\n\t    };\n\t    ResolveContext.prototype.addResolvables = function (resolvables, state) {\n\t        common_1.extend(this._nodeFor(state).resolves, resolvables);\n\t    };\n\t    /** Gets the resolvables declared on a particular state */\n\t    ResolveContext.prototype.getOwnResolvables = function (state) {\n\t        return common_1.extend({}, this._nodeFor(state).resolves);\n\t    };\n\t    // Returns a promise for an array of resolved path Element promises\n\t    ResolveContext.prototype.resolvePath = function (options) {\n\t        var _this = this;\n\t        if (options === void 0) { options = {}; }\n\t        trace_1.trace.traceResolvePath(this._path, options);\n\t        var promiseForNode = function (node) { return _this.resolvePathElement(node.state, options); };\n\t        return coreservices_1.services.$q.all(common_1.map(this._path, promiseForNode)).then(function (all) { return all.reduce(common_2.mergeR, {}); });\n\t    };\n\t    // returns a promise for all the resolvables on this PathElement\n\t    // options.resolvePolicy: only return promises for those Resolvables which are at \n\t    // the specified policy, or above.  i.e., options.resolvePolicy === 'lazy' will\n\t    // resolve both 'lazy' and 'eager' resolves.\n\t    ResolveContext.prototype.resolvePathElement = function (state, options) {\n\t        var _this = this;\n\t        if (options === void 0) { options = {}; }\n\t        // The caller can request the path be resolved for a given policy and \"below\" \n\t        var policy = options && options.resolvePolicy;\n\t        var policyOrdinal = interface_1.ResolvePolicy[policy || defaultResolvePolicy];\n\t        // Get path Resolvables available to this element\n\t        var resolvables = this.getOwnResolvables(state);\n\t        var matchesRequestedPolicy = function (resolvable) { return getPolicy(state.resolvePolicy, resolvable) >= policyOrdinal; };\n\t        var matchingResolves = common_1.filter(resolvables, matchesRequestedPolicy);\n\t        var getResolvePromise = function (resolvable) { return resolvable.get(_this.isolateRootTo(state), options); };\n\t        var resolvablePromises = common_1.map(matchingResolves, getResolvePromise);\n\t        trace_1.trace.traceResolvePathElement(this, matchingResolves, options);\n\t        return coreservices_1.services.$q.all(resolvablePromises);\n\t    };\n\t    /**\n\t     * Injects a function given the Resolvables available in the path, from the first node\n\t     * up to the node for the given state.\n\t     *\n\t     * First it resolves all the resolvable depencies.  When they are done resolving, it invokes\n\t     * the function.\n\t     *\n\t     * @return a promise for the return value of the function.\n\t     *\n\t     * @param fn: the function to inject (i.e., onEnter, onExit, controller)\n\t     * @param locals: are the angular $injector-style locals to inject\n\t     * @param options: options (TODO: document)\n\t     */\n\t    ResolveContext.prototype.invokeLater = function (fn, locals, options) {\n\t        var _this = this;\n\t        if (locals === void 0) { locals = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var resolvables = this.getResolvablesForFn(fn);\n\t        trace_1.trace.tracePathElementInvoke(common_1.tail(this._path), fn, Object.keys(resolvables), common_1.extend({ when: \"Later\" }, options));\n\t        var getPromise = function (resolvable) { return resolvable.get(_this, options); };\n\t        var promises = common_1.map(resolvables, getPromise);\n\t        return coreservices_1.services.$q.all(promises).then(function () {\n\t            try {\n\t                return _this.invokeNow(fn, locals, options);\n\t            }\n\t            catch (error) {\n\t                return coreservices_1.services.$q.reject(error);\n\t            }\n\t        });\n\t    };\n\t    /**\n\t     * Immediately injects a function with the dependent Resolvables available in the path, from\n\t     * the first node up to the node for the given state.\n\t     *\n\t     * If a Resolvable is not yet resolved, then null is injected in place of the resolvable.\n\t     *\n\t     * @return the return value of the function.\n\t     *\n\t     * @param fn: the function to inject (i.e., onEnter, onExit, controller)\n\t     * @param locals: are the angular $injector-style locals to inject\n\t     * @param options: options (TODO: document)\n\t     */\n\t    // Injects a function at this PathElement level with available Resolvables\n\t    // Does not wait until all Resolvables have been resolved; you must call PathElement.resolve() (or manually resolve each dep) first\n\t    ResolveContext.prototype.invokeNow = function (fn, locals, options) {\n\t        if (options === void 0) { options = {}; }\n\t        var resolvables = this.getResolvablesForFn(fn);\n\t        trace_1.trace.tracePathElementInvoke(common_1.tail(this._path), fn, Object.keys(resolvables), common_1.extend({ when: \"Now  \" }, options));\n\t        var resolvedLocals = common_1.map(resolvables, hof_1.prop(\"data\"));\n\t        return coreservices_1.services.$injector.invoke(fn, options.bind || null, common_1.extend({}, locals, resolvedLocals));\n\t    };\n\t    return ResolveContext;\n\t}());\n\texports.ResolveContext = ResolveContext;\n\t/**\n\t * Given a state's resolvePolicy attribute and a resolvable from that state, returns the policy ordinal for the Resolvable\n\t * Use the policy declared for the Resolve. If undefined, use the policy declared for the State.  If\n\t * undefined, use the system defaultResolvePolicy.\n\t *\n\t * @param stateResolvePolicyConf The raw resolvePolicy declaration on the state object; may be a String or Object\n\t * @param resolvable The resolvable to compute the policy for\n\t */\n\tfunction getPolicy(stateResolvePolicyConf, resolvable) {\n\t    // Normalize the configuration on the state to either state-level (a string) or resolve-level (a Map of string:string)\n\t    var stateLevelPolicy = (predicates_1.isString(stateResolvePolicyConf) ? stateResolvePolicyConf : null);\n\t    var resolveLevelPolicies = (predicates_1.isObject(stateResolvePolicyConf) ? stateResolvePolicyConf : {});\n\t    var policyName = resolveLevelPolicies[resolvable.name] || stateLevelPolicy || defaultResolvePolicy;\n\t    return interface_1.ResolvePolicy[policyName];\n\t}\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar ResolveInjector = (function () {\n\t    function ResolveInjector(_resolveContext, _state) {\n\t        this._resolveContext = _resolveContext;\n\t        this._state = _state;\n\t    }\n\t    /** Returns a promise to invoke an annotated function in the resolve context */\n\t    ResolveInjector.prototype.invokeLater = function (injectedFn, locals) {\n\t        return this._resolveContext.invokeLater(injectedFn, locals);\n\t    };\n\t    /** Invokes an annotated function in the resolve context */\n\t    ResolveInjector.prototype.invokeNow = function (injectedFn, locals) {\n\t        return this._resolveContext.invokeNow(null, injectedFn, locals);\n\t    };\n\t    /** Returns the a promise for locals (realized Resolvables) that a function wants */\n\t    ResolveInjector.prototype.getLocals = function (injectedFn) {\n\t        var _this = this;\n\t        var resolve = function (r) { return r.get(_this._resolveContext); };\n\t        return common_1.map(this._resolveContext.getResolvablesForFn(injectedFn), resolve);\n\t    };\n\t    return ResolveInjector;\n\t}());\n\texports.ResolveInjector = ResolveInjector;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar transition_1 = __webpack_require__(11);\n\tvar hookRegistry_1 = __webpack_require__(15);\n\t/**\n\t * The default transition options.\n\t * Include this object when applying custom defaults:\n\t * let reloadOpts = { reload: true, notify: true }\n\t * let options = defaults(theirOpts, customDefaults, defaultOptions);\n\t */\n\texports.defaultTransOpts = {\n\t    location: true,\n\t    relative: null,\n\t    inherit: false,\n\t    notify: true,\n\t    reload: false,\n\t    custom: {},\n\t    current: function () { return null; }\n\t};\n\t/**\n\t * This class provides services related to Transitions.\n\t *\n\t * Most importantly, it allows global Transition Hooks to be registered, and has a factory function\n\t * for creating new Transitions.\n\t */\n\tvar TransitionService = (function () {\n\t    function TransitionService($view) {\n\t        this.$view = $view;\n\t        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n\t            if ($error$ instanceof Error) {\n\t                console.error($error$);\n\t            }\n\t        };\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n\t    }\n\t    TransitionService.prototype.defaultErrorHandler = function (handler) {\n\t        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n\t    };\n\t    /**\n\t     * Creates a new [[Transition]] object\n\t     *\n\t     * This is a factory function for creating new Transition objects.\n\t     *\n\t     * @param fromPath\n\t     * @param targetState\n\t     * @returns {Transition}\n\t     */\n\t    TransitionService.prototype.create = function (fromPath, targetState) {\n\t        return new transition_1.Transition(fromPath, targetState, this);\n\t    };\n\t    return TransitionService;\n\t}());\n\texports.TransitionService = TransitionService;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module path */ /** for typedoc */\n\t__export(__webpack_require__(39));\n\t__export(__webpack_require__(38));\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module url */ /** for typedoc */\n\t__export(__webpack_require__(46));\n\t__export(__webpack_require__(22));\n\t__export(__webpack_require__(47));\n\t__export(__webpack_require__(48));\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar module_1 = __webpack_require__(20);\n\tvar predicates_2 = __webpack_require__(4);\n\tvar param_1 = __webpack_require__(21);\n\tvar common_2 = __webpack_require__(3);\n\tvar common_3 = __webpack_require__(3);\n\tfunction quoteRegExp(string, param) {\n\t    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n\t    if (!param)\n\t        return result;\n\t    switch (param.squash) {\n\t        case false:\n\t            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n\t            break;\n\t        case true:\n\t            result = result.replace(/\\/$/, '');\n\t            surroundPattern = ['(?:\\/(', ')|\\/)?'];\n\t            break;\n\t        default:\n\t            surroundPattern = [(\"(\" + param.squash + \"|\"), ')?'];\n\t            break;\n\t    }\n\t    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n\t}\n\tvar memoizeTo = function (obj, prop, fn) { return obj[prop] = obj[prop] || fn(); };\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.util.type:UrlMatcher\n\t *\n\t * @description\n\t * Matches URLs against patterns and extracts named parameters from the path or the search\n\t * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list\n\t * of search parameters. Multiple search parameter names are separated by '&'. Search parameters\n\t * do not influence whether or not a URL is matched, but their values are passed through into\n\t * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.\n\t *\n\t * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace\n\t * syntax, which optionally allows a regular expression for the parameter to be specified:\n\t *\n\t * * `':'` name - colon placeholder\n\t * * `'*'` name - catch-all placeholder\n\t * * `'{' name '}'` - curly placeholder\n\t * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the\n\t *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n\t *\n\t * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n\t * must be unique within the pattern (across both path and search parameters). For colon\n\t * placeholders or curly placeholders without an explicit regexp, a path parameter matches any\n\t * number of characters other than '/'. For catch-all placeholders the path parameter matches\n\t * any number of characters.\n\t *\n\t * Examples:\n\t *\n\t * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n\t *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n\t * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n\t *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n\t * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n\t * * `'/user/{id:[^/]*}'` - Same as the previous example.\n\t * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n\t *   parameter consists of 1 to 8 hex digits.\n\t * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n\t *   path into the parameter 'path'.\n\t * * `'/files/*path'` - ditto.\n\t * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n\t *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start\n\t *\n\t * @param {string} pattern  The pattern to compile into a matcher.\n\t * @param {Object} config  A configuration object hash\n\t * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n\t * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n\t *\n\t * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any\n\t *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n\t *   non-null) will start with this prefix.\n\t *\n\t * @property {string} pattern  The pattern that was passed into the constructor\n\t *\n\t * @returns {Object}  New `UrlMatcher` object\n\t */\n\tvar UrlMatcher = (function () {\n\t    function UrlMatcher(pattern, config) {\n\t        var _this = this;\n\t        this.pattern = pattern;\n\t        this.config = config;\n\t        this._cache = { path: [], pattern: null };\n\t        this._children = [];\n\t        this._params = [];\n\t        this._segments = [];\n\t        this._compiled = [];\n\t        this.config = common_1.defaults(this.config, {\n\t            params: {},\n\t            strict: true,\n\t            caseInsensitive: false,\n\t            paramMap: common_1.identity\n\t        });\n\t        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n\t        //   '*' name\n\t        //   ':' name\n\t        //   '{' name '}'\n\t        //   '{' name ':' regexp '}'\n\t        // The regular expression is somewhat complicated due to the need to allow curly braces\n\t        // inside the regular expression. The placeholder regexp breaks down as follows:\n\t        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n\t        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n\t        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n\t        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n\t        //    \\\\.                            - a backslash escape\n\t        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n\t        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\n\t        var checkParamErrors = function (id) {\n\t            if (!UrlMatcher.nameValidator.test(id))\n\t                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t            if (common_1.find(_this._params, hof_1.propEq('id', id)))\n\t                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t        };\n\t        // Split into static segments separated by path parameter placeholders.\n\t        // The number of segments is always 1 more than the number of parameters.\n\t        var matchDetails = function (m, isSearch) {\n\t            // IE[78] returns '' for unmatched groups instead of null\n\t            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\t            return {\n\t                id: id,\n\t                regexp: regexp,\n\t                cfg: _this.config.params[id],\n\t                segment: pattern.substring(last, m.index),\n\t                type: !regexp ? null : module_1.paramTypes.type(regexp || \"string\") || common_1.inherit(module_1.paramTypes.type(\"string\"), {\n\t                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\n\t                })\n\t            };\n\t        };\n\t        var p, segment;\n\t        while ((m = placeholder.exec(pattern))) {\n\t            p = matchDetails(m, false);\n\t            if (p.segment.indexOf('?') >= 0)\n\t                break; // we're into the search part\n\t            checkParamErrors(p.id);\n\t            this._params.push(module_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n\t            this._segments.push(p.segment);\n\t            patterns.push([p.segment, common_1.tail(this._params)]);\n\t            last = placeholder.lastIndex;\n\t        }\n\t        segment = pattern.substring(last);\n\t        // Find any search parameter names and remove them from the last segment\n\t        var i = segment.indexOf('?');\n\t        if (i >= 0) {\n\t            var search = segment.substring(i);\n\t            segment = segment.substring(0, i);\n\t            if (search.length > 0) {\n\t                last = 0;\n\t                while ((m = searchPlaceholder.exec(search))) {\n\t                    p = matchDetails(m, true);\n\t                    checkParamErrors(p.id);\n\t                    this._params.push(module_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n\t                    last = placeholder.lastIndex;\n\t                }\n\t            }\n\t        }\n\t        this._segments.push(segment);\n\t        common_1.extend(this, {\n\t            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),\n\t            prefix: this._segments[0]\n\t        });\n\t        Object.freeze(this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.util.type:UrlMatcher#append\n\t     * @methodOf ui.router.util.type:UrlMatcher\n\t     *\n\t     * @description\n\t     * @TODO\n\t     *\n\t     * @example\n\t     * @TODO\n\t     *\n\t     * @param {UrlMatcher} url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n\t     */\n\t    UrlMatcher.prototype.append = function (url) {\n\t        this._children.push(url);\n\t        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });\n\t        url._cache.path = this._cache.path.concat(this);\n\t        return url;\n\t    };\n\t    UrlMatcher.prototype.isRoot = function () {\n\t        return this._cache.path.length === 0;\n\t    };\n\t    UrlMatcher.prototype.toString = function () {\n\t        return this.pattern;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.util.type:UrlMatcher#exec\n\t     * @methodOf ui.router.util.type:UrlMatcher\n\t     *\n\t     * @description\n\t     * Tests the specified path against this matcher, and returns an object containing the captured\n\t     * parameter values, or null if the path does not match. The returned object contains the values\n\t     * of any search parameters that are mentioned in the pattern, but their value may be null if\n\t     * they are not present in `search`. This means that search parameters are always treated\n\t     * as optional.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n\t     *   x: '1', q: 'hello'\n\t     * });\n\t     * // returns { id: 'bob', q: 'hello', r: null }\n\t     * </pre>\n\t     *\n\t     * @param {string} path  The URL path to match, e.g. `$location.path()`.\n\t     * @param {Object} search  URL search parameters, e.g. `$location.search()`.\n\t     * @param {string} hash  URL hash e.g. `$location.hash()`.\n\t     * @param {Object} options\n\t     * @returns {Object}  The captured parameter values.\n\t     */\n\t    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n\t        var _this = this;\n\t        if (search === void 0) { search = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var match = memoizeTo(this._cache, 'pattern', function () {\n\t            return new RegExp([\n\t                '^',\n\t                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),\n\t                _this.config.strict === false ? '\\/?' : '',\n\t                '$'\n\t            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n\t        }).exec(path);\n\t        if (!match)\n\t            return null;\n\t        //options = defaults(options, { isolate: false });\n\t        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\n\t        if (nPathSegments !== match.length - 1)\n\t            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n\t        function decodePathArray(string) {\n\t            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\n\t            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\n\t            var split = reverseString(string).split(/-(?!\\\\)/);\n\t            var allReversed = common_1.map(split, reverseString);\n\t            return common_1.map(allReversed, unquoteDashes).reverse();\n\t        }\n\t        for (var i = 0; i < nPathSegments; i++) {\n\t            var param = pathParams[i];\n\t            var value = match[i + 1];\n\t            // if the param value matches a pre-replace pair, replace the value before decoding.\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (value && param.array === true)\n\t                value = decodePathArray(value);\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        }\n\t        common_1.forEach(searchParams, function (param) {\n\t            var value = search[param.id];\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        });\n\t        if (hash)\n\t            values[\"#\"] = hash;\n\t        return values;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.util.type:UrlMatcher#parameters\n\t     * @methodOf ui.router.util.type:UrlMatcher\n\t     *\n\t     * @description\n\t     * Returns the names of all path and search parameters of this pattern in order of appearance.\n\t     *\n\t     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n\t     *    pattern has no parameters, an empty array is returned.\n\t     */\n\t    UrlMatcher.prototype.parameters = function (opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        if (opts.inherit === false)\n\t            return this._params;\n\t        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));\n\t    };\n\t    UrlMatcher.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        var parent = common_1.tail(this._cache.path);\n\t        return (common_1.find(this._params, hof_1.propEq('id', id)) ||\n\t            (opts.inherit !== false && parent && parent.parameter(id)) ||\n\t            null);\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.util.type:UrlMatcher#validates\n\t     * @methodOf ui.router.util.type:UrlMatcher\n\t     *\n\t     * @description\n\t     * Checks an object hash of parameters to validate their correctness according to the parameter\n\t     * types of this `UrlMatcher`.\n\t     *\n\t     * @param {Object} params The object hash of parameters to validate.\n\t     * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.\n\t     */\n\t    UrlMatcher.prototype.validates = function (params) {\n\t        var _this = this;\n\t        var validParamVal = function (param, val) { return !param || param.validates(val); };\n\t        return common_1.pairs(params || {}).map(function (_a) {\n\t            var key = _a[0], val = _a[1];\n\t            return validParamVal(_this.parameter(key), val);\n\t        }).reduce(common_1.allTrueR, true);\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.util.type:UrlMatcher#format\n\t     * @methodOf ui.router.util.type:UrlMatcher\n\t     *\n\t     * @description\n\t     * Creates a URL that matches this pattern by substituting the specified values\n\t     * for the path and search parameters. Null values for path parameters are\n\t     * treated as empty strings.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n\t     * // returns '/user/bob?q=yes'\n\t     * </pre>\n\t     *\n\t     * @param {Object} values  the values to substitute for the parameters in this pattern.\n\t     * @returns {string}  the formatted URL (path and optionally search part).\n\t     */\n\t    UrlMatcher.prototype.format = function (values) {\n\t        if (values === void 0) { values = {}; }\n\t        if (!this.validates(values))\n\t            return null;\n\t        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n\t        var urlMatchers = this._cache.path.slice().concat(this);\n\t        // Extract all the static segments and Params into an ordered array\n\t        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);\n\t        // Extract the query params into a separate array\n\t        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);\n\t        /**\n\t         * Given a Param,\n\t         * Applies the parameter value, then returns details about it\n\t         */\n\t        function getDetails(param) {\n\t            // Normalize to typed value\n\t            var value = param.value(values[param.id]);\n\t            var isDefaultValue = param.isDefaultValue(value);\n\t            // Check if we're in squash mode for the parameter\n\t            var squash = isDefaultValue ? param.squash : false;\n\t            // Allow the Parameter's Type to encode the value\n\t            var encoded = param.type.encode(value);\n\t            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n\t        }\n\t        // Build up the path-portion from the list of static segments and parameters\n\t        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n\t            // The element is a static segment (a raw string); just append it\n\t            if (predicates_1.isString(x))\n\t                return acc + x;\n\t            // Otherwise, it's a Param.  Fetch details about the parameter value\n\t            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;\n\t            // If squash is === true, try to remove a slash from the path\n\t            if (squash === true)\n\t                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n\t            // If squash is a string, use the string for the param value\n\t            if (predicates_1.isString(squash))\n\t                return acc + squash;\n\t            if (squash !== false)\n\t                return acc; // ?\n\t            if (encoded == null)\n\t                return acc;\n\t            // If this parameter value is an array, encode the value using encodeDashes\n\t            if (predicates_1.isArray(encoded))\n\t                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\n\t            // If the parameter type is \"raw\", then do not encodeURIComponent\n\t            if (param.type.raw)\n\t                return acc + encoded;\n\t            // Encode the value\n\t            return acc + encodeURIComponent(encoded);\n\t        }, \"\");\n\t        // Build the query string by applying parameter values (array or regular)\n\t        // then mapping to key=value, then flattening and joining using \"&\"\n\t        var queryString = queryParams.map(function (param) {\n\t            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;\n\t            if (encoded == null || (isDefaultValue && squash !== false))\n\t                return;\n\t            if (!predicates_1.isArray(encoded))\n\t                encoded = [encoded];\n\t            if (encoded.length === 0)\n\t                return;\n\t            if (!param.type.raw)\n\t                encoded = common_1.map(encoded, encodeURIComponent);\n\t            return encoded.map(function (val) { return (param.id + \"=\" + val); });\n\t        }).filter(common_1.identity).reduce(common_2.unnestR, []).join(\"&\");\n\t        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n\t        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n\t    };\n\t    UrlMatcher.encodeDashes = function (str) {\n\t        return encodeURIComponent(str).replace(/-/g, function (c) { return (\"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase()); });\n\t    };\n\t    /** Given a matcher, return an array with the matcher's path segments and path params, in order */\n\t    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n\t        var staticSegments = matcher._segments;\n\t        var pathParams = matcher._params.filter(function (p) { return p.location === param_1.DefType.PATH; });\n\t        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== \"\" && predicates_2.isDefined(x); });\n\t    };\n\t    /** Given a matcher, return an array with the matcher's query params */\n\t    UrlMatcher.queryParams = function (matcher) {\n\t        return matcher._params.filter(function (p) { return p.location === param_1.DefType.SEARCH; });\n\t    };\n\t    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\t    return UrlMatcher;\n\t}());\n\texports.UrlMatcher = UrlMatcher;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar module_1 = __webpack_require__(45);\n\tvar module_2 = __webpack_require__(20);\n\tfunction getDefaultConfig() {\n\t    return {\n\t        strict: module_1.matcherConfig.strictMode(),\n\t        caseInsensitive: module_1.matcherConfig.caseInsensitive()\n\t    };\n\t}\n\t/**\n\t * Factory for [[UrlMatcher]] instances.\n\t *\n\t * The factory is available to ng1 services as\n\t * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n\t */\n\tvar UrlMatcherFactory = (function () {\n\t    function UrlMatcherFactory() {\n\t        common_1.extend(this, { UrlMatcher: module_1.UrlMatcher, Param: module_2.Param });\n\t    }\n\t    /**\n\t     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n\t     *\n\t     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n\t     * @returns the current value of caseInsensitive\n\t     */\n\t    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\n\t        return module_1.matcherConfig.caseInsensitive(value);\n\t    };\n\t    /**\n\t     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n\t     *\n\t     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n\t     * @returns the current value of strictMode\n\t     */\n\t    UrlMatcherFactory.prototype.strictMode = function (value) {\n\t        return module_1.matcherConfig.strictMode(value);\n\t    };\n\t    /**\n\t     * Sets the default behavior when generating or matching URLs with default parameter values.\n\t     *\n\t     * @param value A string that defines the default parameter URL squashing behavior.\n\t     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n\t     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n\t     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n\t     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n\t     *             the parameter value from the URL and replace it with this string.\n\t     * @returns the current value of defaultSquashPolicy\n\t     */\n\t    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\n\t        return module_1.matcherConfig.defaultSquashPolicy(value);\n\t    };\n\t    /**\n\t     * Creates a [[UrlMatcher]] for the specified pattern.\n\t     *\n\t     * @param pattern  The URL pattern.\n\t     * @param config  The config object hash.\n\t     * @returns The UrlMatcher.\n\t     */\n\t    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n\t        return new module_1.UrlMatcher(pattern, common_1.extend(getDefaultConfig(), config));\n\t    };\n\t    /**\n\t     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n\t     *\n\t     * @param object  The object to perform the type check against.\n\t     * @returns `true` if the object matches the `UrlMatcher` interface, by\n\t     *          implementing all the same methods.\n\t     */\n\t    UrlMatcherFactory.prototype.isMatcher = function (object) {\n\t        // TODO: typeof?\n\t        if (!predicates_1.isObject(object))\n\t            return false;\n\t        var result = true;\n\t        common_1.forEach(module_1.UrlMatcher.prototype, function (val, name) {\n\t            if (predicates_1.isFunction(val))\n\t                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\n\t        });\n\t        return result;\n\t    };\n\t    ;\n\t    /**\n\t     * Registers a custom [[Type]] object that can be used to generate URLs with typed parameters.\n\t     *\n\t     * @param name  The type name.\n\t     * @param definition The type definition. See [[Type]] for information on the values accepted.\n\t     * @param definitionFn A function that is injected before the app\n\t     *        runtime starts.  The result of this function is merged into the existing `definition`.\n\t     *        See [[Type]] for information on the values accepted.\n\t     *\n\t     * @returns - if a type was registered: the [[UrlMatcherFactory]]\n\t     *   - if only the `name` parameter was specified: the currently registered [[Type]] object, or undefined\n\t     *\n\t     * ---\n\t     *\n\t     * This is a simple example of a custom type that encodes and decodes items from an\n\t     * array, using the array index as the URL-encoded value:\n\t     *\n\t     * @example\n\t     * ```\n\t     *\n\t     * var list = ['John', 'Paul', 'George', 'Ringo'];\n\t     *\n\t     * $urlMatcherFactoryProvider.type('listItem', {\n\t     *   encode: function(item) {\n\t     *     // Represent the list item in the URL using its corresponding index\n\t     *     return list.indexOf(item);\n\t     *   },\n\t     *   decode: function(item) {\n\t     *     // Look up the list item by index\n\t     *     return list[parseInt(item, 10)];\n\t     *   },\n\t     *   is: function(item) {\n\t     *     // Ensure the item is valid by checking to see that it appears\n\t     *     // in the list\n\t     *     return list.indexOf(item) > -1;\n\t     *   }\n\t     * });\n\t     *\n\t     * $stateProvider.state('list', {\n\t     *   url: \"/list/{item:listItem}\",\n\t     *   controller: function($scope, $stateParams) {\n\t     *     console.log($stateParams.item);\n\t     *   }\n\t     * });\n\t     *\n\t     * // ...\n\t     *\n\t     * // Changes URL to '/list/3', logs \"Ringo\" to the console\n\t     * $state.go('list', { item: \"Ringo\" });\n\t     * ```\n\t     */\n\t    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\n\t        var type = module_2.paramTypes.type(name, definition, definitionFn);\n\t        return !predicates_1.isDefined(definition) ? type : this;\n\t    };\n\t    ;\n\t    /** @hidden */\n\t    UrlMatcherFactory.prototype.$get = function () {\n\t        module_2.paramTypes.enqueue = false;\n\t        module_2.paramTypes._flushTypeQueue();\n\t        return this;\n\t    };\n\t    ;\n\t    return UrlMatcherFactory;\n\t}());\n\texports.UrlMatcherFactory = UrlMatcherFactory;\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar $location = coreservices_1.services.location;\n\t// Returns a string that is a prefix of all strings matching the RegExp\n\tfunction regExpPrefix(re) {\n\t    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n\t    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n\t}\n\t// Interpolates matched values into a String.replace()-style pattern\n\tfunction interpolate(pattern, match) {\n\t    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n\t        return match[what === '$' ? 0 : Number(what)];\n\t    });\n\t}\n\tfunction handleIfMatch($injector, $stateParams, handler, match) {\n\t    if (!match)\n\t        return false;\n\t    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n\t    return predicates_1.isDefined(result) ? result : true;\n\t}\n\tfunction appendBasePath(url, isHtml5, absolute) {\n\t    var baseHref = coreservices_1.services.locationConfig.baseHref();\n\t    if (baseHref === '/')\n\t        return url;\n\t    if (isHtml5)\n\t        return baseHref.slice(0, -1) + url;\n\t    if (absolute)\n\t        return baseHref.slice(1) + url;\n\t    return url;\n\t}\n\t// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n\tfunction update(rules, otherwiseFn, evt) {\n\t    if (evt && evt.defaultPrevented)\n\t        return;\n\t    function check(rule) {\n\t        var handled = rule(coreservices_1.services.$injector, $location);\n\t        if (!handled)\n\t            return false;\n\t        if (predicates_1.isString(handled)) {\n\t            $location.replace();\n\t            $location.url(handled);\n\t        }\n\t        return true;\n\t    }\n\t    var n = rules.length, i;\n\t    for (i = 0; i < n; i++) {\n\t        if (check(rules[i]))\n\t            return;\n\t    }\n\t    // always check otherwise last to allow dynamic updates to the set of rules\n\t    if (otherwiseFn)\n\t        check(otherwiseFn);\n\t}\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.router.$urlRouterProvider\n\t *\n\t * @requires ui.router.util.$urlMatcherFactoryProvider\n\t * @requires $locationProvider\n\t *\n\t * @description\n\t * `$urlRouterProvider` has the responsibility of watching `$location`.\n\t * When `$location` changes it runs through a list of rules one by one until a\n\t * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify\n\t * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n\t *\n\t * There are several methods on `$urlRouterProvider` that make it useful to use directly\n\t * in your module config.\n\t */\n\tvar UrlRouterProvider = (function () {\n\t    function UrlRouterProvider($urlMatcherFactory, $stateParams) {\n\t        this.$urlMatcherFactory = $urlMatcherFactory;\n\t        this.$stateParams = $stateParams;\n\t        /** @hidden */\n\t        this.rules = [];\n\t        /** @hidden */\n\t        this.otherwiseFn = null;\n\t        /** @hidden */\n\t        this.interceptDeferred = false;\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.router.$urlRouterProvider#rule\n\t     * @methodOf ui.router.router.$urlRouterProvider\n\t     *\n\t     * @description\n\t     * Defines rules that are used by `$urlRouterProvider` to find matches for\n\t     * specific URLs.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // Here's an example of how you might allow case insensitive urls\n\t     *   $urlRouterProvider.rule(function ($injector, $location) {\n\t     *     var path = $location.path(),\n\t     *         normalized = path.toLowerCase();\n\t     *\n\t     *     if (path !== normalized) {\n\t     *       return normalized;\n\t     *     }\n\t     *   });\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {function} rule Handler function that takes `$injector` and `$location`\n\t     * services as arguments. You can use them to return a valid path as a string.\n\t     *\n\t     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n\t     */\n\t    UrlRouterProvider.prototype.rule = function (rule) {\n\t        if (!predicates_1.isFunction(rule))\n\t            throw new Error(\"'rule' must be a function\");\n\t        this.rules.push(rule);\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc object\n\t     * @name ui.router.router.$urlRouterProvider#otherwise\n\t     * @methodOf ui.router.router.$urlRouterProvider\n\t     *\n\t     * @description\n\t     * Defines a path that is used when an invalid route is requested.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // if the path doesn't match any of the urls you configured\n\t     *   // otherwise will take care of routing the user to the\n\t     *   // specified url\n\t     *   $urlRouterProvider.otherwise('/index');\n\t     *\n\t     *   // Example of using function rule as param\n\t     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n\t     *     return '/a/valid/url';\n\t     *   });\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string|function} rule The url path you want to redirect to or a function\n\t     * rule that returns the url path. The function version is passed two params:\n\t     * `$injector` and `$location` services, and must return a url string.\n\t     *\n\t     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n\t     */\n\t    UrlRouterProvider.prototype.otherwise = function (rule) {\n\t        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))\n\t            throw new Error(\"'rule' must be a string or function\");\n\t        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.router.$urlRouterProvider#when\n\t     * @methodOf ui.router.router.$urlRouterProvider\n\t     *\n\t     * @description\n\t     * Registers a handler for a given url matching.\n\t     *\n\t     * If the handler is a string, it is\n\t     * treated as a redirect, and is interpolated according to the syntax of match\n\t     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n\t     *\n\t     * If the handler is a function, it is injectable. It gets invoked if `$location`\n\t     * matches. You have the option of inject the match object as `$match`.\n\t     *\n\t     * The handler can return\n\t     *\n\t     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n\t     *   will continue trying to find another one that matches.\n\t     * - **string** which is treated as a redirect and passed to `$location.url()`\n\t     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n\t     *     if ($state.$current.navigable !== state ||\n\t     *         !equalForKeys($match, $stateParams) {\n\t     *      $state.transitionTo(state, $match, false);\n\t     *     }\n\t     *   });\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string|object} what The incoming path that you want to redirect.\n\t     * @param {string|function} handler The path you want to redirect your user to.\n\t     */\n\t    UrlRouterProvider.prototype.when = function (what, handler) {\n\t        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;\n\t        var redirect, handlerIsString = predicates_1.isString(handler);\n\t        // @todo Queue this\n\t        if (predicates_1.isString(what))\n\t            what = $urlMatcherFactory.compile(what);\n\t        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))\n\t            throw new Error(\"invalid 'handler' in when()\");\n\t        var strategies = {\n\t            matcher: function (_what, _handler) {\n\t                if (handlerIsString) {\n\t                    redirect = $urlMatcherFactory.compile(_handler);\n\t                    _handler = ['$match', redirect.format.bind(redirect)];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n\t                }, {\n\t                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''\n\t                });\n\t            },\n\t            regex: function (_what, _handler) {\n\t                if (_what.global || _what.sticky)\n\t                    throw new Error(\"when() RegExp must not be global or sticky\");\n\t                if (handlerIsString) {\n\t                    redirect = _handler;\n\t                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));\n\t                }, {\n\t                    prefix: regExpPrefix(_what)\n\t                });\n\t            }\n\t        };\n\t        var check = {\n\t            matcher: $urlMatcherFactory.isMatcher(what),\n\t            regex: what instanceof RegExp\n\t        };\n\t        for (var n in check) {\n\t            if (check[n])\n\t                return this.rule(strategies[n](what, handler));\n\t        }\n\t        throw new Error(\"invalid 'what' in when()\");\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.router.$urlRouterProvider#deferIntercept\n\t     * @methodOf ui.router.router.$urlRouterProvider\n\t     *\n\t     * @description\n\t     * Disables (or enables) deferring location change interception.\n\t     *\n\t     * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n\t     * defer a transition but maintain the current URL), call this method at configuration time.\n\t     * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n\t     * `$locationChangeSuccess` event handler.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *\n\t     *   // Prevent $urlRouter from automatically intercepting URL changes;\n\t     *   // this allows you to configure custom behavior in between\n\t     *   // location changes and route synchronization:\n\t     *   $urlRouterProvider.deferIntercept();\n\t     *\n\t     * }).run(function ($rootScope, $urlRouter, UserService) {\n\t     *\n\t     *   $rootScope.$on('$locationChangeSuccess', function(e) {\n\t     *     // UserService is an example service for managing user state\n\t     *     if (UserService.isLoggedIn()) return;\n\t     *\n\t     *     // Prevent $urlRouter's default handler from firing\n\t     *     e.preventDefault();\n\t     *\n\t     *     UserService.handleLogin().then(function() {\n\t     *       // Once the user has logged in, sync the current URL\n\t     *       // to the router:\n\t     *       $urlRouter.sync();\n\t     *     });\n\t     *   });\n\t     *\n\t     *   // Configures $urlRouter's listener *after* your custom listener\n\t     *   $urlRouter.listen();\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {boolean} defer Indicates whether to defer location change interception. Passing\n\t     *        no parameter is equivalent to `true`.\n\t     */\n\t    UrlRouterProvider.prototype.deferIntercept = function (defer) {\n\t        if (defer === undefined)\n\t            defer = true;\n\t        this.interceptDeferred = defer;\n\t    };\n\t    ;\n\t    return UrlRouterProvider;\n\t}());\n\texports.UrlRouterProvider = UrlRouterProvider;\n\tvar UrlRouter = (function () {\n\t    function UrlRouter(urlRouterProvider) {\n\t        this.urlRouterProvider = urlRouterProvider;\n\t        common_1.bindFunctions(UrlRouter.prototype, this, this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.router.$urlRouter#sync\n\t     * @methodOf ui.router.router.$urlRouter\n\t     *\n\t     * @description\n\t     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n\t     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n\t     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n\t     * with the transition by calling `$urlRouter.sync()`.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * angular.module('app', ['ui.router'])\n\t     *   .run(function($rootScope, $urlRouter) {\n\t     *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n\t     *       // Halt state change from even starting\n\t     *       evt.preventDefault();\n\t     *       // Perform custom logic\n\t     *       var meetsRequirement = ...\n\t     *       // Continue with the update and state transition if logic allows\n\t     *       if (meetsRequirement) $urlRouter.sync();\n\t     *     });\n\t     * });\n\t     * </pre>\n\t     */\n\t    UrlRouter.prototype.sync = function () {\n\t        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n\t    };\n\t    UrlRouter.prototype.listen = function () {\n\t        var _this = this;\n\t        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });\n\t    };\n\t    UrlRouter.prototype.update = function (read) {\n\t        if (read) {\n\t            this.location = $location.url();\n\t            return;\n\t        }\n\t        if ($location.url() === this.location)\n\t            return;\n\t        $location.url(this.location);\n\t        $location.replace();\n\t    };\n\t    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n\t        $location.url(urlMatcher.format(params || {}));\n\t        if (options && options.replace)\n\t            $location.replace();\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.router.$urlRouter#href\n\t     * @methodOf ui.router.router.$urlRouter\n\t     *\n\t     * @description\n\t     * A URL generation method that returns the compiled URL for a given\n\t     * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n\t     *   person: \"bob\"\n\t     * });\n\t     * // $bob == \"/about/bob\";\n\t     * </pre>\n\t     *\n\t     * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n\t     * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n\t     */\n\t    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n\t        if (!urlMatcher.validates(params))\n\t            return null;\n\t        var url = urlMatcher.format(params);\n\t        options = options || {};\n\t        var cfg = coreservices_1.services.locationConfig;\n\t        var isHtml5 = cfg.html5Mode();\n\t        if (!isHtml5 && url !== null) {\n\t            url = \"#\" + cfg.hashPrefix() + url;\n\t        }\n\t        url = appendBasePath(url, isHtml5, options.absolute);\n\t        if (!options.absolute || !url) {\n\t            return url;\n\t        }\n\t        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n\t        port = (port === 80 || port === 443 ? '' : ':' + port);\n\t        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n\t    };\n\t    return UrlRouter;\n\t}());\n\texports.UrlRouter = UrlRouter;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module view */ /** for typedoc */\n\t__export(__webpack_require__(50));\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module view */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar module_1 = __webpack_require__(2);\n\tvar match = function (obj1) {\n\t    var keys = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        keys[_i - 1] = arguments[_i];\n\t    }\n\t    return function (obj2) { return keys.reduce(function (memo, key) { return memo && obj1[key] === obj2[key]; }, true); };\n\t};\n\t/**\n\t * The View service\n\t */\n\tvar ViewService = (function () {\n\t    function ViewService() {\n\t        var _this = this;\n\t        this.uiViews = [];\n\t        this.viewConfigs = [];\n\t        this._viewConfigFactories = {};\n\t        this.sync = function () {\n\t            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\n\t            /**\n\t             * Given a ui-view and a ViewConfig, determines if they \"match\".\n\t             *\n\t             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n\t             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n\t             *\n\t             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n\t             * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n\t             *\n\t             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n\t             * - the ui-view's name matches the ViewConfig's target name\n\t             * - the ui-view's context matches the ViewConfig's anchor\n\t             *\n\t             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n\t             * - There exists a parent ui-view where:\n\t             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n\t             *    - the parent ui-view's context matches the ViewConfig's anchor\n\t             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n\t             *\n\t             * Example:\n\t             *\n\t             * DOM:\n\t             * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n\t             *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n\t             *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n\t             *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n\t             *       </div>\n\t             *     </div>\n\t             *   </div>\n\t             * </div>\n\t             *\n\t             * uiViews: [\n\t             *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n\t             *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n\t             *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n\t             *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n\t             * ]\n\t             *\n\t             * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n\t             *\n\t             * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n\t             * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n\t             * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n\t             * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n\t             *\n\t             * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n\t             * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n\t             * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n\t             *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n\t             *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n\t             * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n\t             *   the tail of the ui-view's fqn \"default.bar\"\n\t             */\n\t            var matches = function (uiView) { return function (viewConfig) {\n\t                // Split names apart from both viewConfig and uiView into segments\n\t                var vc = viewConfig.viewDecl;\n\t                var vcSegments = vc.$uiViewName.split(\".\");\n\t                var uivSegments = uiView.fqn.split(\".\");\n\t                // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n\t                // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n\t                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n\t                    return false;\n\t                // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n\t                // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n\t                var negOffset = (1 - vcSegments.length) || undefined;\n\t                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n\t                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n\t                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n\t            }; };\n\t            // Return the number of dots in the fully qualified name\n\t            function uiViewDepth(uiView) {\n\t                return uiView.fqn.split(\".\").length;\n\t            }\n\t            // Return the ViewConfig's context's depth in the context tree.\n\t            function viewConfigDepth(config) {\n\t                var context = config.viewDecl.$context, count = 0;\n\t                while (++count && context.parent)\n\t                    context = context.parent;\n\t                return count;\n\t            }\n\t            // Given a depth function, returns a compare function which can return either ascending or descending order\n\t            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\n\t            var matchingConfigPair = function (uiView) {\n\t                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));\n\t                if (matchingConfigs.length > 1)\n\t                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n\t                return [uiView, matchingConfigs[0]];\n\t            };\n\t            var configureUiView = function (_a) {\n\t                var uiView = _a[0], viewConfig = _a[1];\n\t                // If a parent ui-view is reconfigured, it could destroy child ui-views.\n\t                // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n\t                if (_this.uiViews.indexOf(uiView) !== -1)\n\t                    uiView.configUpdated(viewConfig);\n\t            };\n\t            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUiView);\n\t        };\n\t    }\n\t    ViewService.prototype.rootContext = function (context) {\n\t        return this._rootContext = context || this._rootContext;\n\t    };\n\t    ;\n\t    ViewService.prototype.viewConfigFactory = function (viewType, factory) {\n\t        this._viewConfigFactories[viewType] = factory;\n\t    };\n\t    ViewService.prototype.createViewConfig = function (node, decl) {\n\t        var cfgFactory = this._viewConfigFactories[decl.$type];\n\t        if (!cfgFactory)\n\t            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n\t        return cfgFactory(node, decl);\n\t    };\n\t    /**\n\t     * De-registers a ViewConfig.\n\t     *\n\t     * @param viewConfig The ViewConfig view to deregister.\n\t     */\n\t    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n\t        module_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n\t        common_1.removeFrom(this.viewConfigs, viewConfig);\n\t    };\n\t    ;\n\t    ViewService.prototype.activateViewConfig = function (viewConfig) {\n\t        module_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\n\t        this.viewConfigs.push(viewConfig);\n\t    };\n\t    ;\n\t    /**\n\t     * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n\t     * be updated with a template, controller, and local variables.\n\t     *\n\t     * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n\t     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n\t     *                   of the view.\n\t     * @return {Function} Returns a de-registration function used when the view is destroyed.\n\t     */\n\t    ViewService.prototype.registerUiView = function (uiView) {\n\t        module_1.trace.traceViewServiceUiViewEvent(\"-> Registering\", uiView);\n\t        var uiViews = this.uiViews;\n\t        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\n\t        if (uiViews.filter(fqnMatches).length)\n\t            module_1.trace.traceViewServiceUiViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\t        uiViews.push(uiView);\n\t        this.sync();\n\t        return function () {\n\t            var idx = uiViews.indexOf(uiView);\n\t            if (idx <= 0) {\n\t                module_1.trace.traceViewServiceUiViewEvent(\"Tried removing non-registered uiView\", uiView);\n\t                return;\n\t            }\n\t            module_1.trace.traceViewServiceUiViewEvent(\"<- Deregistering\", uiView);\n\t            common_1.removeFrom(uiViews)(uiView);\n\t        };\n\t    };\n\t    ;\n\t    /**\n\t     * Returns the list of views currently available on the page, by fully-qualified name.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.available = function () {\n\t        return this.uiViews.map(hof_1.prop(\"fqn\"));\n\t    };\n\t    /**\n\t     * Returns the list of views on the page containing loaded content.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.active = function () {\n\t        return this.uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\n\t    };\n\t    /**\n\t     * Normalizes a view's name from a state.views configuration block.\n\t     *\n\t     * @param context the context object (state declaration) that the view belongs to\n\t     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n\t     *\n\t     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n\t     */\n\t    ViewService.normalizeUiViewTarget = function (context, rawViewName) {\n\t        if (rawViewName === void 0) { rawViewName = \"\"; }\n\t        // TODO: Validate incoming view name with a regexp to allow:\n\t        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n\t        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n\t        var viewAtContext = rawViewName.split(\"@\");\n\t        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\n\t        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\n\t        // Handle relative view-name sugar syntax.\n\t        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n\t        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n\t        if (relativeViewNameSugar) {\n\t            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n\t            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n\t            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n\t        }\n\t        if (uiViewName.charAt(0) === '!') {\n\t            uiViewName = uiViewName.substr(1);\n\t            uiViewContextAnchor = \"\"; // target absolutely from root\n\t        }\n\t        // handle parent relative targeting \"^.^.^\"\n\t        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n\t        if (relativeMatch.exec(uiViewContextAnchor)) {\n\t            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\n\t            uiViewContextAnchor = anchor.name;\n\t        }\n\t        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n\t    };\n\t    return ViewService;\n\t}());\n\texports.ViewService = ViewService;\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar stateParams_1 = __webpack_require__(25);\n\tvar queue_1 = __webpack_require__(8);\n\tvar common_1 = __webpack_require__(3);\n\t/**\n\t * Global mutable state\n\t *\n\t * This is where we hold the global mutable state such as current state, current\n\t * params, current transition, last successful transition, last attempted transition, etc.\n\t */\n\tvar UIRouterGlobals = (function () {\n\t    function UIRouterGlobals(transitionService) {\n\t        var _this = this;\n\t        /**\n\t         * Current parameter values\n\t         *\n\t         * The parameter values from the latest successful transition\n\t         */\n\t        this.params = new stateParams_1.StateParams();\n\t        /**\n\t         * The transition history\n\t         *\n\t         * This queue's size is limited to a maximum number (default: 1)\n\t         */\n\t        this.transitionHistory = new queue_1.Queue([], 1);\n\t        /**\n\t         * The history of successful transitions\n\t         *\n\t         * This queue's size is limited to a maximum number (default: 1)\n\t         */\n\t        this.successfulTransitions = new queue_1.Queue([], 1);\n\t        var beforeNewTransition = function ($transition$) {\n\t            _this.transition = $transition$;\n\t            _this.transitionHistory.enqueue($transition$);\n\t            var updateGlobalState = function () {\n\t                _this.successfulTransitions.enqueue($transition$);\n\t                _this.$current = $transition$.$to();\n\t                _this.current = _this.$current.self;\n\t                common_1.copy($transition$.params(), _this.params);\n\t            };\n\t            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });\n\t            var clearCurrentTransition = function () { if (_this.transition === $transition$)\n\t                _this.transition = null; };\n\t            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\t        };\n\t        transitionService.onBefore({}, ['$transition$', beforeNewTransition]);\n\t    }\n\t    return UIRouterGlobals;\n\t}());\n\texports.UIRouterGlobals = UIRouterGlobals;\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar urlMatcherFactory_1 = __webpack_require__(47);\n\tvar urlRouter_1 = __webpack_require__(48);\n\tvar state_1 = __webpack_require__(18);\n\tvar urlRouter_2 = __webpack_require__(48);\n\tvar transitionService_1 = __webpack_require__(43);\n\tvar view_1 = __webpack_require__(50);\n\tvar stateRegistry_1 = __webpack_require__(36);\n\tvar stateService_1 = __webpack_require__(37);\n\tvar globals_1 = __webpack_require__(51);\n\t/**\n\t * The master class used to instantiate an instance of UI-Router.\n\t *\n\t * This class instantiates and wires the global UI-Router services.\n\t *\n\t * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n\t * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n\t * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n\t */\n\tvar UIRouter = (function () {\n\t    function UIRouter() {\n\t        this.viewService = new view_1.ViewService();\n\t        this.transitionService = new transitionService_1.TransitionService(this.viewService);\n\t        this.globals = new globals_1.UIRouterGlobals(this.transitionService);\n\t        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\n\t        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\t        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);\n\t        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\t        /** @hidden TODO: move this to ng1.ts */\n\t        this.stateProvider = new state_1.StateProvider(this.stateRegistry);\n\t        this.stateService = new stateService_1.StateService(this.viewService, this.urlRouter, this.transitionService, this.stateRegistry, this.stateProvider, this.globals);\n\t        this.viewService.rootContext(this.stateRegistry.root());\n\t        this.globals.$current = this.stateRegistry.root();\n\t        this.globals.current = this.globals.$current.self;\n\t    }\n\t    return UIRouter;\n\t}());\n\texports.UIRouter = UIRouter;\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * # UI-Router for Angular 1\n\t *\n\t * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.\n\t * - Also registers some services with the angular 1 injector.\n\t * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.\n\t *\n\t * @module ng1\n\t * @preferred\n\t */\n\t\"use strict\";\n\t/** for typedoc */\n\tvar router_1 = __webpack_require__(52);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar common_1 = __webpack_require__(3);\n\tvar hof_1 = __webpack_require__(5);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar module_1 = __webpack_require__(44);\n\tvar module_2 = __webpack_require__(40);\n\tvar module_3 = __webpack_require__(17);\n\tvar trace_1 = __webpack_require__(12);\n\tvar viewsBuilder_1 = __webpack_require__(54);\n\tvar templateFactory_1 = __webpack_require__(55);\n\t/** @hidden */\n\tvar app = angular.module(\"ui.router.angular1\", []);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router.util\n\t *\n\t * @description\n\t * # ui.router.util sub-module\n\t *\n\t * This module is a dependency of other sub-modules. Do not include this module as a dependency\n\t * in your angular app (use {@link ui.router} module instead).\n\t *\n\t */\n\tangular.module('ui.router.util', ['ng', 'ui.router.init']);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router.router\n\t *\n\t * @requires ui.router.util\n\t *\n\t * @description\n\t * # ui.router.router sub-module\n\t *\n\t * This module is a dependency of other sub-modules. Do not include this module as a dependency\n\t * in your angular app (use {@link ui.router} module instead).\n\t */\n\tangular.module('ui.router.router', ['ui.router.util']);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router.state\n\t *\n\t * @requires ui.router.router\n\t * @requires ui.router.util\n\t *\n\t * @description\n\t * # ui.router.state sub-module\n\t *\n\t * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n\t * in your angular app (use {@link ui.router} module instead).\n\t *\n\t */\n\tangular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\n\t/**\n\t * @ngdoc overview\n\t * @name ui.router\n\t *\n\t * @requires ui.router.state\n\t *\n\t * @description\n\t * # ui.router\n\t *\n\t * ## The main module for ui.router\n\t * There are several sub-modules included with the ui.router module, however only this module is needed\n\t * as a dependency within your angular app. The other modules are for organization purposes.\n\t *\n\t * The modules are:\n\t * * ui.router - the main \"umbrella\" module\n\t * * ui.router.router -\n\t *\n\t * *You'll need to include **only** this module as the dependency within your angular app.*\n\t *\n\t * <pre>\n\t * <!doctype html>\n\t * <html ng-app=\"myApp\">\n\t * <head>\n\t *   <script src=\"js/angular.js\"></script>\n\t *   <!-- Include the ui-router script -->\n\t *   <script src=\"js/angular-ui-router.min.js\"></script>\n\t *   <script>\n\t *     // ...and add 'ui.router' as a dependency\n\t *     var myApp = angular.module('myApp', ['ui.router']);\n\t *   </script>\n\t * </head>\n\t * <body>\n\t * </body>\n\t * </html>\n\t * </pre>\n\t */\n\tangular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\n\tangular.module('ui.router.compat', ['ui.router']);\n\t/**\n\t * Annotates a controller expression (may be a controller function(), a \"controllername\",\n\t * or \"controllername as name\")\n\t *\n\t * - Temporarily decorates $injector.instantiate.\n\t * - Invokes $controller() service\n\t *   - Calls $injector.instantiate with controller constructor\n\t * - Annotate constructor\n\t * - Undecorate $injector\n\t *\n\t * returns an array of strings, which are the arguments of the controller expression\n\t */\n\tfunction annotateController(controllerExpression) {\n\t    var $injector = coreservices_1.services.$injector;\n\t    var $controller = $injector.get(\"$controller\");\n\t    var oldInstantiate = $injector.instantiate;\n\t    try {\n\t        var deps_1;\n\t        $injector.instantiate = function fakeInstantiate(constructorFunction) {\n\t            $injector.instantiate = oldInstantiate; // Un-decorate ASAP\n\t            deps_1 = $injector.annotate(constructorFunction);\n\t        };\n\t        $controller(controllerExpression, { $scope: {} });\n\t        return deps_1;\n\t    }\n\t    finally {\n\t        $injector.instantiate = oldInstantiate;\n\t    }\n\t}\n\texports.annotateController = annotateController;\n\trunBlock.$inject = ['$injector', '$q'];\n\tfunction runBlock($injector, $q) {\n\t    coreservices_1.services.$injector = $injector;\n\t    coreservices_1.services.$q = $q;\n\t}\n\tapp.run(runBlock);\n\tvar router = null;\n\tng1UIRouter.$inject = ['$locationProvider'];\n\t/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\n\tfunction ng1UIRouter($locationProvider) {\n\t    // Create a new instance of the Router when the ng1UIRouterProvider is initialized\n\t    router = new router_1.UIRouter();\n\t    // Apply ng1 `views` builder to the StateBuilder\n\t    router.stateRegistry.decorator(\"views\", viewsBuilder_1.ng1ViewsBuilder);\n\t    router.viewService.viewConfigFactory('ng1', viewsBuilder_1.ng1ViewConfigFactory);\n\t    // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix\n\t    common_1.bindFunctions($locationProvider, coreservices_1.services.locationConfig, $locationProvider, ['hashPrefix']);\n\t    // Create a LocationService.onChange registry\n\t    var urlListeners = [];\n\t    coreservices_1.services.location.onChange = function (callback) {\n\t        urlListeners.push(callback);\n\t        return function () { return common_1.removeFrom(urlListeners)(callback); };\n\t    };\n\t    this.$get = $get;\n\t    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\n\t    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {\n\t        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n\t        $rootScope.$on(\"$locationChangeSuccess\", function (evt) { return urlListeners.forEach(function (fn) { return fn(evt); }); });\n\t        // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history\n\t        coreservices_1.services.locationConfig.html5Mode = function () {\n\t            var html5Mode = $locationProvider.html5Mode();\n\t            html5Mode = predicates_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n\t            return html5Mode && $sniffer.history;\n\t        };\n\t        coreservices_1.services.template.get = function (url) {\n\t            return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(hof_1.prop(\"data\"));\n\t        };\n\t        // Bind these LocationService functions to $location\n\t        common_1.bindFunctions($location, coreservices_1.services.location, $location, [\"replace\", \"url\", \"path\", \"search\", \"hash\"]);\n\t        // Bind these LocationConfig functions to $location\n\t        common_1.bindFunctions($location, coreservices_1.services.locationConfig, $location, ['port', 'protocol', 'host']);\n\t        // Bind these LocationConfig functions to $browser\n\t        common_1.bindFunctions($browser, coreservices_1.services.locationConfig, $browser, ['baseHref']);\n\t        return router;\n\t    }\n\t}\n\tvar resolveFactory = function () { return ({\n\t    /**\n\t     * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.\n\t     * @param invocables an object, with keys as resolve names and values as injectable functions\n\t     * @param locals key/value pre-resolved data (locals)\n\t     * @param parent a promise for a \"parent resolve\"\n\t     */\n\t    resolve: function (invocables, locals, parent) {\n\t        if (locals === void 0) { locals = {}; }\n\t        var parentNode = new module_1.Node(new module_3.State({ params: {} }));\n\t        var node = new module_1.Node(new module_3.State({ params: {} }));\n\t        var context = new module_2.ResolveContext([parentNode, node]);\n\t        context.addResolvables(module_2.Resolvable.makeResolvables(invocables), node.state);\n\t        var resolveData = function (parentLocals) {\n\t            var rewrap = function (_locals) { return module_2.Resolvable.makeResolvables(common_1.map(_locals, function (local) { return function () { return local; }; })); };\n\t            context.addResolvables(rewrap(parentLocals), parentNode.state);\n\t            context.addResolvables(rewrap(locals), node.state);\n\t            return context.resolvePath();\n\t        };\n\t        return parent ? parent.then(resolveData) : resolveData({});\n\t    }\n\t}); };\n\tfunction $stateParamsFactory(ng1UIRouter) {\n\t    return ng1UIRouter.globals.params;\n\t}\n\t// The 'ui.router' ng1 module depends on 'ui.router.init' module.\n\tangular.module('ui.router.init', []).provider(\"ng1UIRouter\", ng1UIRouter);\n\t// This effectively calls $get() to init when we enter runtime\n\tangular.module('ui.router.init').run(['ng1UIRouter', function (ng1UIRouter) { }]);\n\t// $urlMatcherFactory service and $urlMatcherFactoryProvider\n\tangular.module('ui.router.util').provider('$urlMatcherFactory', ['ng1UIRouterProvider', function () { return router.urlMatcherFactory; }]);\n\tangular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);\n\t// $urlRouter service and $urlRouterProvider\n\tfunction getUrlRouterProvider() {\n\t    router.urlRouterProvider[\"$get\"] = function () {\n\t        router.urlRouter.update(true);\n\t        if (!this.interceptDeferred)\n\t            router.urlRouter.listen();\n\t        return router.urlRouter;\n\t    };\n\t    return router.urlRouterProvider;\n\t}\n\tangular.module('ui.router.router').provider('$urlRouter', ['ng1UIRouterProvider', getUrlRouterProvider]);\n\tangular.module('ui.router.router').run(['$urlRouter', function ($urlRouter) { }]);\n\t// $state service and $stateProvider\n\t// $urlRouter service and $urlRouterProvider\n\tfunction getStateProvider() {\n\t    router.stateProvider[\"$get\"] = function () {\n\t        // Autoflush once we are in runtime\n\t        router.stateRegistry.stateQueue.autoFlush(router.stateService);\n\t        return router.stateService;\n\t    };\n\t    return router.stateProvider;\n\t}\n\tangular.module('ui.router.state').provider('$state', ['ng1UIRouterProvider', getStateProvider]);\n\tangular.module('ui.router.state').run(['$state', function ($state) { }]);\n\t// $stateParams service\n\tangular.module('ui.router.state').factory('$stateParams', ['ng1UIRouter', function (ng1UIRouter) {\n\t        return ng1UIRouter.globals.params;\n\t    }]);\n\t// $transitions service and $transitionsProvider\n\tfunction getTransitionsProvider() {\n\t    loadAllControllerLocals.$inject = ['$transition$'];\n\t    function loadAllControllerLocals($transition$) {\n\t        var loadLocals = function (vc) {\n\t            var node = common_1.find($transition$.treeChanges().to, hof_1.propEq('state', vc.viewDecl.$context));\n\t            // Temporary fix; This whole callback should be nuked when fixing #2662\n\t            if (!node)\n\t                return coreservices_1.services.$q.when();\n\t            var resolveCtx = node.resolveContext;\n\t            var controllerDeps = annotateController(vc.controller);\n\t            var resolvables = resolveCtx.getResolvables();\n\t            function $loadControllerLocals() { }\n\t            $loadControllerLocals.$inject = controllerDeps.filter(function (dep) { return resolvables.hasOwnProperty(dep); });\n\t            // Load any controller resolves that aren't already loaded\n\t            return resolveCtx.invokeLater($loadControllerLocals)\n\t                .then(function () { return vc.locals = common_1.map(resolvables, function (res) { return res.data; }); });\n\t        };\n\t        var loadAllLocals = $transition$.views(\"entering\").filter(function (vc) { return !!vc.controller; }).map(loadLocals);\n\t        return coreservices_1.services.$q.all(loadAllLocals).then(common_1.noop);\n\t    }\n\t    router.transitionService.onFinish({}, loadAllControllerLocals);\n\t    router.transitionService[\"$get\"] = function () { return router.transitionService; };\n\t    return router.transitionService;\n\t}\n\tangular.module('ui.router.state').provider('$transitions', ['ng1UIRouterProvider', getTransitionsProvider]);\n\t// $templateFactory service\n\tangular.module('ui.router.util').factory('$templateFactory', ['ng1UIRouter', function () { return new templateFactory_1.TemplateFactory(); }]);\n\t// The $view service\n\tangular.module('ui.router').factory('$view', function () { return router.viewService; });\n\t// The old $resolve service\n\tangular.module('ui.router').factory('$resolve', resolveFactory);\n\t// $trace service\n\tangular.module(\"ui.router\").service(\"$trace\", function () { return trace_1.trace; });\n\twatchDigests.$inject = ['$rootScope'];\n\tfunction watchDigests($rootScope) {\n\t    $rootScope.$watch(function () { trace_1.trace.approximateDigests++; });\n\t}\n\texports.watchDigests = watchDigests;\n\tangular.module(\"ui.router\").run(watchDigests);\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar strings_1 = __webpack_require__(9);\n\tvar view_1 = __webpack_require__(50);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\tvar trace_1 = __webpack_require__(12);\n\tvar templateFactory_1 = __webpack_require__(55);\n\texports.ng1ViewConfigFactory = function (node, view) { return new Ng1ViewConfig(node, view); };\n\t/**\n\t * This is a [[StateBuilder.builder]] function for angular1 `views`.\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * handles the `views` property with logic specific to angular-ui-router (ng1).\n\t *\n\t * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n\t * and applies the state-level configuration to a view named `$default`.\n\t */\n\tfunction ng1ViewsBuilder(state) {\n\t    var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'], ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'], compKeys = ['component', 'bindings'], nonCompKeys = tplKeys.concat(ctrlKeys), allKeys = compKeys.concat(nonCompKeys);\n\t    var views = {}, viewsObject = state.views || { \"$default\": common_1.pick(state, allKeys) };\n\t    common_1.forEach(viewsObject, function (config, name) {\n\t        // Account for views: { \"\": { template... } }\n\t        name = name || \"$default\";\n\t        // Account for views: { header: \"headerComponent\" }\n\t        if (predicates_1.isString(config))\n\t            config = { component: config };\n\t        if (!Object.keys(config).length)\n\t            return;\n\t        // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)\n\t        if (config.component) {\n\t            if (nonCompKeys.map(function (key) { return predicates_1.isDefined(config[key]); }).reduce(common_1.anyTrueR, false)) {\n\t                throw new Error(\"Cannot combine: \" + compKeys.join(\"|\") + \" with: \" + nonCompKeys.join(\"|\") + \" in stateview: 'name@\" + state.name + \"'\");\n\t            }\n\t            // Dynamically build a template like \"<component-name input1='$resolve.foo'></component-name>\"\n\t            config.templateProvider = ['$injector', function ($injector) {\n\t                    var resolveFor = function (key) { return config.bindings && config.bindings[key] || key; };\n\t                    var prefix = angular.version.minor >= 3 ? \"::\" : \"\";\n\t                    var attrs = getComponentInputs($injector, config.component)\n\t                        .map(function (key) { return (strings_1.kebobString(key) + \"='\" + prefix + \"$resolve.\" + resolveFor(key) + \"'\"); }).join(\" \");\n\t                    var kebobName = strings_1.kebobString(config.component);\n\t                    return \"<\" + kebobName + \" \" + attrs + \"></\" + kebobName + \">\";\n\t                }];\n\t        }\n\t        config.resolveAs = config.resolveAs || '$resolve';\n\t        config.$type = \"ng1\";\n\t        config.$context = state;\n\t        config.$name = name;\n\t        var normalized = view_1.ViewService.normalizeUiViewTarget(config.$context, config.$name);\n\t        config.$uiViewName = normalized.uiViewName;\n\t        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\t        views[name] = config;\n\t    });\n\t    return views;\n\t}\n\texports.ng1ViewsBuilder = ng1ViewsBuilder;\n\t// for ng 1.2 style, process the scope: { input: \"=foo\" } object\n\tvar scopeBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})\n\t    .map(function (key) { return [key, /^[=<](.*)/.exec(bindingsObj[key])]; })\n\t    .filter(function (tuple) { return predicates_1.isDefined(tuple[1]); })\n\t    .map(function (tuple) { return tuple[1][1] || tuple[0]; }); };\n\t// for ng 1.3+ bindToController or 1.5 component style, process a $$bindings object\n\tvar bindToCtrlBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})\n\t    .filter(function (key) { return !!/[=<]/.exec(bindingsObj[key].mode); })\n\t    .map(function (key) { return bindingsObj[key].attrName; }); };\n\t// Given a directive definition, find its object input attributes\n\t// Use different properties, depending on the type of directive (component, bindToController, normal)\n\tvar getBindings = function (def) {\n\t    if (predicates_1.isObject(def.bindToController))\n\t        return scopeBindings(def.bindToController);\n\t    if (def.$$bindings && def.$$bindings.bindToController)\n\t        return bindToCtrlBindings(def.$$bindings.bindToController);\n\t    if (def.$$isolateBindings)\n\t        return bindToCtrlBindings(def.$$isolateBindings);\n\t    return scopeBindings(def.scope);\n\t};\n\t// Gets all the directive(s)' inputs ('=' and '<')\n\tfunction getComponentInputs($injector, name) {\n\t    var cmpDefs = $injector.get(name + \"Directive\"); // could be multiple\n\t    if (!cmpDefs || !cmpDefs.length)\n\t        throw new Error(\"Unable to find component named '\" + name + \"'\");\n\t    return cmpDefs.map(getBindings).reduce(common_1.unnestR, []);\n\t}\n\tvar Ng1ViewConfig = (function () {\n\t    function Ng1ViewConfig(node, viewDecl) {\n\t        this.node = node;\n\t        this.viewDecl = viewDecl;\n\t        this.loaded = false;\n\t    }\n\t    Ng1ViewConfig.prototype.load = function () {\n\t        var _this = this;\n\t        var $q = coreservices_1.services.$q;\n\t        if (!this.hasTemplate())\n\t            throw new Error(\"No template configuration specified for '\" + this.viewDecl.$uiViewName + \"@\" + this.viewDecl.$uiViewContextAnchor + \"'\");\n\t        var injector = this.node.resolveContext;\n\t        var params = this.node.paramValues;\n\t        var promises = {\n\t            template: $q.when(this.getTemplate(params, new templateFactory_1.TemplateFactory(), injector)),\n\t            controller: $q.when(this.getController(injector))\n\t        };\n\t        return $q.all(promises).then(function (results) {\n\t            trace_1.trace.traceViewServiceEvent(\"Loaded\", _this);\n\t            _this.controller = results.controller;\n\t            _this.template = results.template;\n\t        });\n\t    };\n\t    /**\n\t     * Checks a view configuration to ensure that it specifies a template.\n\t     *\n\t     * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.\n\t     */\n\t    Ng1ViewConfig.prototype.hasTemplate = function () {\n\t        return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);\n\t    };\n\t    Ng1ViewConfig.prototype.getTemplate = function (params, $factory, injector) {\n\t        return $factory.fromConfig(this.viewDecl, params, injector.invokeLater.bind(injector));\n\t    };\n\t    /**\n\t     * Gets the controller for a view configuration.\n\t     *\n\t     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n\t     */\n\t    Ng1ViewConfig.prototype.getController = function (injector) {\n\t        //* @param {Object} locals A context object from transition.context() to invoke a function in the correct context\n\t        var provider = this.viewDecl.controllerProvider;\n\t        return predicates_1.isInjectable(provider) ? injector.invokeLater(provider, {}) : this.viewDecl.controller;\n\t    };\n\t    return Ng1ViewConfig;\n\t}());\n\texports.Ng1ViewConfig = Ng1ViewConfig;\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module view */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(6);\n\t/**\n\t * Service which manages loading of templates from a ViewConfig.\n\t */\n\tvar TemplateFactory = (function () {\n\t    function TemplateFactory() {\n\t    }\n\t    /**\n\t     * Creates a template from a configuration object.\n\t     *\n\t     * @param config Configuration object for which to load a template.\n\t     * The following properties are search in the specified order, and the first one\n\t     * that is defined is used to create the template:\n\t     *\n\t     * @param params  Parameters to pass to the template function.\n\t     * @param injectFn Function to which an injectable function may be passed.\n\t     *        If templateProvider is defined, this injectFn will be used to invoke it.\n\t     *\n\t     * @return {string|object}  The template html as a string, or a promise for\n\t     * that string,or `null` if no template is configured.\n\t     */\n\t    TemplateFactory.prototype.fromConfig = function (config, params, injectFn) {\n\t        return (predicates_1.isDefined(config.template) ? this.fromString(config.template, params) :\n\t            predicates_1.isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n\t                predicates_1.isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, injectFn) :\n\t                    null);\n\t    };\n\t    ;\n\t    /**\n\t     * Creates a template from a string or a function returning a string.\n\t     *\n\t     * @param template html template as a string or function that returns an html template as a string.\n\t     * @param params Parameters to pass to the template function.\n\t     *\n\t     * @return {string|object} The template html as a string, or a promise for that\n\t     * string.\n\t     */\n\t    TemplateFactory.prototype.fromString = function (template, params) {\n\t        return predicates_1.isFunction(template) ? template(params) : template;\n\t    };\n\t    ;\n\t    /**\n\t     * Loads a template from the a URL via `$http` and `$templateCache`.\n\t     *\n\t     * @param {string|Function} url url of the template to load, or a function\n\t     * that returns a url.\n\t     * @param {Object} params Parameters to pass to the url function.\n\t     * @return {string|Promise.<string>} The template html as a string, or a promise\n\t     * for that string.\n\t     */\n\t    TemplateFactory.prototype.fromUrl = function (url, params) {\n\t        if (predicates_1.isFunction(url))\n\t            url = url(params);\n\t        if (url == null)\n\t            return null;\n\t        return coreservices_1.services.template.get(url);\n\t    };\n\t    ;\n\t    /**\n\t     * Creates a template by invoking an injectable provider function.\n\t     *\n\t     * @param provider Function to invoke via `locals`\n\t     * @param {Function} injectFn a function used to invoke the template provider\n\t     * @return {string|Promise.<string>} The template html as a string, or a promise\n\t     * for that string.\n\t     */\n\t    TemplateFactory.prototype.fromProvider = function (provider, params, injectFn) {\n\t        return injectFn(provider);\n\t    };\n\t    ;\n\t    return TemplateFactory;\n\t}());\n\texports.TemplateFactory = TemplateFactory;\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * These are the UI-Router angular 1 directives.\n\t *\n\t * These directives are used in templates to create viewports and navigate to states\n\t *\n\t * @preferred @module ng1_directives\n\t */ /** for typedoc */\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(5);\n\t/** @hidden */\n\tfunction parseStateRef(ref, current) {\n\t    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n\t    if (preparsed)\n\t        ref = current + '(' + preparsed[1] + ')';\n\t    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n\t    if (!parsed || parsed.length !== 4)\n\t        throw new Error(\"Invalid state ref '\" + ref + \"'\");\n\t    return { state: parsed[1], paramExpr: parsed[3] || null };\n\t}\n\t/** @hidden */\n\tfunction stateContext(el) {\n\t    var $uiView = el.parent().inheritedData('$uiView');\n\t    var context = hof_1.parse('$cfg.node.state')($uiView);\n\t    return context && context.name ? context : undefined;\n\t}\n\t/** @hidden */\n\tfunction getTypeInfo(el) {\n\t    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n\t    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n\t    var isForm = el[0].nodeName === \"FORM\";\n\t    return {\n\t        attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n\t        isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n\t        clickable: !isForm\n\t    };\n\t}\n\t/** @hidden */\n\tfunction clickHook(el, $state, $timeout, type, current) {\n\t    return function (e) {\n\t        var button = e.which || e.button, target = current();\n\t        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n\t            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n\t            var transition = $timeout(function () {\n\t                $state.go(target.state, target.params, target.options);\n\t            });\n\t            e.preventDefault();\n\t            // if the state has no URL, ignore one preventDefault from the <a> directive.\n\t            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\n\t            e.preventDefault = function () {\n\t                if (ignorePreventDefaultCount-- <= 0)\n\t                    $timeout.cancel(transition);\n\t            };\n\t        }\n\t    };\n\t}\n\t/** @hidden */\n\tfunction defaultOpts(el, $state) {\n\t    return { relative: stateContext(el) || $state.$current, inherit: true };\n\t}\n\t/**\n\t * `ui-sref`: A directive for linking to a state\n\t *\n\t * A directive that binds a link (`<a>` tag) to a state. If the state has an associated\n\t * URL, the directive will automatically generate & update the `href` attribute via\n\t * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking\n\t * the link will trigger a state transition with optional parameters.\n\t *\n\t * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n\t * handled natively by the browser.\n\t *\n\t * You can also use relative state paths within ui-sref, just like the relative\n\t * paths passed to `$state.go()`. You just need to be aware that the path is relative\n\t * to the state that the link lives in, in other words the state that loaded the\n\t * template containing the link.\n\t *\n\t * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}\n\t * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,\n\t * and `reload`.\n\t *\n\t * Here's an example of how you'd use ui-sref and how it would compile. If you have the\n\t * following template:\n\t *\n\t * @example\n\t * ```html\n\t *\n\t * <pre>\n\t * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n\t *\n\t * <ul>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n\t *     </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n\t *\n\t * ```html\n\t *\n\t * <pre>\n\t * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n\t *\n\t * <ul>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n\t *     </li>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n\t *     </li>\n\t *     <li ng-repeat=\"contact in contacts\">\n\t *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n\t *     </li>\n\t * </ul>\n\t *\n\t * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n\t * </pre>\n\t * ```\n\t *\n\t * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n\t * @param {Object} ui-sref-opts options to pass to [[StateService.go]]\n\t */\n\tvar uiSrefNg1 = ['$state', '$timeout',\n\t    function $StateRefDirective($state, $timeout) {\n\t        return {\n\t            restrict: 'A',\n\t            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n\t            link: function (scope, element, attrs, uiSrefActive) {\n\t                var ref = parseStateRef(attrs.uiSref, $state.current.name);\n\t                var def = { state: ref.state, href: null, params: null, options: null };\n\t                var type = getTypeInfo(element);\n\t                var active = uiSrefActive[1] || uiSrefActive[0];\n\t                var unlinkInfoFn = null;\n\t                def.options = common_1.extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\t                var update = function (val) {\n\t                    if (val)\n\t                        def.params = angular.copy(val);\n\t                    def.href = $state.href(ref.state, def.params, def.options);\n\t                    if (unlinkInfoFn)\n\t                        unlinkInfoFn();\n\t                    if (active)\n\t                        unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n\t                    if (def.href !== null)\n\t                        attrs.$set(type.attr, def.href);\n\t                };\n\t                if (ref.paramExpr) {\n\t                    scope.$watch(ref.paramExpr, function (val) { if (val !== def.params)\n\t                        update(val); }, true);\n\t                    def.params = angular.copy(scope.$eval(ref.paramExpr));\n\t                }\n\t                update();\n\t                if (!type.clickable)\n\t                    return;\n\t                element.bind(\"click\", clickHook(element, $state, $timeout, type, function () { return def; }));\n\t            }\n\t        };\n\t    }];\n\t/**\n\t * `ui-state`: A dynamic version of `ui-sref`\n\t *\n\t * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n\t * params and override options.\n\t *\n\t * @example\n\t * ```html\n\t *\n\t * <li ng-repeat=\"nav in navlinks\">\n\t *   <a ui-state=\"nav.statename\">{{nav.description}}</a>\n\t * </li>\n\t *\n\t * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n\t * @param {Object} ui-state-params params to pass to [[StateService.href]]\n\t * @param {Object} ui-state-opts options to pass to [[StateService.go]]\n\t */\n\tvar uiStateNg1 = ['$state', '$timeout',\n\t    function $StateRefDynamicDirective($state, $timeout) {\n\t        return {\n\t            restrict: 'A',\n\t            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n\t            link: function (scope, element, attrs, uiSrefActive) {\n\t                var type = getTypeInfo(element);\n\t                var active = uiSrefActive[1] || uiSrefActive[0];\n\t                var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n\t                var watch = '[' + group.map(function (val) { return val || 'null'; }).join(', ') + ']';\n\t                var def = { state: null, params: null, options: null, href: null };\n\t                var unlinkInfoFn = null;\n\t                function runStateRefLink(group) {\n\t                    def.state = group[0];\n\t                    def.params = group[1];\n\t                    def.options = group[2];\n\t                    def.href = $state.href(def.state, def.params, def.options);\n\t                    if (unlinkInfoFn)\n\t                        unlinkInfoFn();\n\t                    if (active)\n\t                        unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n\t                    if (def.href)\n\t                        attrs.$set(type.attr, def.href);\n\t                }\n\t                scope.$watch(watch, runStateRefLink, true);\n\t                runStateRefLink(scope.$eval(watch));\n\t                if (!type.clickable)\n\t                    return;\n\t                element.bind(\"click\", clickHook(element, $state, $timeout, type, function () { return def; }));\n\t            }\n\t        };\n\t    }];\n\t/**\n\t * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n\t *\n\t * A directive working alongside ui-sref to add classes to an element when the\n\t * related ui-sref directive's state is active, and removing them when it is inactive.\n\t * The primary use-case is to simplify the special appearance of navigation menus\n\t * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n\t * distinguishing it from the inactive menu items.\n\t *\n\t * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n\t * ui-sref-active found at the same level or above the ui-sref will be used.\n\t *\n\t * Will activate when the ui-sref's target state or any child state is active. If you\n\t * need to activate only when the ui-sref target state is active and *not* any of\n\t * it's children, then you will use ui-sref-active-eq\n\t *\n\t * Given the following template:\n\t * @example\n\t * ```html\n\t *\n\t * <pre>\n\t * <ul>\n\t *   <li ui-sref-active=\"active\" class=\"item\">\n\t *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n\t *   </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t *\n\t * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n\t * the resulting HTML will appear as (note the 'active' class):\n\t *\n\t * ```html\n\t *\n\t * <pre>\n\t * <ul>\n\t *   <li ui-sref-active=\"active\" class=\"item active\">\n\t *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n\t *   </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t * The class name is interpolated **once** during the directives link time (any further changes to the\n\t * interpolated value are ignored).\n\t *\n\t * Multiple classes may be specified in a space-separated format:\n\t *\n\t * ```html\n\t * <pre>\n\t * <ul>\n\t *   <li ui-sref-active='class1 class2 class3'>\n\t *     <a ui-sref=\"app.user\">link</a>\n\t *   </li>\n\t * </ul>\n\t * </pre>\n\t * ```\n\t *\n\t * It is also possible to pass ui-sref-active an expression that evaluates\n\t * to an object hash, whose keys represent active class names and whose\n\t * values represent the respective state names/globs.\n\t * ui-sref-active will match if the current active state **includes** any of\n\t * the specified state names/globs, even the abstract ones.\n\t *\n\t * Given the following template, with \"admin\" being an abstract state:\n\t * @example\n\t * ```html\n\t *\n\t * <pre>\n\t * <div ui-sref-active=\"{'active': 'admin.*'}\">\n\t *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n\t * </div>\n\t * </pre>\n\t * ```\n\t *\n\t * When the current state is \"admin.roles\" the \"active\" class will be applied\n\t * to both the <div> and <a> elements. It is important to note that the state\n\t * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n\t */\n\tvar uiSrefActiveNg1 = ['$state', '$stateParams', '$interpolate', '$transitions',\n\t    function $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions) {\n\t        return {\n\t            restrict: \"A\",\n\t            controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n\t                    var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\n\t                    // There probably isn't much point in $observing this\n\t                    // uiSrefActive and uiSrefActiveEq share the same directive object with some\n\t                    // slight difference in logic routing\n\t                    activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\t                    try {\n\t                        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n\t                    }\n\t                    catch (e) {\n\t                    }\n\t                    uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n\t                    if (predicates_1.isObject(uiSrefActive)) {\n\t                        common_1.forEach(uiSrefActive, function (stateOrName, activeClass) {\n\t                            if (predicates_1.isString(stateOrName)) {\n\t                                var ref = parseStateRef(stateOrName, $state.current.name);\n\t                                addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n\t                            }\n\t                        });\n\t                    }\n\t                    // Allow uiSref to communicate with uiSrefActive[Equals]\n\t                    this.$$addStateInfo = function (newState, newParams) {\n\t                        // we already got an explicit state provided by ui-sref-active, so we\n\t                        // shadow the one that comes from ui-sref\n\t                        if (predicates_1.isObject(uiSrefActive) && states.length > 0) {\n\t                            return;\n\t                        }\n\t                        var deregister = addState(newState, newParams, uiSrefActive);\n\t                        update();\n\t                        return deregister;\n\t                    };\n\t                    $scope.$on('$stateChangeSuccess', update);\n\t                    var updateAfterTransition = ['$transition$', function ($transition$) { $transition$.promise.then(update); }];\n\t                    var deregisterFn = $transitions.onStart({}, updateAfterTransition);\n\t                    $scope.$on('$destroy', deregisterFn);\n\t                    function addState(stateName, stateParams, activeClass) {\n\t                        var state = $state.get(stateName, stateContext($element));\n\t                        var stateHash = createStateHash(stateName, stateParams);\n\t                        var stateInfo = {\n\t                            state: state || { name: stateName },\n\t                            params: stateParams,\n\t                            hash: stateHash\n\t                        };\n\t                        states.push(stateInfo);\n\t                        activeClasses[stateHash] = activeClass;\n\t                        return function removeState() {\n\t                            var idx = states.indexOf(stateInfo);\n\t                            if (idx !== -1)\n\t                                states.splice(idx, 1);\n\t                        };\n\t                    }\n\t                    /**\n\t                     * @param {string} state\n\t                     * @param {Object|string} [params]\n\t                     * @return {string}\n\t                     */\n\t                    function createStateHash(state, params) {\n\t                        if (!predicates_1.isString(state)) {\n\t                            throw new Error('state should be a string');\n\t                        }\n\t                        if (predicates_1.isObject(params)) {\n\t                            return state + common_1.toJson(params);\n\t                        }\n\t                        params = $scope.$eval(params);\n\t                        if (predicates_1.isObject(params)) {\n\t                            return state + common_1.toJson(params);\n\t                        }\n\t                        return state;\n\t                    }\n\t                    // Update route state\n\t                    function update() {\n\t                        for (var i = 0; i < states.length; i++) {\n\t                            if (anyMatch(states[i].state, states[i].params)) {\n\t                                addClass($element, activeClasses[states[i].hash]);\n\t                            }\n\t                            else {\n\t                                removeClass($element, activeClasses[states[i].hash]);\n\t                            }\n\t                            if (exactMatch(states[i].state, states[i].params)) {\n\t                                addClass($element, activeEqClass);\n\t                            }\n\t                            else {\n\t                                removeClass($element, activeEqClass);\n\t                            }\n\t                        }\n\t                    }\n\t                    function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\n\t                    function removeClass(el, className) { el.removeClass(className); }\n\t                    function anyMatch(state, params) { return $state.includes(state.name, params); }\n\t                    function exactMatch(state, params) { return $state.is(state.name, params); }\n\t                    update();\n\t                }]\n\t        };\n\t    }];\n\tangular.module('ui.router.state')\n\t    .directive('uiSref', uiSrefNg1)\n\t    .directive('uiSrefActive', uiSrefActiveNg1)\n\t    .directive('uiSrefActiveEq', uiSrefActiveNg1)\n\t    .directive('uiState', uiStateNg1);\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\t/**\n\t * @ngdoc filter\n\t * @name ui.router.state.filter:isState\n\t *\n\t * @requires ui.router.state.$state\n\t *\n\t * @description\n\t * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n\t */\n\t$IsStateFilter.$inject = ['$state'];\n\tfunction $IsStateFilter($state) {\n\t    var isFilter = function (state, params, options) {\n\t        return $state.is(state, params, options);\n\t    };\n\t    isFilter.$stateful = true;\n\t    return isFilter;\n\t}\n\texports.$IsStateFilter = $IsStateFilter;\n\t/**\n\t * @ngdoc filter\n\t * @name ui.router.state.filter:includedByState\n\t *\n\t * @requires ui.router.state.$state\n\t *\n\t * @description\n\t * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n\t */\n\t$IncludedByStateFilter.$inject = ['$state'];\n\tfunction $IncludedByStateFilter($state) {\n\t    var includesFilter = function (state, params, options) {\n\t        return $state.includes(state, params, options);\n\t    };\n\t    includesFilter.$stateful = true;\n\t    return includesFilter;\n\t}\n\texports.$IncludedByStateFilter = $IncludedByStateFilter;\n\tangular.module('ui.router.state')\n\t    .filter('isState', $IsStateFilter)\n\t    .filter('includedByState', $IncludedByStateFilter);\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module ng1_directives */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(3);\n\tvar predicates_1 = __webpack_require__(4);\n\tvar trace_1 = __webpack_require__(12);\n\tvar rejectFactory_1 = __webpack_require__(10);\n\tvar hof_1 = __webpack_require__(5);\n\tvar strings_1 = __webpack_require__(9);\n\t/**\n\t * `ui-view`: A viewport directive which is filled in by a view from the active state.\n\t *\n\t * @param {string=} name A view name. The name should be unique amongst the other views in the\n\t * same state. You can have views of the same name that live in different states.\n\t *\n\t * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n\t * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n\t * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n\t * scroll ui-view elements into view when they are populated during a state activation.\n\t *\n\t * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n\t * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n\t *\n\t * @param {string=} onload Expression to evaluate whenever the view updates.\n\t *\n\t * A view can be unnamed or named.\n\t * @example\n\t * ```html\n\t *\n\t * <!-- Unnamed -->\n\t * <div ui-view></div>\n\t *\n\t * <!-- Named -->\n\t * <div ui-view=\"viewName\"></div>\n\t * ```\n\t *\n\t * You can only have one unnamed view within any template (or root html). If you are only using a\n\t * single view and it is unnamed then you can populate it like so:\n\t * ```\n\t *\n\t * <div ui-view></div>\n\t * $stateProvider.state(\"home\", {\n\t *   template: \"<h1>HELLO!</h1>\"\n\t * })\n\t * ```\n\t *\n\t * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n\t * config property, by name, in this case an empty name:\n\t * ```js\n\t *\n\t * $stateProvider.state(\"home\", {\n\t *   views: {\n\t *     \"\": {\n\t *       template: \"<h1>HELLO!</h1>\"\n\t *     }\n\t *   }\n\t * })\n\t * ```\n\t *\n\t * But typically you'll only use the views property if you name your view or have more than one view\n\t * in the same template. There's not really a compelling reason to name a view if its the only one,\n\t * but you could if you wanted, like so:\n\t *\n\t * ```html\n\t *\n\t * <div ui-view=\"main\"></div>\n\t * ```\n\t *\n\t * ```js\n\t *\n\t * $stateProvider.state(\"home\", {\n\t *   views: {\n\t *     \"main\": {\n\t *       template: \"<h1>HELLO!</h1>\"\n\t *     }\n\t *   }\n\t * })\n\t * ```\n\t *\n\t * Really though, you'll use views to set up multiple views:\n\t * ```html\n\t *\n\t * <div ui-view></div>\n\t * <div ui-view=\"chart\"></div>\n\t * <div ui-view=\"data\"></div>\n\t * ```\n\t *\n\t * ```js\n\t * $stateProvider.state(\"home\", {\n\t *   views: {\n\t *     \"\": {\n\t *       template: \"<h1>HELLO!</h1>\"\n\t *     },\n\t *     \"chart\": {\n\t *       template: \"<chart_thing/>\"\n\t *     },\n\t *     \"data\": {\n\t *       template: \"<data_thing/>\"\n\t *     }\n\t *   }\n\t * })\n\t * ```\n\t *\n\t * Examples for `autoscroll`:\n\t *\n\t * ```html\n\t *\n\t * <!-- If autoscroll present with no expression,\n\t *      then scroll ui-view into view -->\n\t * <ui-view autoscroll/>\n\t *\n\t * <!-- If autoscroll present with valid expression,\n\t *      then scroll ui-view into view if expression evaluates to true -->\n\t * <ui-view autoscroll='true'/>\n\t * <ui-view autoscroll='false'/>\n\t * <ui-view autoscroll='scopeVariable'/>\n\t * ```\n\t *\n\t * Resolve data:\n\t *\n\t * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n\t * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n\t *\n\t * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n\t * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n\t * depends on `$resolve` data.\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * $stateProvider.state('home', {\n\t *   template: '<my-component user=\"$resolve.user\"></my-component>',\n\t *   resolve: {\n\t *     user: function(UserService) { return UserService.fetchUser(); }\n\t *   }\n\t * });\n\t * ```\n\t */\n\tvar uiViewNg1 = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',\n\t    function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {\n\t        function getRenderer(attrs, scope) {\n\t            return {\n\t                enter: function (element, target, cb) {\n\t                    if (angular.version.minor > 2) {\n\t                        $animate.enter(element, null, target).then(cb);\n\t                    }\n\t                    else {\n\t                        $animate.enter(element, null, target, cb);\n\t                    }\n\t                },\n\t                leave: function (element, cb) {\n\t                    if (angular.version.minor > 2) {\n\t                        $animate.leave(element).then(cb);\n\t                    }\n\t                    else {\n\t                        $animate.leave(element, cb);\n\t                    }\n\t                }\n\t            };\n\t        }\n\t        function configsEqual(config1, config2) {\n\t            return config1 === config2;\n\t        }\n\t        var rootData = {\n\t            $cfg: { viewDecl: { $context: $view.rootContext() } },\n\t            $uiView: {}\n\t        };\n\t        var directive = {\n\t            count: 0,\n\t            restrict: 'ECA',\n\t            terminal: true,\n\t            priority: 400,\n\t            transclude: 'element',\n\t            compile: function (tElement, tAttrs, $transclude) {\n\t                return function (scope, $element, attrs) {\n\t                    var previousEl, currentEl, currentScope, unregister, onloadExp = attrs.onload || '', autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope), viewConfig = undefined, inherited = $element.inheritedData('$uiView') || rootData, name = $interpolate(attrs.uiView || attrs.name || '')(scope) || '$default';\n\t                    var activeUIView = {\n\t                        id: directive.count++,\n\t                        name: name,\n\t                        fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name,\n\t                        config: null,\n\t                        configUpdated: configUpdatedCallback,\n\t                        get creationContext() {\n\t                            return hof_1.parse('$cfg.viewDecl.$context')(inherited);\n\t                        }\n\t                    };\n\t                    trace_1.trace.traceUiViewEvent(\"Linking\", activeUIView);\n\t                    function configUpdatedCallback(config) {\n\t                        if (configsEqual(viewConfig, config))\n\t                            return;\n\t                        trace_1.trace.traceUiViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\n\t                        viewConfig = config;\n\t                        updateView(config);\n\t                    }\n\t                    $element.data('$uiView', { $uiView: activeUIView });\n\t                    updateView();\n\t                    unregister = $view.registerUiView(activeUIView);\n\t                    scope.$on(\"$destroy\", function () {\n\t                        trace_1.trace.traceUiViewEvent(\"Destroying/Unregistering\", activeUIView);\n\t                        unregister();\n\t                    });\n\t                    function cleanupLastView() {\n\t                        if (previousEl) {\n\t                            trace_1.trace.traceUiViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\n\t                            previousEl.remove();\n\t                            previousEl = null;\n\t                        }\n\t                        if (currentScope) {\n\t                            trace_1.trace.traceUiViewEvent(\"Destroying scope\", activeUIView);\n\t                            currentScope.$destroy();\n\t                            currentScope = null;\n\t                        }\n\t                        if (currentEl) {\n\t                            var _viewData_1 = currentEl.data('$uiView');\n\t                            trace_1.trace.traceUiViewEvent(\"Animate out\", _viewData_1);\n\t                            renderer.leave(currentEl, function () {\n\t                                _viewData_1.$$animLeave.resolve();\n\t                                previousEl = null;\n\t                            });\n\t                            previousEl = currentEl;\n\t                            currentEl = null;\n\t                        }\n\t                    }\n\t                    function updateView(config) {\n\t                        var newScope = scope.$new();\n\t                        trace_1.trace.traceUiViewScopeCreated(activeUIView, newScope);\n\t                        var animEnter = $q.defer(), animLeave = $q.defer();\n\t                        var $uiViewData = {\n\t                            $cfg: config,\n\t                            $uiView: activeUIView,\n\t                            $animEnter: animEnter.promise,\n\t                            $animLeave: animLeave.promise,\n\t                            $$animLeave: animLeave\n\t                        };\n\t                        var cloned = $transclude(newScope, function (clone) {\n\t                            renderer.enter(clone.data('$uiView', $uiViewData), $element, function onUiViewEnter() {\n\t                                animEnter.resolve();\n\t                                if (currentScope)\n\t                                    currentScope.$emit('$viewContentAnimationEnded');\n\t                                if (predicates_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n\t                                    $uiViewScroll(clone);\n\t                                }\n\t                            });\n\t                            cleanupLastView();\n\t                        });\n\t                        currentEl = cloned;\n\t                        currentScope = newScope;\n\t                        /**\n\t                         * @ngdoc event\n\t                         * @name ui.router.state.directive:ui-view#$viewContentLoaded\n\t                         * @eventOf ui.router.state.directive:ui-view\n\t                         * @eventType emits on ui-view directive scope\n\t                         * @description           *\n\t                         * Fired once the view is **loaded**, *after* the DOM is rendered.\n\t                         *\n\t                         * @param {Object} event Event object.\n\t                         */\n\t                        currentScope.$emit('$viewContentLoaded', config || viewConfig);\n\t                        currentScope.$eval(onloadExp);\n\t                    }\n\t                };\n\t            }\n\t        };\n\t        return directive;\n\t    }];\n\t$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];\n\t/** @hidden */\n\tfunction $ViewDirectiveFill($compile, $controller, $transitions, $view, $timeout) {\n\t    var getControllerAs = hof_1.parse('viewDecl.controllerAs');\n\t    var getResolveAs = hof_1.parse('viewDecl.resolveAs');\n\t    var getResolveContext = hof_1.parse('node.resolveContext');\n\t    return {\n\t        restrict: 'ECA',\n\t        priority: -400,\n\t        compile: function (tElement) {\n\t            var initial = tElement.html();\n\t            return function (scope, $element) {\n\t                var data = $element.data('$uiView');\n\t                if (!data)\n\t                    return;\n\t                var cfg = data.$cfg || { viewDecl: {} };\n\t                $element.html(cfg.template || initial);\n\t                trace_1.trace.traceUiViewFill(data.$uiView, $element.html());\n\t                var link = $compile($element.contents());\n\t                var controller = cfg.controller;\n\t                var controllerAs = getControllerAs(cfg);\n\t                var resolveAs = getResolveAs(cfg);\n\t                var resolveCtx = getResolveContext(cfg);\n\t                var locals = resolveCtx && common_1.map(resolveCtx.getResolvables(), function (r) { return r.data; });\n\t                scope[resolveAs] = locals;\n\t                if (controller) {\n\t                    var controllerInstance = $controller(controller, common_1.extend({}, locals, { $scope: scope, $element: $element }));\n\t                    if (controllerAs) {\n\t                        scope[controllerAs] = controllerInstance;\n\t                        scope[controllerAs][resolveAs] = locals;\n\t                    }\n\t                    // TODO: Use $view service as a central point for registering component-level hooks\n\t                    // Then, when a component is created, tell the $view service, so it can invoke hooks\n\t                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n\t                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n\t                    $element.data('$ngControllerController', controllerInstance);\n\t                    $element.children().data('$ngControllerController', controllerInstance);\n\t                    registerControllerCallbacks($transitions, controllerInstance, scope, cfg);\n\t                }\n\t                // Wait for the component to appear in the DOM\n\t                if (predicates_1.isString(cfg.viewDecl.component)) {\n\t                    var cmp_1 = cfg.viewDecl.component;\n\t                    var kebobName_1 = strings_1.kebobString(cmp_1);\n\t                    var getComponentController = function () {\n\t                        var directiveEl = [].slice.call($element[0].children)\n\t                            .filter(function (el) { return el && el.tagName && el.tagName.toLowerCase() === kebobName_1; });\n\t                        return directiveEl && angular.element(directiveEl).data(\"$\" + cmp_1 + \"Controller\");\n\t                    };\n\t                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {\n\t                        if (!ctrlInstance)\n\t                            return;\n\t                        registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);\n\t                        deregisterWatch_1();\n\t                    });\n\t                }\n\t                link(scope);\n\t            };\n\t        }\n\t    };\n\t}\n\t/** @hidden */\n\tvar hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';\n\t/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\n\tfunction registerControllerCallbacks($transitions, controllerInstance, $scope, cfg) {\n\t    // Call $onInit() ASAP\n\t    if (predicates_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl))\n\t        controllerInstance.$onInit();\n\t    var hookOptions = { bind: controllerInstance };\n\t    // Add component-level hook for onParamsChange\n\t    if (predicates_1.isFunction(controllerInstance.uiOnParamsChanged)) {\n\t        // Fire callback on any successful transition\n\t        var paramsUpdated_1 = function ($transition$) {\n\t            var ctx = cfg.node.resolveContext;\n\t            var viewCreationTrans = ctx.getResolvables()['$transition$'].data;\n\t            // Exit early if the $transition$ is the same as the view was created within.\n\t            // Exit early if the $transition$ will exit the state the view is for.\n\t            if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(cfg.node.state.self) !== -1)\n\t                return;\n\t            var toParams = $transition$.params(\"to\");\n\t            var fromParams = $transition$.params(\"from\");\n\t            var toSchema = $transition$.treeChanges().to.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);\n\t            var fromSchema = $transition$.treeChanges().from.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);\n\t            // Find the to params that have different values than the from params\n\t            var changedToParams = toSchema.filter(function (param) {\n\t                var idx = fromSchema.indexOf(param);\n\t                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n\t            });\n\t            // Only trigger callback if a to param has changed or is new\n\t            if (changedToParams.length) {\n\t                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });\n\t                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n\t                controllerInstance.uiOnParamsChanged(common_1.filter(toParams, function (val, key) { return changedKeys_1.indexOf(key) !== -1; }), $transition$);\n\t            }\n\t        };\n\t        $scope.$on('$destroy', $transitions.onSuccess({}, ['$transition$', paramsUpdated_1]), hookOptions);\n\t        // Fire callback on any IGNORED transition\n\t        var onDynamic = function ($error$, $transition$) {\n\t            if ($error$.type === rejectFactory_1.RejectType.IGNORED)\n\t                paramsUpdated_1($transition$);\n\t        };\n\t        $scope.$on('$destroy', $transitions.onError({}, ['$error$', '$transition$', onDynamic]), hookOptions);\n\t    }\n\t    // Add component-level hook for uiCanExit\n\t    if (predicates_1.isFunction(controllerInstance.uiCanExit)) {\n\t        var criteria = { exiting: cfg.node.state.name };\n\t        $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));\n\t    }\n\t}\n\tangular.module('ui.router.state').directive('uiView', uiViewNg1);\n\tangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.$uiViewScrollProvider\n\t *\n\t * @description\n\t * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n\t */\n\tfunction $ViewScrollProvider() {\n\t    var useAnchorScroll = false;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n\t     * @methodOf ui.router.state.$uiViewScrollProvider\n\t     *\n\t     * @description\n\t     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n\t     * scrolling based on the url anchor.\n\t     */\n\t    this.useAnchorScroll = function () {\n\t        useAnchorScroll = true;\n\t    };\n\t    /**\n\t     * @ngdoc object\n\t     * @name ui.router.state.$uiViewScroll\n\t     *\n\t     * @requires $anchorScroll\n\t     * @requires $timeout\n\t     *\n\t     * @description\n\t     * When called with a jqLite element, it scrolls the element into view (after a\n\t     * `$timeout` so the DOM has time to refresh).\n\t     *\n\t     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n\t     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n\t     */\n\t    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n\t            if (useAnchorScroll) {\n\t                return $anchorScroll;\n\t            }\n\t            return function ($element) {\n\t                return $timeout(function () {\n\t                    $element[0].scrollIntoView();\n\t                }, 0, false);\n\t            };\n\t        }];\n\t}\n\tangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-ui-router.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap a4ffa6d2207b695a9deb\n **/","/**\n * Main entry point for angular 1.x build\n * @module ng1\n */\n/** for typedoc */\n\nexport * from \"./core\";\n\nexport * from \"./ng1/services\";\nexport * from \"./ng1/viewsBuilder\";\n\nimport \"./ng1/stateDirectives\";\nimport \"./ng1/stateFilters\";\nimport \"./ng1/viewDirective\";\nimport \"./ng1/viewScroll\";\n\nexport default \"ui.router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1.ts\n **/","/** @module common */ /** */\n\nexport * from \"./common/module\";\nexport * from \"./params/module\";\nexport * from \"./path/module\";\nexport * from \"./resolve/module\";\nexport * from \"./state/module\";\nexport * from \"./transition/module\";\nexport * from \"./url/module\";\nexport * from \"./view/module\";\nexport * from \"./globals\";\n\nexport { UIRouter } from \"./router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./core.ts\n **/","/** @module common */ /** for typedoc */\nexport * from \"./common\";\nexport * from \"./coreservices\";\nexport * from \"./glob\";\nexport * from \"./hof\";\nexport * from \"./predicates\";\nexport * from \"./queue\";\nexport * from \"./strings\";\nexport * from \"./trace\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/module.ts\n **/","/**\n * Random utility functions used in the UI-Router code\n *\n * @preferred @module common\n */ /** for typedoc */\n\nimport {isFunction, isString, isArray, isRegExp, isDate} from \"./predicates\";\nimport { all, any, not, prop, curry } from \"./hof\";\n\nlet angular = (<any> window).angular || {};\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const copy = angular.copy || _copy;\nexport const forEach = angular.forEach || _forEach;\nexport const extend = angular.extend || _extend;\nexport const equals = angular.equals || _equals;\nexport const identity = (x) => x;\nexport const noop = () => undefined;\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (X) => boolean;\nexport type IInjectable = (Function|any[]);\n\nexport var abstractKey = 'abstract';\n\n/**\n * Binds and copies functions onto an object\n *\n * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n * on the 'to' object.\n *\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * @example\n * ```\n *\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * This example creates a bound version of a service function, and copies it to another object\n * @example\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param from The object which contains the functions to be bound\n * @param to The object which will receive the bound functions\n * @param bindTo The object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n */\nexport function bindFunctions(from, to, bindTo, fnNames: string[] = Object.keys(from)) {\n  return fnNames.filter(name => typeof from[name] === 'function')\n      .forEach(name => to[name] = from[name].bind(bindTo));\n}\n\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent, extra) =>\n    extend(new (extend(function() {}, { prototype: parent }))(), extra);\n\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nconst restArgs = (args, idx = 0) => Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nconst inArray = (array: any[], obj: any) => array.indexOf(obj) !== -1;\n\n/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\nexport const removeFrom = curry((array: any[], obj) => {\n  let idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n});\n\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts = {}, ...defaultsList) {\n  let defaults = merge.apply(null, [{}].concat(defaultsList));\n  return extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n}\n\n/**\n * Merges properties from the list of objects to the destination object.\n * If a property already exists in the destination object, then it is not overwritten.\n */\nexport function merge(dst, ...objs: Object[]) {\n  forEach(objs, function(obj) {\n    forEach(obj, function(value, key) {\n      if (!dst.hasOwnProperty(key)) dst[key] = value;\n    });\n  });\n  return dst;\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo, item) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first, second) {\n  let path = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nexport function equalForKeys(a, b, keys: string[] = Object.keys(a)) {\n  for (var i = 0; i < keys.length; i++) {\n    let k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\ntype PickOmitPredicate = (keys: string[], key) => boolean;\nfunction pickOmitImpl(predicate: PickOmitPredicate, obj) {\n  let objCopy = {}, keys = restArgs(arguments, 2);\n  for (var key in obj) {\n    if (predicate(keys, key)) objCopy[key] = obj[key];\n  }\n  return objCopy;\n}\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj, propNames: string[]): Object;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, 'a', 'b'); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the whitelisted property names\n */\nexport function pick(obj, ...propNames: string[]): Object;\n/** Return a copy of the object only containing the whitelisted properties. */\nexport function pick(obj) { return pickOmitImpl.apply(null, [inArray].concat(restArgs(arguments))); }\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj, propNames: string[]): Object;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, 'a', 'b'); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the blacklisted property names\n */\nexport function omit(obj, ...propNames: string[]): Object;\n/** Return a copy of the object omitting the blacklisted properties. */\nexport function omit(obj) { return pickOmitImpl.apply(null, [not(inArray)].concat(restArgs(arguments))); }\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck(collection: any[], propName: string): any[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection, propName): any {\n  return map(collection, <Mapper<any, string>> prop(propName));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (T, key?) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (T, key?) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: T, callback: Function): T {\n  let arr = isArray(collection), result: any = arr ? [] : {};\n  let accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection, callback) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T,U>(collection: { [key: string]: T }, callback: Mapper<T,U>) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>): { [key: string]: U }\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any): any {\n  let result = isArray(collection) ? [] : {};\n  forEach(collection, (item, i) => result[i] = callback(item, i));\n  return result;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj) => Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem) => isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n/** Reduce function that pushes an object to an array, then returns the array.  Mostly just for [[flattenR]] */\nfunction pushR(arr: any[], obj) { arr.push(obj); return arr; }\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport function assertPredicate<T>(predicate: Predicate<T>, errMsg: (string|Function) = \"assert failure\"): Predicate<T> {\n  return (obj: T) => {\n    if (!predicate(obj)) {\n      throw new Error(isFunction(errMsg) ? (<Function> errMsg)(obj) : errMsg);\n    }\n    return true;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (object) => Object.keys(object).map(key => [ key, object[key]] );\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...arrayArgs: any[]): any[] {\n  if (arrayArgs.length === 0) return [];\n  let length = arrayArgs.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  return Array.apply(null, Array(length)).map((ignored, idx) => arrayArgs.map(arr => arr[idx]));\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key, value;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src, dest) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\nfunction _forEach(obj: (any[]|any), cb, _this) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\nfunction _copyProps(to, from) { Object.keys(from).forEach(key => to[key] = from[key]); return to; }\nfunction _extend(toObj, fromObj);\nfunction _extend(toObj, ...fromObj);\nfunction _extend(toObj, rest) {\n  return restArgs(arguments, 1).filter(identity).reduce(_copyProps, toObj);\n}\n\nfunction _equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  let predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  let key, keys = {};\n  for (key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1, a2) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n//\n//const _addToGroup = (result, keyFn) => (item) =>\n//  (result[keyFn(item)] = result[keyFn(item)] || []).push(item) && result;\n//const groupBy = (array, keyFn) => array.reduce((memo, item) => _addToGroup(memo, keyFn), {});\n//\n//\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/common.ts\n **/","/** Predicates @module common_predicates */ /** */\nimport {and, not, pipe, prop} from \"./hof\";\n\nconst toStr = Object.prototype.toString;\nconst tis = (t) => (x) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = o => o === null;\nexport const isFunction = tis('function');\nexport const isNumber = tis('number');\nexport const isString = tis('string');\nexport const isObject = (x) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate = (x) => toStr.call(x) === '[object Date]';\nexport const isRegExp = (x) => toStr.call(x) === '[object RegExp]';\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val) {\n  if (isArray(val) && val.length) {\n    let head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = and(isObject, pipe(prop('then'), isFunction));\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/predicates.ts\n **/","/**\n * Higher order functions\n *\n * @module common_hof\n */\n\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  let initial_args = [].slice.apply(arguments, [1]);\n  let func_args_length = fn.length;\n\n  function curried(args) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n\n\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  let args = arguments;\n  let start = args.length - 1;\n  return function() {\n    let i = start, result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) => (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, val: any, obj: any) => obj && obj[name] === val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) => pipe.apply(null, name.split(\".\").map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not = (fn) => (...args) => !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1, fn2): Function {\n  return (...args) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1, fn2): Function {\n  return (...args) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1) => (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true);\nexport const any = (fn1) => (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false);\nexport const none: Function = not(any);\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is: (ctor) => (x) => boolean =\n    ctor => obj => (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp) => (x) => boolean =\n    (val) => (other) => val === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?): Function {\n  return (obj: any) => obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x) {\n    for (var i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/hof.ts\n **/","/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n\n/** for typedoc */\n//import {IQService} from \"angular\";\n//import {IInjectorService} from \"angular\";\n\nlet notImplemented = (fnname) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']`);\n};\n\nlet services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n  location: <any> {},\n  locationConfig: <any> {},\n  template: <any> {}\n};\n\n[\"replace\", \"url\", \"path\", \"search\", \"hash\", \"onChange\"]\n    .forEach(key => services.location[key] = notImplemented(key));\n\n[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\" ]\n    .forEach(key => services.locationConfig[key] = notImplemented(key));\n\nexport interface CoreServices {\n  $q; // : IQService;\n  $injector; // : IInjectorService;\n  /** Services related to getting or setting the browser location (url) */\n  location: LocationServices;\n  /** Retrieves configuration for how to construct a URL. */\n  locationConfig: LocationConfig;\n  template: TemplateServices;\n}\n\nexport interface LocationServices {\n  replace(): void;\n  url(newurl: string): string;\n  url(): string;\n  path(): string;\n  search(): string;\n  hash(): string;\n  onChange(callback: Function): Function;\n}\n\nexport interface LocationConfig {\n  port(): number;\n  protocol(): string;\n  host(): string;\n\n  baseHref(): string;\n  html5Mode(): boolean;\n  hashPrefix(): string;\n  hashPrefix(newprefix: string): string;\n}\n\nexport interface TemplateServices {\n  get(url: string): string;\n}\n\n\nexport {services};\n\n\n/** WEBPACK FOOTER **\n ** ./common/coreservices.ts\n **/","/** @module state */ /** for typedoc */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n  }\n\n  matches(name: string) {\n    let segments = name.split('.');\n\n    // match single stars\n    for (let i = 0, l = this.glob.length; i < l; i++) {\n      if (this.glob[i] === '*') segments[i] = '*';\n    }\n\n    // match greedy starts\n    if (this.glob[0] === '**') {\n       segments = segments.slice(segments.indexOf(this.glob[1]));\n       segments.unshift('**');\n    }\n    // match greedy ends\n    if (this.glob[this.glob.length - 1] === '**') {\n       segments.splice(segments.indexOf(this.glob[this.glob.length - 2]) + 1, Number.MAX_VALUE);\n       segments.push('**');\n    }\n    if (this.glob.length != segments.length) return false;\n\n    return segments.join('') === this.glob.join('');\n  }\n\n  static is(text: string) {\n    return text.indexOf('*') > -1;\n  }\n\n  static fromString(text: string) {\n    if (!this.is(text)) return null;\n    return new Glob(text);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/glob.ts\n **/","/** @module common */ /** for typedoc */\n\nexport class Queue<T> {\n  constructor(private _items: T[] = [], private _limit: number = null) { }\n\n  enqueue(item: T) {\n    let items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) items.shift();\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    let current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    let idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/queue.ts\n **/","/** @module common_strings */ /** */\n\nimport {isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject} from \"./predicates\";\nimport {TransitionRejection} from \"../transition/rejectFactory\";\nimport {IInjectable, identity} from \"./common\";\nimport {pattern, is, not, val, invoke} from \"./hof\";\nimport {Transition} from \"../transition/transition\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + \"...\";\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += \" \";\n  return str;\n}\n\nexport const kebobString = (camelCase: string) => camelCase.replace(/([A-Z])/g, $1 => \"-\"+$1.toLowerCase());\n\nfunction _toJson(obj) {\n  return JSON.stringify(obj);\n}\n\nfunction _fromJson(json) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n\n\nfunction promiseToString(p) {\n  if (is(TransitionRejection)(p.reason)) return p.reason.toString();\n  return `Promise(${JSON.stringify(p)})`;\n}\n\nexport function functionToString(fn) {\n  let fnStr = fnToString(fn);\n  let namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  let _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || \"undefined\";\n}\n\n\nlet stringifyPattern = pattern([\n  [not(isDefined),            val(\"undefined\")],\n  [isNull,                    val(\"null\")],\n  [isPromise,                 promiseToString],\n  [is(Transition),            invoke(\"toString\")],\n  [is(Resolvable),            invoke(\"toString\")],\n  [isInjectable,              functionToString],\n  [val(true),                 identity]\n]);\n\nexport function stringify(o) {\n  var seen = [];\n\n  function format(val) {\n    if (isObject(val)) {\n      if (seen.indexOf(val) !== -1) return '[circular ref]';\n      seen.push(val);\n    }\n    return stringifyPattern(val);\n  }\n\n  return JSON.stringify(o, (key, val) => format(val)).replace(/\\\\\"/g, '\"');\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/strings.ts\n **/","/** @module transition */ /** for typedoc */\n\"use strict\";\nimport {extend} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {stringify} from \"../common/strings\";\n\nexport enum RejectType {\n  SUPERSEDED = 2, ABORTED = 3, INVALID = 4, IGNORED = 5\n}\n\nexport class TransitionRejection {\n  type: number;\n  message: string;\n  detail: string;\n  redirected: boolean;\n\n  constructor(type, message, detail) {\n    extend(this, {\n      type: type,\n      message: message,\n      detail: detail\n    });\n  }\n\n  toString() {\n    const detailString = d => d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    let type = this.type, message = this.message, detail = detailString(this.detail);\n    return `TransitionRejection(type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n}\n\n\nexport class RejectFactory {\n  constructor() {}\n  superseded(detail?: any, options?: any) {\n    let message = \"The transition has been superseded by a different transition (see detail).\";\n    let reason = new TransitionRejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      reason.redirected = true;\n    }\n    return extend(services.$q.reject(reason), {reason: reason});\n  }\n\n  redirected(detail?: any) {\n    return this.superseded(detail, {redirected: true});\n  }\n\n  invalid(detail?: any) {\n    let message = \"This transition is invalid (see detail)\";\n    let reason = new TransitionRejection(RejectType.INVALID, message, detail);\n    return extend(services.$q.reject(reason), {reason: reason});\n  }\n\n  ignored(detail?: any) {\n    let message = \"The transition was ignored.\";\n    let reason = new TransitionRejection(RejectType.IGNORED, message, detail);\n    return extend(services.$q.reject(reason), {reason: reason});\n  }\n\n  aborted(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition has been aborted.\";\n    let reason = new TransitionRejection(RejectType.ABORTED, message, detail);\n    return extend(services.$q.reject(reason), {reason: reason});\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/rejectFactory.ts\n **/","/** @module transition */ /** for typedoc */\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {\n    map, find, extend, filter, mergeR, unnest, tail,\n    omit, toJson, abstractKey, arrayTuples, allTrueR, unnestR, identity, anyTrueR\n} from \"../common/common\";\nimport { isObject } from \"../common/predicates\";\nimport { not, prop, propEq, val } from \"../common/hof\";\n\nimport {StateDeclaration, StateOrName} from \"../state/interface\";\nimport {TransitionOptions, TransitionHookOptions, TreeChanges, IHookRegistry, IHookRegistration, IHookGetter} from \"./interface\";\n\nimport {TransitionHook, HookRegistry, matchState, HookBuilder, RejectFactory} from \"./module\";\nimport {Node} from \"../path/node\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {State, TargetState} from \"../state/module\";\nimport {Param} from \"../params/module\";\nimport {Resolvable} from \"../resolve/module\";\nimport {TransitionService} from \"./transitionService\";\nimport {ViewConfig} from \"../view/interface\";\n\n\nlet transitionCount = 0, REJECT = new RejectFactory();\nconst stateSelf: (_state: State) => StateDeclaration = prop(\"self\");\n\n/**\n * The representation of a transition between two states.\n *\n * Contains all contextual information about the to/from states, parameters, resolves, as well as the\n * list of states being entered and exited as a result of this transition.\n */\nexport class Transition implements IHookRegistry {\n  $id: number;\n  success: boolean;\n\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n\n  private _options: TransitionOptions;\n  private _treeChanges: TreeChanges;\n\n  /**\n   * Registers a callback function as an `onBefore` Transition Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onBefore]]\n   *\n   * See [[IHookRegistry.onBefore]]\n   */\n  onBefore:   IHookRegistration;\n  /**\n   * Registers a callback function as an `onStart` Transition Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onStart]]\n   *\n   * See [[IHookRegistry.onStart]]\n   */\n  onStart:    IHookRegistration;\n  /**\n   * Registers a callback function as an `onEnter` State Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onEnter]]\n   *\n   * See [[IHookRegistry.onEnter]]\n   */\n  onEnter:    IHookRegistration;\n  /**\n   * Registers a callback function as an `onRetain` State Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onRetain]]\n   *\n   * See [[IHookRegistry.onRetain]]\n   */\n  onRetain:   IHookRegistration;\n  /**\n   * Registers a callback function as an `onExit` State Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onExit]]\n   *\n   * See [[IHookRegistry.onExit]]\n   */\n  onExit:     IHookRegistration;\n  /**\n   * Registers a callback function as an `onFinish` Transition Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onFinish]]\n   *\n   * See [[IHookRegistry.onFinish]]\n   */\n  onFinish:   IHookRegistration;\n  /**\n   * Registers a callback function as an `onSuccess` Transition Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onSuccess]]\n   *\n   * See [[IHookRegistry.onSuccess]]\n   */\n  onSuccess:  IHookRegistration;\n  /**\n   * Registers a callback function as an `onError` Transition Hook\n   *\n   * The hook is only registered for this specific `Transition`.  For global hooks, use [[TransitionService.onError]]\n   *\n   * See [[IHookRegistry.onError]]\n   */\n  onError:    IHookRegistration;\n  getHooks:   IHookGetter;\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @param fromPath The path of [[Node]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param _transitionService The Transition Service instance\n   */\n  constructor(fromPath: Node[], targetState: TargetState, private _transitionService: TransitionService) {\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // Makes the Transition instance a hook registry (onStart, etc)\n    HookRegistry.mixin(new HookRegistry(), this);\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = transitionCount++;\n    let toPath = PathFactory.buildToPath(fromPath, targetState);\n    toPath = PathFactory.applyViewConfigs(_transitionService.$view, toPath);\n    this._treeChanges = PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n    PathFactory.bindTransitionResolve(this._treeChanges, this);\n  }\n\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * @returns The state object for the Transition's \"from state\".\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * @returns The state object for the Transition's target state (\"to state\").\n   */\n  to() {\n    return this.$to().self;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   */\n  is(compare: (Transition|{to: any, from: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * @param pathname Pick which treeChanges path to get parameters for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname: string = \"to\"): { [key: string]: any } {\n    return this._treeChanges[pathname].map(prop(\"paramValues\")).reduce(mergeR, {});\n  }\n\n  /**\n   * Get resolved data\n   *\n   * @returns an object (key/value pairs) where keys are resolve names and values are any settled resolve data,\n   *    or `undefined` for pending resolve data\n   */\n  resolves(): { [resolveName: string]: any } {\n    return map(tail(this._treeChanges.to).resolveContext.getResolvables(), res => res.data);\n  }\n\n  /**\n   * Adds new resolves to this transition.\n   *\n   * @param resolves an [[ResolveDeclarations]] object which describes the new resolves\n   * @param state the state in the \"to path\" which should receive the new resolves (otherwise, the root state)\n   */\n  addResolves(resolves: { [key: string]: Function }, state: StateOrName = \"\"): void {\n    let stateName: string = (typeof state === \"string\") ? state : state.name;\n    let topath = this._treeChanges.to;\n    let targetNode = find(topath, node => node.state.name === stateName);\n    tail(topath).resolveContext.addResolvables(Resolvable.makeResolvables(resolves), targetNode.state);\n  }\n\n  /**\n   * Gets the previous transition, from which this transition was redirected.\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  previous(): Transition {\n    return this._options.previous || null;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname: string = \"entering\", state?: State): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop(\"views\")).filter(identity).reduce(unnestR, []);\n  }\n\n  treeChanges = () => this._treeChanges;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:Transition#redirect\n   * @methodOf ui.router.state.type:Transition\n   *\n   * @description\n   * Creates a new transition that is a redirection of the current one. This transition can\n   * be returned from a `$transitionsProvider` hook, `$state` event, or other method, to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @returns {Transition} Returns a new `Transition` instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let newOptions = extend({}, this.options(), targetState.options(), { previous: this });\n    targetState = new TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\n    let redirectTo = new Transition(this._treeChanges.from, targetState, this._transitionService);\n    let reloadState = targetState.options().reloadState;\n\n    // If the current transition has already resolved any resolvables which are also in the redirected \"to path\", then\n    // add those resolvables to the redirected transition.  Allows you to define a resolve at a parent level, wait for\n    // the resolve, then redirect to a child state based on the result, and not have to re-fetch the resolve.\n    let redirectedPath = this.treeChanges().to;\n    let copyResolvesFor: Node[] = Node.matching(redirectTo.treeChanges().to, redirectedPath)\n        .filter(node => !reloadState || !reloadState.includes[node.state.name]);\n    const includeResolve = (resolve, key) => ['$stateParams', '$transition$'].indexOf(key) === -1;\n    copyResolvesFor.forEach((node, idx) => extend(node.resolves, filter(redirectedPath[idx].resolves, includeResolve)));\n\n    return redirectTo;\n  }\n\n  /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    let {to, from} = this._treeChanges;\n    if (this._options.reload || tail(to).state !== tail(from).state) return undefined;\n\n    let nodeSchemas: Param[][] = to.map((node: Node) => node.paramSchema);\n    let [toValues, fromValues] = [to, from].map(path => path.map(x => x.paramValues));\n    let tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.length === 0;\n  }\n\n  /**\n   * @hidden\n   */\n  hookBuilder(): HookBuilder {\n    return new HookBuilder(this._transitionService, this, <TransitionHookOptions> {\n      transition: this,\n      current: this._options.current\n    });\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @returns a promise for a successful transition.\n   */\n  run (): Promise<any> {\n    let hookBuilder = this.hookBuilder();\n    let runSynchronousHooks = TransitionHook.runSynchronousHooks;\n    // TODO: nuke these in favor of chaining off the promise, i.e.,\n    // $transitions.onBefore({}, $transition$ => {$transition$.promise.then()}\n    const runSuccessHooks = () => runSynchronousHooks(hookBuilder.getOnSuccessHooks(), {}, true);\n    const runErrorHooks = ($error$) => runSynchronousHooks(hookBuilder.getOnErrorHooks(), { $error$ }, true);\n    // Run the success/error hooks *after* the Transition promise is settled.\n    this.promise.then(runSuccessHooks, runErrorHooks);\n\n    let syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\n    if (TransitionHook.isRejection(syncResult)) {\n      let rejectReason = (<any> syncResult).reason;\n      this._deferred.reject(rejectReason);\n      return this.promise;\n    }\n\n    if (!this.valid()) {\n      let error = new Error(this.error());\n      this._deferred.reject(error);\n      return this.promise;\n    }\n\n    if (this.ignored()) {\n      trace.traceTransitionIgnored(this);\n      let ignored = REJECT.ignored();\n      this._deferred.reject(ignored.reason);\n      return this.promise;\n    }\n\n    // When the chain is complete, then resolve or reject the deferred\n    const resolve = () => {\n      this.success = true;\n      this._deferred.resolve(this);\n      trace.traceSuccess(this.$to(), this);\n    };\n\n    const reject = (error) => {\n      this.success = false;\n      this._deferred.reject(error);\n      trace.traceError(error, this);\n      return services.$q.reject(error);\n    };\n\n    trace.traceTransitionStart(this);\n\n    let chain = hookBuilder.asyncHooks().reduce((_chain, step) => _chain.then(step.invokeStep), syncResult);\n    chain.then(resolve, reject);\n\n    return this.promise;\n  }\n\n  isActive = () => this === this._options.current();\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error();\n  }\n\n  /**\n   * The reason the Transition is invalid\n   *\n   * @returns an error message explaining why the transition is invalid\n   */\n  error() {\n    let state = this.$to();\n\n    if (state.self[abstractKey])\n      return `Cannot transition to abstract state '${state.name}'`;\n    if (!Param.validates(state.parameters(), this.params()))\n      return `Param values not valid for state '${state.name}'`;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString () {\n    let fromStateOrName = this.from();\n    let toStateOrName = this.to();\n\n    const avoidEmptyHash = (params) =>\n      (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : omit(params, \"#\");\n\n    // (X) means the to state is invalid.\n    let id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = toJson(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n        toValid = this.valid() ? \"\" : \"(X) \",\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = toJson(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transition.ts\n **/","/**\n * UI-Router Transition Tracing\n *\n * Enable transition tracing to print transition information to the console, in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n *\n * ES6\n * ```\n *\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * CJS\n * ```\n *\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * Globals\n * ```\n *\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * @module trace\n */ /** for typedoc */\nimport {parse} from \"../common/hof\";\nimport {isNumber} from \"../common/predicates\";\nimport {Transition}  from \"../transition/transition\";\nimport {ActiveUIView, ViewConfig}  from \"../view/interface\";\nimport {stringify, functionToString, maxLength, padString} from \"./strings\";\n\n/** @hidden */\nfunction uiViewString (viewData) {\n    if (!viewData) return 'ui-view (defunct)';\n    return `ui-view id#${viewData.id}, contextual name '${viewData.name}@${viewData.creationContext}', fqn: '${viewData.fqn}'`;\n}\n\n/** @hidden */\nconst viewConfigString = (viewConfig: ViewConfig) =>\n    `ViewConfig targeting ui-view: '${viewConfig.viewDecl.$uiViewName}@${viewConfig.viewDecl.$uiViewContextAnchor}', context: '${viewConfig.viewDecl.$context.name}'`;\n\n/** @hidden */\nfunction normalizedCat(input: Category): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n\n/**\n * Trace categories\n *\n * [[Trace.enable]] or [[Trace.disable]] a category\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nexport enum Category {\n  RESOLVE, TRANSITION, HOOK, INVOKE, UIVIEW, VIEWCONFIG\n}\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  approximateDigests: number;\n\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n  /** @hidden */\n  private _enabled: { [key: string]: boolean } = {};\n\n   /** @hidden */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = Object.keys(Category)\n          .filter(k => isNaN(parseInt(k, 10)))\n          .map(key => Category[key]);\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: Category[]) { this._set(true, categories) }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: Category[]) { this._set(false, categories) }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: Category): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** called by ui-router code */\n  traceTransitionStart(transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: Started  -> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceTransitionIgnored(transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: Ignored  <> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceHookInvocation(step, options) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = functionToString(step.fn);\n    console.log(`Transition #${tid} Digest #${digest}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** called by ui-router code */\n  traceHookResult(hookResult, transitionResult, transitionOptions) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(transitionOptions),\n        digest = this.approximateDigests,\n        hookResultStr = stringify(hookResult),\n        transitionResultStr = stringify(transitionResult);\n    console.log(`Transition #${tid} Digest #${digest}:   <- Hook returned: ${maxLength(200, hookResultStr)}, transition result: ${maxLength(200, transitionResultStr)}`);\n  }\n\n  /** called by ui-router code */\n  traceResolvePath(path, options) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        pathStr = path && path.toString(),\n        policyStr = options && options.resolvePolicy;\n    console.log(`Transition #${tid} Digest #${digest}:         Resolving ${pathStr} (${policyStr})`);\n  }\n\n  /** called by ui-router code */\n  traceResolvePathElement(pathElement, resolvablePromises, options) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    if (!resolvablePromises.length) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        resolvablePromisesStr = Object.keys(resolvablePromises).join(\", \"),\n        pathElementStr = pathElement && pathElement.toString(),\n        policyStr = options && options.resolvePolicy;\n    console.log(`Transition #${tid} Digest #${digest}:         Resolve ${pathElementStr} resolvables: [${resolvablePromisesStr}] (${policyStr})`);\n  }\n\n  /** called by ui-router code */\n  traceResolveResolvable(resolvable, options) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        resolvableStr = resolvable && resolvable.toString();\n    console.log(`Transition #${tid} Digest #${digest}:               Resolving -> ${resolvableStr}`);\n  }\n\n  /** called by ui-router code */\n  traceResolvableResolved(resolvable, options) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        resolvableStr = resolvable && resolvable.toString(),\n        result = stringify(resolvable.data);\n    console.log(`Transition #${tid} Digest #${digest}:               <- Resolved  ${resolvableStr} to: ${maxLength(200, result)}`);\n  }\n\n  /** called by ui-router code */\n  tracePathElementInvoke(node, fn, deps, options) {\n    if (!this.enabled(Category.INVOKE)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        stateName = node && node.state && node.state.toString(),\n        fnName = functionToString(fn);\n    console.log(`Transition #${tid} Digest #${digest}:         Invoke ${options.when}: context: ${stateName} ${maxLength(200, fnName)}`);\n  }\n\n  /** called by ui-router code */\n  traceError(error, transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: <- Rejected ${transitionStr}, reason: ${error}`);\n  }\n\n  /** called by ui-router code */\n  traceSuccess(finalState, transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        state = finalState.name,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: <- Success  ${transitionStr}, final state: ${state}`);\n  }\n\n  /** called by ui-router code */\n  traceUiViewEvent(event: string, viewData: ActiveUIView, extra = \"\") {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** called by ui-router code */\n  traceUiViewConfigUpdated(viewData: ActiveUIView, context) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUiViewEvent(\"Updating\", viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** called by ui-router code */\n  traceUiViewScopeCreated(viewData: ActiveUIView, newScope) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUiViewEvent(\"Created scope for\", viewData, `, scope #${newScope.$id}`);\n  }\n\n  /** called by ui-router code */\n  traceUiViewFill(viewData: ActiveUIView, html) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUiViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`$view.ViewConfig: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceUiViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`$view.ViewConfig: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * @example\n * ```js\n *\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nlet trace = new Trace();\nexport {trace};\n\n\n/** WEBPACK FOOTER **\n ** ./common/trace.ts\n **/","/**\n * This module contains APIs related to a Transition.\n *\n * See [[Transition]], [[$transitions]]\n *\n * @module transition\n * @preferred\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./hookBuilder\";\nexport * from \"./hookRegistry\";\nexport * from \"./rejectFactory\";\nexport * from \"./transition\";\nexport * from \"./transitionHook\";\nexport * from \"./transitionService\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/module.ts\n **/","/** @module transition */ /** for typedoc */\n\nimport {IInjectable, extend, tail, assertPredicate, unnestR, flatten, identity} from \"../common/common\";\nimport {isArray} from \"../common/predicates\";\n\nimport {TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IEventHook, ITransitionService, IMatchingNodes} from \"./interface\";\n\nimport {Transition, TransitionHook} from \"./module\";\nimport {State} from \"../state/module\";\nimport {Node} from \"../path/module\";\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nexport class HookBuilder {\n\n  treeChanges: TreeChanges;\n  transitionOptions: TransitionOptions;\n\n  toState: State;\n  fromState: State;\n\n  constructor(private $transitions: ITransitionService, private transition: Transition, private baseHookOptions: TransitionHookOptions) {\n    this.treeChanges        = transition.treeChanges();\n    this.toState            = tail(this.treeChanges.to).state;\n    this.fromState          = tail(this.treeChanges.from).state;\n    this.transitionOptions  = transition.options();\n  }\n\n  // TODO: These get* methods are returning different cardinalities of hooks\n  // onBefore/onStart/onFinish/onSuccess/onError returns an array of hooks\n  // onExit/onRetain/onEnter returns an array of arrays of hooks\n\n  getOnBeforeHooks  = () => this._buildNodeHooks(\"onBefore\",  \"to\",       tupleSort(), undefined, { async: false });\n  getOnStartHooks   = () => this._buildNodeHooks(\"onStart\",   \"to\",       tupleSort());\n  getOnExitHooks    = () => this._buildNodeHooks(\"onExit\",    \"exiting\",  tupleSort(true), (node) => ({ $state$: node.state }));\n  getOnRetainHooks  = () => this._buildNodeHooks(\"onRetain\",  \"retained\", tupleSort(), (node) => ({ $state$: node.state }));\n  getOnEnterHooks   = () => this._buildNodeHooks(\"onEnter\",   \"entering\", tupleSort(), (node) => ({ $state$: node.state }));\n  getOnFinishHooks  = () => this._buildNodeHooks(\"onFinish\",  \"to\",       tupleSort(), (node) => ({ $treeChanges$: this.treeChanges }));\n  getOnSuccessHooks = () => this._buildNodeHooks(\"onSuccess\", \"to\",       tupleSort(), undefined, { async: false, rejectIfSuperseded: false });\n  getOnErrorHooks   = () => this._buildNodeHooks(\"onError\",   \"to\",       tupleSort(), undefined, { async: false, rejectIfSuperseded: false });\n\n  asyncHooks() {\n    let onStartHooks    = this.getOnStartHooks();\n    let onExitHooks     = this.getOnExitHooks();\n    let onRetainHooks   = this.getOnRetainHooks();\n    let onEnterHooks    = this.getOnEnterHooks();\n    let onFinishHooks   = this.getOnFinishHooks();\n\n    let asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n    return asyncHooks.reduce(unnestR, []).filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[Node]] (or `Node[]`) to use as the TransitionHook context(s)\n   * - For each of the [[Node]]s, creates a TransitionHook\n   *\n   * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   * @param matchingNodesProp selects which [[Node]]s from the [[IMatchingNodes]] object to create hooks for.\n   * @param getLocals a function which accepts a [[Node]] and returns additional locals to provide to the hook as injectables\n   * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n   * @param options any specific Transition Hook Options\n   */\n  private _buildNodeHooks(hookType: string,\n                          matchingNodesProp: string,\n                          sortHooksFn: (l: HookTuple, r: HookTuple) => number,\n                          getLocals: (node: Node) => any = (node) => ({}),\n                          options?: TransitionHookOptions): TransitionHook[] {\n\n    // Find all the matching registered hooks for a given hook type\n    let matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n    if (!matchingHooks) return [];\n\n     const makeTransitionHooks = (hook: IEventHook) => {\n      // Fetch the Nodes that caused this hook to match.\n      let matches: IMatchingNodes = hook.matches(this.treeChanges);\n      // Select the Node[] that will be used as TransitionHook context objects\n      let nodes: Node[] = matches[matchingNodesProp];\n\n      // Return an array of HookTuples\n      return nodes.map(node => {\n        let _options = extend({ bind: hook.bind, traceData: { hookType, context: node} }, this.baseHookOptions, options);\n        let transitionHook = new TransitionHook(hook.callback, getLocals(node), node.resolveContext, _options);\n        return <HookTuple> { hook, node, transitionHook };\n      });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(sortHooksFn)\n        .map(tuple => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all IEventHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[IEventHook]]s\n   */\n  private _matchingHooks(hookName: string, treeChanges: TreeChanges): IEventHook[] {\n    return [ this.transition, this.$transitions ]                             // Instance and Global hook registries\n        .map((reg: IHookRegistry) => reg.getHooks(hookName))                  // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookName}`))  // Sanity check\n        .reduce(unnestR, [])                                                  // Un-nest IEventHook[][] to IEventHook[] array\n        .filter(hook => hook.matches(treeChanges));                           // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple { hook: IEventHook, node: Node, transitionHook: TransitionHook }\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the Node depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    let factor = reverseDepthSort ? -1 : 1;\n    let depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookBuilder.ts\n **/","/** @module transition */ /** for typedoc */\nimport {IInjectable, extend, removeFrom, anyTrueR, allTrueR, tail} from \"../common/common\";\nimport {isString, isFunction} from \"../common/predicates\";\nimport {val} from \"../common/hof\";\nimport {Node} from \"../path/node\";\n\nimport {HookRegOptions, HookMatchCriteria, IStateMatch, IEventHook, IHookRegistry, IHookRegistration, TreeChanges, HookMatchCriterion, IMatchingNodes} from \"./interface\";\nimport {Glob} from \"../common/glob\";\nimport {State} from \"../state/stateObject\";\n\n/**\n * Determines if the given state matches the matchCriteria\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: State, criterion: HookMatchCriterion) {\n  let toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state) {\n    let globStrings = <string[]> toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      let glob = Glob.fromString(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  let matchFn = <any> (isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state);\n}\n\n\nexport class EventHook implements IEventHook {\n  callback: IInjectable;\n  matchCriteria: HookMatchCriteria;\n  priority: number;\n  bind: any;\n\n  constructor(matchCriteria: HookMatchCriteria, callback: IInjectable, options: HookRegOptions = <any>{}) {\n    this.callback = callback;\n    this.matchCriteria = extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n  }\n\n  private static _matchingNodes(nodes: Node[], criterion: HookMatchCriterion): Node[] {\n    if (criterion === true) return nodes;\n    let matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[Node]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges): IMatchingNodes {\n    let mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\n    let matches = {\n      to: _matchingNodes([tail(treeChanges.to)], mc.to),\n      from: _matchingNodes([tail(treeChanges.from)], mc.from),\n      exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n      retained: _matchingNodes(treeChanges.retained, mc.retained),\n      entering: _matchingNodes(treeChanges.entering, mc.entering),\n    };\n\n    // Check if all the criteria matched the TreeChanges object\n    let allMatched: boolean = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n        .map(prop => matches[prop])\n        .reduce(allTrueR, true);\n\n    return allMatched ? matches : null;\n  }\n}\n\ninterface ITransitionEvents { [key: string]: IEventHook[]; }\n\n// Return a registration function of the requested type.\nfunction makeHookRegistrationFn(hooks: ITransitionEvents, name: string): IHookRegistration {\n  return function (matchObject, callback, options = {}) {\n    let eventHook = new EventHook(matchObject, callback, options);\n    hooks[name].push(eventHook);\n\n    return function deregisterEventHook() {\n      removeFrom(hooks[name])(eventHook);\n    };\n  };\n}\n\nexport class HookRegistry implements IHookRegistry {\n  static mixin(source: HookRegistry, target: IHookRegistry) {\n    Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(key => target[key] = source[key]);\n  }\n\n  private _transitionEvents: ITransitionEvents = {\n    onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n  };\n\n  getHooks = (name: string) => this._transitionEvents[name];\n\n  onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n  onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$transitionsProvider#onEnter\n   * @methodOf ui.router.state.$transitionsProvider\n   *\n   * @description\n   * Registers a function to be injected and invoked during a transition between the matched 'to' and 'from' states,\n   * when the matched 'to' state is being entered. This function is injected with the entering state's resolves.\n   *\n   * This function can be injected with two additional special value:\n   * - **`$transition$`**: The current transition\n   * - **`$state$`**: The state being entered\n   *\n   * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   */\n  onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$transitionsProvider#onRetain\n   * @methodOf ui.router.state.$transitionsProvider\n   *\n   * @description\n   * Registers a function to be injected and invoked during a transition between the matched 'to' and 'from states,\n   * when the matched 'from' state is already active and is not being exited nor entered.\n   *\n   * This function can be injected with two additional special value:\n   * - **`$transition$`**: The current transition\n   * - **`$state$`**: The state that is retained\n   *\n   * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   */\n  onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$transitionsProvider#onExit\n   * @methodOf ui.router.state.$transitionsProvider\n   *\n   * @description\n   * Registers a function to be injected and invoked during a transition between the matched 'to' and 'from states,\n   * when the matched 'from' state is being exited. This function is in injected with the exiting state's resolves.\n   *\n   * This function can be injected with two additional special value:\n   * - **`$transition$`**: The current transition\n   * - **`$state$`**: The state being entered\n   *\n   * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   */\n  onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$transitionsProvider#onFinish\n   * @methodOf ui.router.state.$transitionsProvider\n   *\n   * @description\n   * Registers a function to be injected and invoked when a transition is finished entering/exiting all states.\n   *\n   * This function can be injected with:\n   * - **`$transition$`**: The current transition\n   *\n   * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   * @param {function} callback See callback in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   */\n  onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$transitionsProvider#onSuccess\n   * @methodOf ui.router.state.$transitionsProvider\n   *\n   * @description\n   * Registers a function to be injected and invoked when a transition has successfully completed between the matched\n   * 'to' and 'from' state is being exited.\n   * This function is in injected with the 'to' state's resolves (note: `JIT` resolves are not injected).\n   *\n   * This function can be injected with two additional special value:\n   * - **`$transition$`**: The current transition\n   *\n   * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   * @param {function} callback The function which will be injected and invoked, when a matching transition is started.\n   *   The function's return value is ignored.\n   */\n  onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$transitionsProvider#onError\n   * @methodOf ui.router.state.$transitionsProvider\n   *\n   * @description\n   * Registers a function to be injected and invoked when a transition has failed for any reason between the matched\n   * 'to' and 'from' state. The transition rejection reason is injected as `$error$`.\n   *\n   * @param {object} matchObject See transitionCriteria in {@link ui.router.state.$transitionsProvider#on $transitionsProvider.on}.\n   * @param {function} callback The function which will be injected and invoked, when a matching transition is started.\n   *   The function's return value is ignored.\n   */\n  onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookRegistry.ts\n **/","/** @module transition */ /** for typedoc */\nimport {TransitionHookOptions} from \"./interface\";\nimport {IInjectable, defaults, extend, noop, Predicate} from \"../common/common\";\nimport {fnToString, maxLength} from \"../common/strings\";\nimport {isDefined, isPromise } from \"../common/predicates\";\nimport {not, pattern, val, eq, is, parse } from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\n\nimport {TransitionRejection, RejectFactory} from \"./rejectFactory\";\nimport {TargetState} from \"../state/module\";\nimport {ResolveContext} from \"../resolve/module\";\n\nlet REJECT = new RejectFactory();\n\nlet defaultOptions: TransitionHookOptions = {\n  async: true,\n  rejectIfSuperseded: true,\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null\n};\n\nexport class TransitionHook {\n  constructor(private fn: IInjectable,\n              private locals: any,\n              private resolveContext: ResolveContext,\n              private options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n  }\n\n  private isSuperseded = () => this.options.current() !== this.options.transition;\n\n  /**\n   * Handles transition abort and transition redirect. Also adds any returned resolvables\n   * to the pathContext for the current pathElement.  If the transition is rejected, then a rejected\n   * promise is returned here, otherwise undefined is returned.\n   */\n  mapHookResult: Function = pattern([\n    // Transition is no longer current\n    [this.isSuperseded, () => REJECT.superseded(this.options.current())],\n    // If the hook returns false, abort the current Transition\n    [eq(false),         () => REJECT.aborted(\"Hook aborted transition\")],\n    // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n    [is(TargetState),   (target) => REJECT.redirected(target)],\n    // A promise was returned, wait for the promise and then chain another hookHandler\n    [isPromise,         (promise) => promise.then(this.handleHookResult.bind(this))]\n  ]);\n\n  invokeStep = (moreLocals) => { // bind to this\n    let { options, fn, resolveContext } = this;\n    let locals = extend({}, this.locals, moreLocals);\n    trace.traceHookInvocation(this, options);\n    if (options.rejectIfSuperseded && this.isSuperseded()) {\n      return REJECT.superseded(options.current());\n    }\n\n    // TODO: Need better integration of returned promises in synchronous code.\n    if (!options.async) {\n      let hookResult = resolveContext.invokeNow(fn, locals, options);\n      return this.handleHookResult(hookResult);\n    }\n    return resolveContext.invokeLater(fn, locals, options).then(this.handleHookResult.bind(this));\n  };\n\n  handleHookResult(hookResult) {\n    if (!isDefined(hookResult)) return undefined;\n    trace.traceHookResult(hookResult, undefined, this.options);\n\n    let transitionResult = this.mapHookResult(hookResult);\n    if (transitionResult) trace.traceHookResult(hookResult, transitionResult, this.options);\n\n    return transitionResult;\n  }\n\n  toString() {\n    let { options, fn } = this;\n    let event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = fnToString(fn);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n\n\n  /**\n   * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n   *\n   * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n   */\n  static runSynchronousHooks(hooks: TransitionHook[], locals = {}, swallowExceptions: boolean = false): Promise<any> {\n    let results = [];\n    for (let i = 0; i < hooks.length; i++) {\n      try {\n        results.push(hooks[i].invokeStep(locals));\n      } catch (exception) {\n        if (!swallowExceptions) return REJECT.aborted(exception);\n        console.log(\"Swallowed exception during synchronous hook handler: \" + exception); // TODO: What to do here?\n      }\n    }\n\n    let rejections = results.filter(TransitionHook.isRejection);\n    if (rejections.length) return rejections[0];\n\n    return results\n        .filter(not(TransitionHook.isRejection))\n        .filter(<Predicate<any>> isPromise)\n        .reduce((chain, promise) => chain.then(val(promise)), services.$q.when());\n  }\n\n\n  static isRejection(hookResult) {\n    return hookResult && hookResult.reason instanceof TransitionRejection && hookResult;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionHook.ts\n **/","/** @module state */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./state\";\nexport * from \"./stateBuilder\";\nexport * from \"./hooks/transitionManager\";\nexport * from \"./stateObject\";\nexport * from \"./stateMatcher\";\nexport * from \"./stateQueueManager\";\nexport * from \"./stateRegistry\";\nexport * from \"./stateService\";\nexport * from \"./targetState\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/module.ts\n **/","/** @module state */ /** for typedoc */\nimport {isObject} from \"../common/predicates\";\nimport {bindFunctions} from \"../common/common\";\nimport {BuilderFunction} from \"./module\";\nimport {StateRegistry} from \"./stateRegistry\";\nimport {State} from \"./stateObject\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nexport class StateProvider {\n  invalidCallbacks: Function[] = [];\n  constructor(private stateRegistry: StateRegistry) {\n    bindFunctions(StateProvider.prototype, this, this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the\n   * `stateBuilder` object used internally by `$stateProvider`. This can be used\n   * to add custom functionality to ui-router, for example inferring templateUrl\n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new\n   * properties within the state's internal definition. There is currently no clear\n   * use-case for this beyond accessing internal states (i.e. $state.$current),\n   * however, expect this to become increasingly relevant as we introduce additional\n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of\n   * execution of the builder functions in non-deterministic. Builder functions\n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to\n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view\n   *   name (i.e. \"viewName@stateName\") and each value is the config object\n   *   (template, controller) for the view. Even when you don't use the views object\n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template\n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,\n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state.\n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that\n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   let result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     let autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate.\n   * @param {object} func A function that is responsible for decorating the original\n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  decorator(name: string, func: BuilderFunction) {\n    return this.stateRegistry.decorator(name, func) || this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * <a id='template'></a>\n   *\n   * - **`template`** - {string|function=} - html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property\n   *   takes precedence over templateUrl.\n   *\n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateUrl'></a>\n   *\n   * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *\n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateProvider'></a>\n   *\n   * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n   *   string.\n   *\n   * <a id='controller'></a>\n   *\n   * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *\n   * <a id='controllerProvider'></a>\n   *\n   * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n   *   the actual controller or string.\n   *\n   * <a id='controllerAs'></a>\n   *\n   * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   *\n   * <a id='resolve'></a>\n   *\n   * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises,\n   *   the router will wait for them all to be resolved or one to be rejected before the\n   *   controller is instantiated. If all the promises are resolved successfully, the values\n   *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n   *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n   *\n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n   *     it is injected and return value it treated as dependency. If result is a promise, it is\n   *     resolved before its value is injected into controller.\n   *\n   * <a id='url'></a>\n   *\n   * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any\n   *   parameters that were passed.\n   *\n   * <a id='params'></a>\n   *\n   * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n   *   use this within a state if you are not using url. Otherwise you can specify your\n   *   parameters within the url. When a state is navigated or transitioned to, the\n   *   $stateParams service will be populated with any parameters that were passed.\n   *\n   * <a id='views'></a>\n   *\n   * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n   *   manually/explicitly.\n   *\n   * <a id='abstract'></a>\n   *\n   * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   *\n   * <a id='onEnter'></a>\n   *\n   * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='onExit'></a>\n   *\n   * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='reloadOnSearch'></a>\n   *\n   * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   *\n   * <a id='data'></a>\n   *\n   * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} definition State configuration object.\n   */\n  state(name, definition) {\n    if (isObject(name)) {\n      definition = name;\n    } else {\n      definition.name = name;\n    }\n    this.stateRegistry.register(definition);\n    return this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#onInvalid\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a function to be injected and invoked when transitionTo has been called with an invalid\n   * state reference parameter\n   *\n   * This function can be injected with one some special values:\n   * - **`$to$`**: TargetState\n   * - **`$from$`**: TargetState\n   *\n   * @param {function} callback\n   *   The function which will be injected and invoked, when a matching transition is started.\n   *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n   *   is returned, it is treated as a redirect.\n   */\n\n  onInvalid(callback: Function) {\n    this.invalidCallbacks.push(callback);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/state.ts\n **/","/** @module state */ /** for typedoc */\nimport {map, noop, extend, inherit, pick, omit, values, applyPairs, forEach} from \"../common/common\";\nimport {isDefined, isFunction, isString} from \"../common/predicates\";\nimport {prop} from \"../common/hof\";\nimport {StateDeclaration} from \"./interface\";\n\nimport {State, StateMatcher} from \"./module\";\nimport {Param} from \"../params/module\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  let root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: State, parent?) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n}\n\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[State]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[State]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, $urlMatcherFactoryProvider: UrlMatcherFactory) {\n    let self = this;\n\n    const isRoot = (state) => state.name === \"\";\n    const root = () => matcher.find(\"\");\n\n    this.builders = {\n      self: [function (state: State) {\n        state.self.$$state = () => state;\n        return state.self;\n      }],\n\n      parent: [function (state: State) {\n        if (isRoot(state)) return null;\n        return matcher.find(self.parentName(state)) || root();\n      }],\n\n      data: [function (state: State) {\n        if (state.parent && state.parent.data) {\n          state.data = state.self.data = inherit(state.parent.data, state.data);\n        }\n        return state.data;\n      }],\n\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [function (state: State) {\n        let stateDec: StateDeclaration = <any> state;\n        const parsed = parseUrl(stateDec.url), parent = state.parent;\n        const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n          params: state.params || {},\n          paramMap: function (paramConfig, isSearch) {\n            if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, {dynamic: true});\n            return paramConfig;\n          }\n        });\n\n        if (!url) return null;\n        if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher> url);\n      }],\n\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [function (state: State) {\n        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n      }],\n\n      params: [function (state: State): { [key: string]: Param } {\n        const makeConfigParam = (config: any, id: string) => Param.fromConfig(id, null, config);\n        let urlParams: Param[] = (state.url && state.url.parameters({inherit: false})) || [];\n        let nonUrlParams: Param[] = values(map(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n        return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n      }],\n\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/viewsBuilder.ts\n      views: [],\n\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [function (state: State) {\n        return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n      }],\n\n      // Speed up $state.includes() as it's used a lot\n      includes: [function (state: State) {\n        let includes = state.parent ? extend({}, state.parent.includes) : {};\n        includes[state.name] = true;\n        return includes;\n      }]\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n   *\n   * @param name The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(name: string, fn: BuilderFunction) {\n    let builders = this.builders;\n    let array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: State): State {\n    let {matcher, builders} = this;\n    let parent = this.parentName(state);\n    if (parent && !matcher.find(parent)) return null;\n\n    for (let key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      let chain = builders[key].reduce((parentFn, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state) {\n    let name = state.name || \"\";\n    if (name.indexOf('.') !== -1) return name.substring(0, name.lastIndexOf('.'));\n    if (!state.parent) return \"\";\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state) {\n    let name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    let parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + \".\" + name : name;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateBuilder.ts\n **/","/**\n * This module contains code for State Parameters.\n *\n * See [[ParamDeclaration]]\n * @module params\n * @preferred doc\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./param\";\nexport * from \"./paramTypes\";\nexport * from \"./stateParams\";\nexport * from \"./type\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/module.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map, applyPairs, allTrueR} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {isInjectable, isDefined, isString, isArray} from \"../common/predicates\";\nimport {RawParams} from \"../params/interface\";\nimport {services} from \"../common/coreservices\";\nimport {matcherConfig} from \"../url/urlMatcherConfig\";\nimport {Type} from \"./type\";\nimport {paramTypes} from \"./paramTypes\";\n\nlet hasOwn = Object.prototype.hasOwnProperty;\nlet isShorthand = cfg => [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n\nexport enum DefType {\n  PATH, SEARCH, CONFIG\n}\n\nfunction unwrapShorthand(cfg) {\n  cfg = isShorthand(cfg) && { value: cfg } || cfg;\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : () => cfg.value\n  });\n}\n\nfunction getType(cfg, urlType, location, id) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type)) return paramTypes.type(cfg.type);\n  if (urlType) return urlType;\n  if (!cfg.type) return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\n  return cfg.type instanceof Type ? cfg.type : paramTypes.type(cfg.type);\n}\n\n/**\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config, isOptional) {\n  let squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return matcherConfig.defaultSquashPolicy();\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\nfunction getReplace(config, arrayMode, isOptional, squash) {\n  let replace, configuredKeys, defaultPolicy = [\n    {from: \"\", to: (isOptional || arrayMode ? undefined : \"\")},\n    {from: null, to: (isOptional || arrayMode ? undefined : \"\")}\n  ];\n  replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n  configuredKeys = map(replace, prop(\"from\"));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\n\nexport class Param {\n  id: string;\n  type: Type;\n  location: DefType;\n  array: boolean;\n  squash: (boolean|string);\n  replace: any;\n  isOptional: boolean;\n  dynamic: boolean;\n  config: any;\n\n  constructor(id: string, type: Type, config: any, location: DefType) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id);\n    let arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    let isOptional = config.value !== undefined;\n    let dynamic = config.dynamic === true;\n    let squash = getSquashPolicy(config, isOptional);\n    let replace = getReplace(config, arrayMode, isOptional, squash);\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      let arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n      let arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, {id, type, location, squash, replace, isOptional, dynamic, config, array: arrayMode});\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const $$getDefaultValue = () => {\n      if (!services.$injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      let defaultValue = services.$injector.invoke(this.config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of Type (${this.type.name})`);\n      return defaultValue;\n    };\n\n    const $replace = (val) => {\n      let replacement: any = map(filter(this.replace, propEq('from', val)), prop(\"to\"));\n      return replacement.length ? replacement[0] : val;\n    };\n\n    value = $replace(value);\n    return !isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((!isDefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct Type, and could not be decoded to the correct Type\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the Type's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string> encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n\n  /** Creates a new [[Param]] from a CONFIG block */\n  static fromConfig(id: string, type: Type, config: any): Param {\n    return new Param(id, type, config, DefType.CONFIG);\n  }\n\n  /** Creates a new [[Param]] from a url PATH */\n  static fromPath(id: string, type: Type, config: any): Param {\n    return new Param(id, type, config, DefType.PATH);\n  }\n\n  /** Creates a new [[Param]] from a url SEARCH */\n  static fromSearch(id: string, type: Type, config: any): Param {\n    return new Param(id, type, config, DefType.SEARCH);\n  }\n\n  static values(params: Param[], values = {}): RawParams {\n    return <RawParams> params.map(param => [param.id, param.value(values[param.id])]).reduce(applyPairs, {});\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1 = {}, values2 = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/param.ts\n **/","/** @module url */ /** for typedoc */\nimport {isDefined, isString} from \"../common/predicates\";\n\nexport class MatcherConfig {\n  _isCaseInsensitive: boolean = false;\n  _isStrictMode: boolean = true;\n  _defaultSquashPolicy: (boolean|string) = false;\n\n  caseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n\n  strictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n\n  defaultSquashPolicy(value?: (boolean|string)): (boolean|string) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n}\n\n// TODO: Do not export global instance; create one in UIRouter() constructor\nexport let matcherConfig = new MatcherConfig();\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherConfig.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map} from \"../common/common\";\nimport {isArray, isDefined} from \"../common/predicates\";\nimport {TypeDefinition} from \"./interface\";\n\n/**\n * Wraps up a `Type` object to handle array values.\n */\nfunction ArrayType(type, mode) {\n  // Wrap non-array value as array\n  function arrayWrap(val): any[] { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === \"auto\" ? val[0] : val;\n      default: return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback, allTruthyMode?: boolean) {\n    return function handleArray(val) {\n      if (isArray(val) && val.length === 0) return val;\n      let arr = arrayWrap(val);\n      let result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback) {\n    return function handleArray(val1, val2) {\n      let left = arrayWrap(val1), right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].map(name => {\n    this[name] = (name === 'equals' ? arrayEqualsHandler : arrayHandler)(type[name].bind(type));\n  });\n\n  extend(this, {\n    name: type.name,\n    pattern: type.pattern,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode\n  });\n}\n\n/**\n * Implements an interface to define custom parameter types that can be decoded from and encoded to\n * string parameters matched in a URL. Used by [[UrlMatcher]]\n * objects when matching or formatting URLs, or comparing or validating parameter values.\n *\n * See [[UrlMatcherFactory.type]] for more information on registering custom types.\n *\n * @example\n * ```\n *\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * ```\n */\nexport class Type implements TypeDefinition {\n  pattern: RegExp = /.*/;\n  name: string;\n  raw: boolean;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `Type`'s public interface.\n   * @returns a new Type object\n   */\n  constructor(def: TypeDefinition) {\n    extend(this, def);\n  }\n\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean { return true; }\n  /** @inheritdoc */\n  encode(val: any, key?: string): (string|string[]) { return val; }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any { return val; }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean { return a == b; }\n\n\n  $subPattern() {\n    let sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{Type:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom Type as an array of Type, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode, isSearch) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new ArrayType(this, mode);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/type.ts\n **/","/** @module params */ /** for typedoc */\nimport {fromJson, toJson, identity, equals, inherit, map, extend} from \"../common/common\";\nimport {isDefined} from \"../common/predicates\";\nimport {is, val} from \"../common/hof\";\nimport {services} from \"../common/coreservices\";\nimport {Type} from \"./type\";\n\n// Use tildes to pre-encode slashes.\n// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n// and bidirectional encoding/decoding fails.\n// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\nfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\nfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\nexport class ParamTypes {\n  types: any;\n  enqueue: boolean = true;\n  typeQueue: any[] = [];\n\n  private defaultTypes: any = {\n    \"hash\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /.*/,\n      equals: val(true)\n    },\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode(val) { return parseInt(val, 10); },\n      is(val) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /-?\\d+/\n    },\n    \"bool\": {\n      encode: val => val && 1 || 0,\n      decode: val => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode(val) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode(val) {\n        if (this.is(val)) return val;\n        let match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l, r) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true)\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: identity,\n      decode: identity,\n      equals: equals,\n      pattern: /.*/\n    }\n  };\n\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition, name) => new Type(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  type(name, definition?: any, definitionFn?: Function) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new Type(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n    return this;\n  }\n\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      let type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\nexport let paramTypes = new ParamTypes();\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/paramTypes.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, ancestors} from \"../common/common\";\n\nexport class StateParams {\n  constructor(params: Object = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams, $current, $to) {\n    let parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\n    for (let i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (let j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/stateParams.ts\n **/","/** @module state */ /** for typedoc */\nimport {prop} from \"../../common/hof\";\nimport {Param} from \"../../params/param\";\n\nimport {TreeChanges} from \"../../transition/interface\";\nimport {Transition} from \"../../transition/transition\";\nimport {TransitionRejection, RejectType} from \"../../transition/rejectFactory\";\n\nimport {StateDeclaration} from \"../interface\";\nimport {StateService} from \"../stateService\";\nimport {TargetState} from \"../targetState\";\nimport {ViewHooks} from \"./viewHooks\";\nimport {EnterExitHooks} from \"./enterExitHooks\";\nimport {ResolveHooks} from \"./resolveHooks\";\nimport {UrlRouter} from \"../../url/urlRouter\";\nimport {services} from \"../../common/coreservices\";\nimport {UIRouterGlobals} from \"../../globals\";\n\n/**\n * This class:\n *\n * * Takes a blank transition object and adds all the hooks necessary for it to behave like a state transition.\n *\n * * Runs the transition, returning a chained promise which:\n *   * transforms the resolved Transition.promise to the final destination state.\n *   * manages the rejected Transition.promise, checking for Dynamic or Redirected transitions\n *\n * * Registers a handler to update global $state data such as \"active transitions\" and \"current state/params\"\n *\n * * Registers view hooks, which maintain the list of active view configs and sync with/update the ui-views\n *\n * * Registers onEnter/onRetain/onExit hooks which delegate to the state's hooks of the same name, at the appropriate time\n *\n * * Registers eager and lazy resolve hooks\n */\nexport class TransitionManager {\n  private treeChanges: TreeChanges;\n  private enterExitHooks: EnterExitHooks;\n  private viewHooks: ViewHooks;\n  private resolveHooks: ResolveHooks;\n  private $q;\n\n  constructor(\n      private transition: Transition,\n      private $transitions,\n      private $urlRouter: UrlRouter,\n      private $view, // service\n      private $state: StateService,\n      private globals: UIRouterGlobals\n  ) {\n    this.$q = services.$q;\n    this.viewHooks = new ViewHooks(transition, $view);\n    this.enterExitHooks = new EnterExitHooks(transition);\n    this.resolveHooks = new ResolveHooks(transition);\n\n    this.treeChanges = transition.treeChanges();\n\n    this.registerUpdateGlobalState();\n    this.viewHooks.registerHooks();\n    this.enterExitHooks.registerHooks();\n    this.resolveHooks.registerHooks();\n  }\n\n  runTransition(): Promise<any> {\n    this.globals.transitionHistory.enqueue(this.transition);\n    return this.transition.run()\n        .then((trans: Transition) => trans.to()) // resolve to the final state (TODO: good? bad?)\n        .catch(error => this.transRejected(error)); // if rejected, handle dynamic and redirect\n  }\n\n  registerUpdateGlobalState() {\n    // After globals.current is updated at priority: 10000\n    this.transition.onSuccess({}, this.updateUrl.bind(this), {priority: 9999});\n  }\n\n  transRejected(error): (StateDeclaration|Promise<any>) {\n    let {transition, $state, $q} = this;\n    // Handle redirect and abort\n    if (error instanceof TransitionRejection) {\n      if (error.type === RejectType.IGNORED) {\n        // Update $stateParmas/$state.params/$location.url if transition ignored, but dynamic params have changed.\n        let dynamic = $state.$current.parameters().filter(prop('dynamic'));\n        if (!Param.equals(dynamic, $state.params, transition.params())) {\n          this.updateUrl();\n        }\n        return $state.current;\n      }\n\n      if (error.type === RejectType.SUPERSEDED && error.redirected && error.detail instanceof TargetState) {\n        return this._redirectMgr(transition.redirect(error.detail)).runTransition();\n      }\n\n      if (error.type === RejectType.ABORTED) {\n        this.$urlRouter.update();\n      }\n    }\n\n    this.$transitions.defaultErrorHandler()(error);\n\n    return $q.reject(error);\n  }\n\n  updateUrl() {\n    let transition = this.transition;\n    let {$urlRouter, $state} = this;\n    let options = transition.options();\n    var toState = transition.$to();\n\n    if (options.location && $state.$current.navigable) {\n      $urlRouter.push($state.$current.navigable.url, $state.params, { replace: options.location === 'replace' });\n    }\n    $urlRouter.update(true);\n  }\n\n  private _redirectMgr(redirect: Transition): TransitionManager {\n    let {$transitions, $urlRouter, $view, $state, globals} = this;\n    return new TransitionManager(redirect, $transitions, $urlRouter, $view, $state, globals);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/hooks/transitionManager.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, StateOrName} from \"./interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {TransitionOptions} from \"../transition/interface\";\n\nimport {State} from \"./module\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:TargetState\n *\n * @description\n * Encapsulate the desired target of a transition.\n * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n *\n * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n *            used to define the state.\n * @param {IState} _definition The `State` object definition.\n * @param {ParamsOrArray} _params Parameters for the target state\n * @param {TransitionOptions} _options Transition options.\n */\nexport class TargetState {\n  private _params: ParamsOrArray;\n\n  constructor(\n    private _identifier: StateOrName,\n    private _definition?: State,\n    _params: ParamsOrArray = {},\n    private _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n\n  name() {\n    return this._definition && this._definition.name || this._identifier;\n  }\n\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  params(): ParamsOrArray {\n    return this._params;\n  }\n\n  $state(): State {\n    return this._definition;\n  }\n\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  options() {\n    return this._options;\n  }\n\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  valid(): boolean {\n    return !this.error();\n  }\n\n  error(): string {\n    let base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      let stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/targetState.ts\n **/","/** @module state */ /** for typedoc */\nimport {noop} from \"../../common/common\";\nimport {services} from \"../../common/coreservices\";\n\nimport {TreeChanges} from \"../../transition/interface\";\nimport {Transition} from \"../../transition/transition\";\n\nimport {ViewService} from \"../../view/view\";\nimport {ViewConfig} from \"../../view/interface\";\n\nexport class ViewHooks {\n  private treeChanges: TreeChanges;\n  private enteringViews: ViewConfig[];\n  private exitingViews: ViewConfig[];\n  private transition: Transition;\n  private $view: ViewService; // service\n\n  constructor(transition: Transition, $view: ViewService) {\n    this.transition = transition;\n    this.$view = $view;\n\n    this.treeChanges = transition.treeChanges();\n    this.enteringViews = transition.views(\"entering\");\n    this.exitingViews = transition.views(\"exiting\");\n  }\n\n  loadAllEnteringViews() {\n    return services.$q.all(this.enteringViews.map(view => view.load())).then(noop);\n  }\n\n  updateViews() {\n    let $view = this.$view;\n    this.exitingViews.forEach((viewConfig: ViewConfig) => $view.deactivateViewConfig(viewConfig));\n    this.enteringViews.forEach((viewConfig: ViewConfig) => $view.activateViewConfig(viewConfig));\n    $view.sync();\n  }\n\n  registerHooks() {\n    if (this.enteringViews.length) {\n      this.transition.onStart({}, this.loadAllEnteringViews.bind(this));\n    }\n\n    if (this.exitingViews.length || this.enteringViews.length)\n      this.transition.onSuccess({}, this.updateViews.bind(this));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/hooks/viewHooks.ts\n **/","/** @module state */ /** for typedoc */\nimport {Transition} from \"../../transition/transition\";\n\nexport class EnterExitHooks {\n  private transition: Transition;\n\n  constructor(transition: Transition) {\n    this.transition = transition;\n  }\n\n  registerHooks() {\n    this.registerOnEnterHooks();\n    this.registerOnRetainHooks();\n    this.registerOnExitHooks();\n  }\n\n  registerOnEnterHooks() {\n    this.transition.entering().filter(state => !!state.onEnter)\n        .forEach(state => this.transition.onEnter({entering: state.name}, state.onEnter));\n  }\n\n  registerOnRetainHooks() {\n    this.transition.retained().filter(state => !!state.onRetain)\n        .forEach(state => this.transition.onRetain({retained: state.name}, state.onRetain));\n  }\n\n  registerOnExitHooks() {\n    this.transition.exiting().filter(state => !!state.onExit)\n        .forEach(state => this.transition.onExit({exiting: state.name}, state.onExit));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/hooks/enterExitHooks.ts\n **/","/** @module state */ /** for typedoc */\nimport {extend, find, tail, map} from \"../../common/common\";\nimport {propEq} from \"../../common/hof\";\n\nimport {ResolvePolicy} from \"../../resolve/interface\";\n\nimport {Transition} from \"../../transition/transition\";\nimport {val} from \"../../common/hof\";\nimport {Resolvable} from \"../../resolve/resolvable\";\n\n\nlet LAZY = ResolvePolicy[ResolvePolicy.LAZY];\nlet EAGER = ResolvePolicy[ResolvePolicy.EAGER];\n\n/**\n * Registers Eager and Lazy (for entering states) resolve hooks\n *\n * * registers a hook that resolves EAGER resolves, for the To Path, onStart of the transition\n * * registers a hook that resolves LAZY resolves, for each state, before it is entered\n */\nexport class ResolveHooks {\n  constructor(private transition: Transition) { }\n\n  registerHooks() {\n    let treeChanges = this.transition.treeChanges();\n\n    /** a function which resolves any EAGER Resolvables for a Path */\n    (<any> $eagerResolvePath).$inject = ['$transition$'];\n    function $eagerResolvePath($transition$) {\n      return tail(<any[]> treeChanges.to).resolveContext.resolvePath(extend({ transition: $transition$ }, { resolvePolicy: EAGER }));\n    }\n\n    /** Returns a function which pre-resolves any LAZY Resolvables for a Node in a Path */\n    (<any> $lazyResolveEnteringState).$inject = ['$state$', '$transition$'];\n    function $lazyResolveEnteringState($state$, $transition$) {\n      let node = find(<any[]> treeChanges.entering, propEq('state', $state$));\n\n      // A new Resolvable contains all the resolved data in this context as a single object, for injection as `$resolve$`\n      let context = node.resolveContext;\n      let $resolve$ = new Resolvable(\"$resolve$\", () => map(context.getResolvables(), (r: Resolvable) => r.data));\n      var options = extend({transition: $transition$}, { resolvePolicy: LAZY });\n\n      // Resolve all the LAZY resolves, then resolve the `$resolve$` object, then add `$resolve$` to the context\n      return context.resolvePathElement(node.state, options)\n          .then(() => $resolve$.resolveResolvable(context))\n          .then(() => context.addResolvables({$resolve$}, node.state));\n    }\n\n    // Resolve eager resolvables before when the transition starts\n    this.transition.onStart({}, $eagerResolvePath, { priority: 1000 });\n    // Resolve lazy resolvables before each state is entered\n    this.transition.onEnter({ entering: val(true) }, $lazyResolveEnteringState, { priority: 1000 });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/hooks/resolveHooks.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {Resolvable} from \"./resolvable\";\n\nexport interface Resolvables {\n  [key: string]: Resolvable;\n}\n\nexport interface IOptions1 {\n  omitOwnLocals ?: string[];\n  resolvePolicy ?: string;\n}\n\n// Defines the available policies and their ordinals.\nexport enum ResolvePolicy {\n  JIT, // JIT resolves are resolved just-in-time, right before an injected function that depends on them is invoked.\n  LAZY, // Lazy resolves are resolved before their state is entered.\n  EAGER // Eager resolves are resolved before the transition starts.\n}\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/interface.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {extend, pick, map, filter} from \"../common/common\";\nimport {not} from \"../common/hof\";\nimport {isInjectable} from \"../common/predicates\";\n\nimport {services} from \"../common/coreservices\";\nimport {trace} from \"../common/trace\";\nimport {Resolvables, IOptions1} from \"./interface\";\n\nimport {ResolveContext} from \"./resolveContext\";\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable {\n  constructor(name: string, resolveFn: Function, preResolvedData?: any) {\n    extend(this, {\n     name, \n     resolveFn, \n     deps: services.$injector.annotate(resolveFn, services.$injector.strictDi), \n     data: preResolvedData \n   });\n  }\n\n  name: string;\n  resolveFn: Function;\n  deps: string[];\n\n  promise: Promise<any> = undefined;\n  data: any;\n\n  // synchronous part:\n  // - sets up the Resolvable's promise\n  // - retrieves dependencies' promises\n  // - returns promise for async part\n\n  // asynchronous part:\n  // - wait for dependencies promises to resolve\n  // - invoke the resolveFn\n  // - wait for resolveFn promise to resolve\n  // - store unwrapped data\n  // - resolve the Resolvable's promise\n  resolveResolvable(resolveContext: ResolveContext, options: IOptions1 = {}) {\n    let {name, deps, resolveFn} = this;\n    \n    trace.traceResolveResolvable(this, options);\n    // First, set up an overall deferred/promise for this Resolvable\n    let deferred = services.$q.defer();\n    this.promise = deferred.promise;\n    // Load a map of all resolvables for this state from the context path\n    // Omit the current Resolvable from the result, so we don't try to inject this into this\n    let ancestorsByName: Resolvables = resolveContext.getResolvables(null, {  omitOwnLocals: [ name ] });\n\n    // Limit the ancestors Resolvables map to only those that the current Resolvable fn's annotations depends on\n    let depResolvables: Resolvables = <any> pick(ancestorsByName, deps);\n\n    // Get promises (or synchronously invoke resolveFn) for deps\n    let depPromises: any = map(depResolvables, (resolvable: Resolvable) => resolvable.get(resolveContext, options));\n\n    // Return a promise chain that waits for all the deps to resolve, then invokes the resolveFn passing in the\n    // dependencies as locals, then unwraps the resulting promise's data.\n    return services.$q.all(depPromises).then(locals => {\n      try {\n        let result = services.$injector.invoke(resolveFn, null, locals);\n        deferred.resolve(result);\n      } catch (error) {\n        deferred.reject(error);\n      }\n      return this.promise;\n    }).then(data => {\n      this.data = data;\n      trace.traceResolvableResolved(this, options);\n      return this.promise;\n    });\n  }\n\n  get(resolveContext: ResolveContext, options?: IOptions1): Promise<any> {\n    return this.promise || this.resolveResolvable(resolveContext, options);\n  }\n\n  toString() {\n    return `Resolvable(name: ${this.name}, requires: [${this.deps}])`;\n  }\n\n  /**\n   * Validates the result map as a \"resolve:\" style object, then transforms the resolves into Resolvables\n   */\n  static makeResolvables(resolves: { [key: string]: Function; }): Resolvables {\n    // If a hook result is an object, it should be a map of strings to functions.\n    let invalid = filter(resolves, not(isInjectable)), keys = Object.keys(invalid);\n    if (keys.length)\n      throw new Error(`Invalid resolve key/value: ${keys[0]}/${invalid[keys[0]]}`);\n    return map(resolves, (fn, name: string) => new Resolvable(name, fn));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolvable.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, _ViewDeclaration} from \"./interface\";\nimport {extend, defaults, values, find} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {Param} from \"../params/module\";\nimport {UrlMatcher} from \"../url/module\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:State\n *\n * @description\n * Definition object for states. Includes methods for manipulating the state heirarchy.\n *\n * @param {Object} config  A configuration object hash that includes the results of user-supplied\n *        values, as well as values from `StateBuilder`.\n *\n * @returns {Object}  Returns a new `State` object.\n */\nexport class State {\n\n  public parent: State;\n  public name: string;\n  public abstract: boolean;\n  public resolve: { [key: string]: Function; };\n  public resolvePolicy: any;\n  public url: UrlMatcher;\n  public params: { [key: string]: Param };\n  public views: { [key: string]: _ViewDeclaration; };\n  public self: StateDeclaration;\n  public navigable: State;\n  public path: State[];\n  public data: any;\n  public includes: { [name: string] : boolean };\n\n  constructor(config?: StateDeclaration) {\n    extend(this, config);\n    // Object.freeze(this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#is\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: State|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#fqn\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the fully-qualified name of the state, based on its current position in the tree.\n   *\n   * @returns {string} Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    let name = this.parent.fqn();\n    return name ? name + \".\" + this.name : this.name;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#root\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the root node of this state's tree.\n   *\n   * @returns {State} The root of this state's tree.\n   */\n  root(): State {\n    return this.parent && this.parent.root() || this;\n  }\n\n  parameters(opts?): Param[] {\n    opts = defaults(opts, { inherit: true });\n    let inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params));\n  }\n\n  parameter(id: string, opts: any = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateObject.ts\n **/","/** @module state */ /** for typedoc */\nimport {isString} from \"../common/predicates\";\nimport {StateOrName} from \"./interface\";\nimport {State} from \"./module\";\n\nexport class StateMatcher {\n  constructor (private _states: { [key: string]: State }) { }\n  \n  isRelative(stateName: string) {\n    stateName = stateName || \"\";\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n\n  find(stateOrName: StateOrName, base?: StateOrName): State {\n    if (!stateOrName && stateOrName !== \"\") return undefined;\n    let isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    let state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n    \n    let baseState: State = this.find(base);\n\n    let splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === \"\" && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === \"^\") {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    let relName = splitName.slice(i).join(\".\");\n    return current.name + (current.name && relName ? \".\" : \"\") + relName;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateMatcher.ts\n **/","/** @module state */ /** for typedoc */\nimport {extend, inherit, pluck, equalForKeys, abstractKey} from \"../common/common\";\nimport {isString} from \"../common/predicates\";\nimport {StateDeclaration} from \"./interface\";\nimport {State} from \"./module\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateService} from \"./stateService\";\n\nexport class StateQueueManager {\n  queue: State[];\n  private $state: StateService;\n\n  constructor(\n      public states: { [key: string]: State; },\n      public builder: StateBuilder,\n      public $urlRouterProvider) {\n    this.queue = [];\n  }\n\n  register(config: StateDeclaration) {\n    let {states, queue, $state} = this;\n    // Wrap a new object around the state so we can store our private details easily.\n    // @TODO: state = new State(extend({}, config, { ... }))\n    let state = inherit(new State(), extend({}, config, {\n      self: config,\n      resolve: config.resolve || {},\n      toString: () => config.name\n    }));\n\n    if (!isString(state.name)) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(state.name) || pluck(queue, 'name').indexOf(state.name) !== -1)\n      throw new Error(`State '${state.name}' is already defined`);\n\n    queue.push(state);\n\n    if (this.$state) {\n      this.flush($state);\n    }\n    return state;\n  }\n\n  flush($state) {\n    let {queue, states, builder} = this;\n    let result, state, orphans = [], orphanIdx, previousQueueLength = {};\n\n    while (queue.length > 0) {\n      state = queue.shift();\n      result = builder.build(state);\n      orphanIdx = orphans.indexOf(state);\n\n      if (result) {\n        if (states.hasOwnProperty(state.name))\n          throw new Error(`State '${name}' is already defined`);\n        states[state.name] = state;\n        this.attachRoute($state, state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        continue;\n      }\n\n      let prev = previousQueueLength[state.name];\n      previousQueueLength[state.name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        throw new Error(`Cannot register orphaned state '${state.name}'`);\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n    return states;\n  }\n\n  autoFlush($state) {\n    this.$state = $state;\n    this.flush($state);\n  }\n\n  attachRoute($state, state) {\n    let {$urlRouterProvider} = this;\n    if (state[abstractKey] || !state.url) return;\n\n    $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n      if ($state.$current.navigable !== state || !equalForKeys($match, $stateParams)) {\n        $state.transitionTo(state, $match, { inherit: true });\n      }\n    }]);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateQueueManager.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateQueueManager} from \"./stateQueueManager\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {StateDeclaration} from \"./interface\";\nimport {BuilderFunction} from \"./stateBuilder\";\nimport {StateOrName} from \"./interface\";\n\nexport class StateRegistry {\n  private _root: State;\n  private states: { [key: string]: State } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  constructor(urlMatcherFactory: UrlMatcherFactory, urlRouterProvider) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this.states, this.builder, urlRouterProvider);\n\n    let rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash' }\n      },\n      abstract: true\n    };\n\n    let _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n\n  root() {\n    return this._root;\n  }\n\n  register(stateDefinition: StateDeclaration) {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) \n      return <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self);\n    let found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateRegistry.ts\n **/","/** @module state */ /** */\nimport {extend, defaults } from \"../common/common\";\nimport {isDefined, isObject, isString} from \"../common/predicates\";\nimport {Queue} from \"../common/queue\";\nimport {services} from \"../common/coreservices\";\n\nimport {PathFactory} from \"../path/pathFactory\";\nimport {Node} from \"../path/node\";\n\nimport {ViewService} from \"../view/view\";\n\nimport {StateParams} from \"../params/stateParams\";\n\nimport {UrlRouter} from \"../url/urlRouter\";\n\nimport {TransitionOptions} from \"../transition/interface\";\nimport {TransitionService, defaultTransOpts} from \"../transition/transitionService\";\nimport {RejectFactory} from \"../transition/rejectFactory\";\nimport {Transition} from \"../transition/transition\";\n\nimport {StateOrName, StateDeclaration} from \"./interface\";\nimport {StateRegistry} from \"./stateRegistry\";\nimport {State} from \"./stateObject\";\nimport {TargetState} from \"./targetState\";\n\nimport {RawParams} from \"../params/interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {TransitionManager} from \"./hooks/transitionManager\";\nimport {Param} from \"../params/param\";\nimport {Glob} from \"../common/glob\";\nimport {equalForKeys} from \"../common/common\";\nimport {HrefOptions} from \"./interface\";\nimport {StateProvider} from \"./state\";\nimport {bindFunctions} from \"../common/common\";\nimport {UIRouterGlobals} from \"../globals\";\n\nexport class StateService {\n  get transition()  { return this.globals.transition; }\n  get params()      { return this.globals.params; }\n  get current()     { return this.globals.current; }\n  get $current()    { return this.globals.$current; }\n\n  private rejectFactory = new RejectFactory();\n\n  constructor(private $view: ViewService,\n              private $urlRouter: UrlRouter,\n              private $transitions: TransitionService,\n              private stateRegistry: StateRegistry,\n              private stateProvider: StateProvider,\n              private globals: UIRouterGlobals) {\n    let getters = ['current', '$current', 'params', 'transition'];\n    let boundFns = Object.keys(StateService.prototype).filter(key => getters.indexOf(key) === -1);\n    bindFunctions(StateService.prototype, this, this, boundFns);\n  }\n\n  /**\n   * Invokes the onInvalid callbacks, in natural order.  Each callback's return value is checked in sequence\n   * until one of them returns an instance of TargetState.   The results of the callbacks are wrapped\n   * in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and\n   * the result returned.\n   */\n  private _handleInvalidTargetState(fromPath: Node[], $to$: TargetState) {\n    const latestThing = () => this.globals.transitionHistory.peekTail();\n    let latest = latestThing();\n    let $from$ = PathFactory.makeTargetState(fromPath);\n    let callbackQueue = new Queue<Function>([].concat(this.stateProvider.invalidCallbacks));\n    let rejectFactory = this.rejectFactory;\n    let {$q, $injector} = services;\n\n    const invokeCallback = (callback: Function) => $q.when($injector.invoke(callback, null, { $to$, $from$ }));\n\n    const checkForRedirect = (result) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n      let target = <TargetState> result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) return rejectFactory.invalid(target.error());\n      if (latestThing() !== latest) return rejectFactory.superseded();\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      let nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return rejectFactory.invalid($to$.error());\n      return invokeCallback(nextCallback).then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#reload\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n   * controllers reinstantiated, and events re-fired.\n   *\n   * @example\n   * <pre>\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * </pre>\n   *\n   * `reload()` is just an alias for:\n   * <pre>\n   * $state.transitionTo($state.current, $stateParams, {\n   *   reload: true, inherit: false, notify: true\n   * });\n   * </pre>\n   *\n   * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n   * @example\n   * <pre>\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * </pre>\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  reload(reloadState: StateOrName): Promise<State> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false\n    });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#go\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Convenience method for transitioning to a new state. `$state.go` calls\n   * `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n   * This allows you to easily use an absolute or relative to path and specify\n   * only the parameters you'd like to update (while letting unspecified parameters\n   * inherit from the currently active ancestor states).\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * </pre>\n   * <img src='../ngdoc_assets/StateGoExamples.png'/>\n   *\n   * @param {string} to Absolute state name or relative state path. Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to a parent state\n   * - `$state.go('^.sibling')` - will go to a sibling state\n   * - `$state.go('.child.grandchild')` - will go to grandchild state\n   *\n   * @param {object=} params A map of the parameters that will be sent to the state,\n   * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n   * defined parameters. This allows, for example, going to a sibling state that shares parameters\n   * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n   * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n   * will get you all current parameters, etc.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   *\n   * Possible success values:\n   *\n   * - $state.current\n   *\n   * <br/>Possible rejection values:\n   *\n   * - 'transition superseded' - when a newer transition has been started after this one\n   * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n   * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n   *   when a `$stateNotFound` `event.retry` promise errors.\n   * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n   * - *resolve error* - when an error has occurred with a `resolve`\n   *\n   */\n  go(to: StateOrName, params: RawParams, options: TransitionOptions): Promise<State> {\n    let defautGoOpts = { relative: this.$current, inherit: true };\n    let transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  };\n\n  /** Factory method for creating a TargetState */\n  target(identifier: StateOrName, params: ParamsOrArray, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name)\n      throw new Error('Invalid reload state object');\n    options.reloadState = options.reload === true ? this.stateRegistry.root() : this.stateRegistry.matcher.find(<any> options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : (<any>options.reload).name)}'`);\n\n    let stateDefinition = this.stateRegistry.matcher.find(identifier, options.relative);\n    return new TargetState(identifier, stateDefinition, params, options);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#transitionTo\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n   * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * </pre>\n   *\n   * @param {string} to State name.\n   * @param {object=} toParams A map of the parameters that will be sent to the state,\n   * will populate $stateParams.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): Promise<State> {\n    let transHistory = this.globals.transitionHistory;\n    options = defaults(options, defaultTransOpts);\n    options = extend(options, { current: transHistory.peekTail.bind(transHistory)});\n\n    let ref: TargetState = this.target(to, toParams, options);\n    let latestSuccess: Transition = this.globals.successfulTransitions.peekTail();\n    const rootPath = () => PathFactory.bindTransNodesToPath([new Node(this.stateRegistry.root())]);\n    let currentPath: Node[] = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n    if (!ref.valid())\n      return services.$q.reject(ref.error());\n\n    let transition = this.$transitions.create(currentPath, ref);\n    let tMgr = new TransitionManager(transition, this.$transitions, this.$urlRouter, this.$view, <StateService> this, this.globals);\n    let transitionPromise = tMgr.runTransition();\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionPromise, { transition });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#is\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n   * but only checks for the full state name. If params is supplied then it will be\n   * tested for strict equality against the current active params object, so all params\n   * must match with none missing and no extras.\n   *\n   * @example\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   * test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let state = this.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    return isDefined(params) && params !== null ? Param.equals(state.parameters(), this.params, params) : true;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#includes\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * @example\n   * Partial and relative names\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   *\n   * // Using relative names (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n   * </pre>\n   *\n   * Basic globbing patterns\n   * <pre>\n   * $state.$current.name = 'contacts.details.item.url';\n   *\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * </pre>\n   *\n   * @param {string} stateOrName A partial name, relative name, or glob pattern\n   * to be searched for within the current state name.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n   * that you'd like to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n   * .includes will test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let glob = isString(stateOrName) && Glob.fromString(<string> stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    let state = this.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    // @TODO Replace with Param.equals() ?\n    return params ? equalForKeys(Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n  };\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#href\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A url generation method that returns the compiled url for the given state populated with the given params.\n   *\n   * @example\n   * <pre>\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n   * @param {object=} params An object of parameter values to fill the state's required parameters.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n   *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n   *    ancestor with a valid url).\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params?: RawParams, options?: HrefOptions): string {\n    let defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current\n    };\n    options = defaults(options, defaultHrefOpts);\n\n    let state = this.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any> this.params.$inherit(params || {}, this.$current, state);\n\n    let nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.$urlRouter.href(nav.url, Param.values(state.parameters(), params), {\n      absolute: options.absolute\n    });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#get\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Returns the state configuration object for any specific state or all states.\n   *\n   * @param {string|Object=} stateOrName (absolute or relative) If provided, will only get the config for\n   * the requested state. If not provided, returns an array of ALL state configs.\n   * @param {string|object=} base When stateOrName is a relative state reference, the state will be retrieved relative to context.\n   * @returns {Object|Array} State configuration object or array of all objects.\n   */\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) return this.stateRegistry.get();\n    return this.stateRegistry.get(stateOrName, base || this.$current);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateService.ts\n **/","/** @module path */ /** for typedoc */\n\nimport {extend, find, pick, omit, tail, mergeR, map, values} from \"../common/common\";\nimport {prop, propEq, not, curry} from \"../common/hof\";\n\nimport {RawParams} from \"../params/interface\";\nimport {TreeChanges} from \"../transition/interface\";\n\nimport {State, TargetState} from \"../state/module\";\nimport {Node} from \"../path/node\";\nimport {ResolveContext, Resolvable, ResolveInjector} from \"../resolve/module\";\nimport {Transition} from \"../transition/module\";\nimport {ViewService} from \"../view/view\";\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathFactory {\n\n  constructor() { }\n\n  /** Given a Node[], create an TargetState */\n  static makeTargetState(path: Node[]): TargetState {\n    let state = tail(path).state;\n    return new TargetState(state, state, path.map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n\n  static buildPath(targetState: TargetState) {\n    let toParams = targetState.params();\n    return targetState.$state().path.map(state => new Node(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: Node[] and a TargetState, builds a toPath: Node[] */\n  static buildToPath(fromPath: Node[], targetState: TargetState): Node[] {\n    let toPath: Node[] = PathFactory.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n  \n  static applyViewConfigs($view: ViewService, path: Node[]) {\n    return path.map(node =>\n        extend(node, { views: values(node.state.views || {}).map(view => $view.createViewConfig(node, view))})\n    );\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: Node[], toPath: Node[], toKeys: string[] = []): Node[] {\n    function nodeParamVals(path: Node[], state: State): RawParams {\n      let node: Node = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    /**\n     * Given an Node \"toNode\", return a new Node with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    let makeInheritedParamsNode = curry(function(_fromPath: Node[], _toKeys: string[], toNode: Node): Node {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      let incomingParamVals = pick(toParamVals, _toKeys);\n      toParamVals = omit(toParamVals, _toKeys);\n      let fromParamVals = nodeParamVals(_fromPath, toNode.state) || {};\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      let ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new Node(toNode.state).applyRawParams(ownParamVals);\n    });\n\n    // The param keys specified by the incoming toParams\n    return <Node[]> toPath.map(makeInheritedParamsNode(fromPath, toKeys));\n  }\n\n  /**\n   * Given a path, upgrades the path to a Node[].  Each node is assigned a ResolveContext\n   * and ParamValues object which is bound to the whole path, but closes over the subpath from root to the node.\n   * The views are also added to the node.\n   */\n  static bindTransNodesToPath(resolvePath: Node[]): Node[] {\n    let resolveContext = new ResolveContext(resolvePath);\n    // let paramValues = new ParamValues(resolvePath);\n\n    // Attach bound resolveContext and paramValues to each node\n    // Attach views to each node\n    resolvePath.forEach((node: Node) => {\n      node.resolveContext = resolveContext.isolateRootTo(node.state);\n      node.resolveInjector = new ResolveInjector(node.resolveContext, node.state);\n      node.resolves['$stateParams'] = new Resolvable(\"$stateParams\", () => node.paramValues, node.paramValues);\n    });\n\n    return resolvePath;\n  }\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: Node[], toPath: Node[], reloadState: State): TreeChanges {\n    let keep = 0, max = Math.min(fromPath.length, toPath.length);\n    const staticParams = (state) => state.parameters({ inherit: false }).filter(not(prop('dynamic'))).map(prop('id'));\n    const nodesMatch = (node1: Node, node2: Node) => node1.equals(node2, staticParams(node1.state));\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: Node, idx: number): Node {\n      let cloned = Node.clone(retainedNode);\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: Node[], retained: Node[], exiting: Node[], entering: Node[], to: Node[];\n    // intermediate vars\n    let retainedWithToParams: Node[], enteringResolvePath: Node[], toResolvePath: Node[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    retainedWithToParams  = retained.map(applyToParams);\n    enteringResolvePath   = toPath.slice(keep);\n    // \"toResolvePath\" is \"retainedWithToParams\" concat \"enteringResolvePath\".\n    toResolvePath         = (retainedWithToParams).concat(enteringResolvePath);\n\n    // \"to: is \"toResolvePath\" with ParamValues/ResolveContext added to each node and bound to the path context\n    to                    = PathFactory.bindTransNodesToPath(toResolvePath);\n\n    // \"entering\" is the tail of \"to\"\n    entering              = to.slice(keep);\n\n    return { from, to, retained, exiting, entering };\n  }\n\n  static bindTransitionResolve(treeChanges: TreeChanges, transition: Transition) {\n    let rootNode = treeChanges.to[0];\n    rootNode.resolves['$transition$'] = new Resolvable('$transition$', () => transition, transition);\n  }\n\n  /**\n   * Find a subpath of a path that stops at the node for a given state\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node, up to the\n   * node whose state matches `stateName`\n   *\n   * @param path a path of [[Node]]s\n   * @param state the [[State]] to stop at\n   */\n  static subPath(path: Node[], state): Node[] {\n    let node = find(path, _node => _node.state === state);\n    let elementIdx = path.indexOf(node);\n    if (elementIdx === -1) throw new Error(\"The path does not contain the state: \" + state);\n    return path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: Node[]) => path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./path/pathFactory.ts\n **/","/** @module path */ /** for typedoc */\nimport {extend, applyPairs, map, find, allTrueR, values, mapObj} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {State} from \"../state/module\";\nimport {RawParams} from \"../params/interface\";\nimport {Param} from \"../params/module\";\nimport {Resolvable, ResolveContext, ResolveInjector} from \"../resolve/module\";\nimport {ViewConfig} from \"../view/interface\";\nimport {Resolvables} from \"../resolve/interface\";\n\nexport class Node {\n  public state: State;\n  public paramSchema: Param[];\n  public paramValues: { [key: string]: any };\n  public resolves: Resolvables;\n  public views: ViewConfig[];\n  public resolveContext: ResolveContext;\n  public resolveInjector: ResolveInjector;\n\n  constructor(state: Node);\n  constructor(state: State);\n  constructor(state) {\n    if (state instanceof Node) {\n      let node: Node = state;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolves = extend({}, node.resolves);\n      this.views = node.views && node.views.slice();\n      this.resolveContext = node.resolveContext;\n      this.resolveInjector = node.resolveInjector;\n    } else {\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolves = mapObj(state.resolve, (fn: Function, name: string) => new Resolvable(name, fn));\n    }\n  }\n\n  applyRawParams(params: RawParams): Node {\n    const getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq(\"id\", name));\n  }\n\n  equals(node: Node, keys = this.paramSchema.map(prop('id'))): boolean {\n    const paramValsEq = key => this.parameter(key).type.equals(this.paramValues[key], node.paramValues[key]);\n    return this.state === node.state && keys.map(paramValsEq).reduce(allTrueR, true);\n  }\n\n  static clone(node: Node) {\n    return new Node(node);\n  }\n\n  /**\n   * Returns a new path which is a subpath of the first path. The new path starts from root and contains any nodes\n   * that match the nodes in the second path. Nodes are compared using their state property.\n   * @param first {Node[]}\n   * @param second {Node[]}\n   * @returns {Node[]}\n   */\n  static matching(first: Node[], second: Node[]): Node[] {\n    let matchedCount = first.reduce((prev, node, i) =>\n      prev === i && i < second.length && node.state === second[i].state ? i + 1 : prev, 0);\n    return first.slice(0, matchedCount);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./path/node.ts\n **/","/** @module resolve */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./resolvable\";\nexport * from \"./resolveContext\";\nexport * from \"./resolveInjector\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/module.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {IInjectable, find, filter, map, tail, defaults, extend, pick, omit} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {isString, isObject} from \"../common/predicates\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {Resolvables, ResolvePolicy, IOptions1} from \"./interface\";\n\nimport {Node} from \"../path/module\";\nimport {Resolvable} from \"./resolvable\";\nimport {State} from \"../state/module\";\nimport {mergeR} from \"../common/common\";\nimport {PathFactory} from \"../path/pathFactory\";\n\n// TODO: make this configurable\nlet defaultResolvePolicy = ResolvePolicy[ResolvePolicy.LAZY];\n\ninterface IPolicies { [key: string]: string; }\ninterface Promises { [key: string]: Promise<any>; }\n\nexport class ResolveContext {\n\n  private _nodeFor: Function;\n  private _pathTo: Function;\n\n  constructor(private _path: Node[]) {\n    extend(this, {\n      _nodeFor(state: State): Node {\n        return <Node> find(this._path, propEq('state', state));\n      },\n      _pathTo(state: State): Node[] {\n        return PathFactory.subPath(this._path, state);\n      }\n    });\n  }\n\n  /**\n   * Gets the available Resolvables for the last element of this path.\n   *\n   * @param state the State (within the ResolveContext's Path) for which to get resolvables\n   * @param options\n   *\n   * options.omitOwnLocals: array of property names\n   *   Omits those Resolvables which are found on the last element of the path.\n   *\n   *   This will hide a deepest-level resolvable (by name), potentially exposing a parent resolvable of\n   *   the same name further up the state tree.\n   *\n   *   This is used by Resolvable.resolve() in order to provide the Resolvable access to all the other\n   *   Resolvables at its own PathElement level, yet disallow that Resolvable access to its own injectable Resolvable.\n   *\n   *   This is also used to allow a state to override a parent state's resolve while also injecting\n   *   that parent state's resolve:\n   *\n   *   state({ name: 'G', resolve: { _G: function() { return \"G\"; } } });\n   *   state({ name: 'G.G2', resolve: { _G: function(_G) { return _G + \"G2\"; } } });\n   *   where injecting _G into a controller will yield \"GG2\"\n   */\n  getResolvables(state?: State, options?: any): Resolvables {\n    options = defaults(options, { omitOwnLocals: [] });\n\n    const path = (state ?  this._pathTo(state) : this._path);\n    const last = tail(path);\n\n    return path.reduce((memo, node) => {\n      let omitProps = (node === last) ? options.omitOwnLocals : [];\n      let filteredResolvables = omit(node.resolves, omitProps);\n      return extend(memo, filteredResolvables);\n    }, <Resolvables> {});\n  }\n\n  /** Inspects a function `fn` for its dependencies.  Returns an object containing any matching Resolvables */\n  getResolvablesForFn(fn: IInjectable): { [key: string]: Resolvable } {\n    let deps = services.$injector.annotate(<Function> fn, services.$injector.strictDi);\n    return <any> pick(this.getResolvables(), deps);\n  }\n\n  isolateRootTo(state: State): ResolveContext {\n    return new ResolveContext(this._pathTo(state));\n  }\n  \n  addResolvables(resolvables: Resolvables, state: State) {\n    extend(this._nodeFor(state).resolves, resolvables);\n  }\n  \n  /** Gets the resolvables declared on a particular state */\n  getOwnResolvables(state: State): Resolvables {\n    return extend({}, this._nodeFor(state).resolves);\n  }\n   \n  // Returns a promise for an array of resolved path Element promises\n  resolvePath(options: IOptions1 = {}): Promise<any> {\n    trace.traceResolvePath(this._path, options);\n    const promiseForNode = (node: Node) => this.resolvePathElement(node.state, options);\n    return services.$q.all(<any> map(this._path, promiseForNode)).then(all => all.reduce(mergeR, {}));\n  }\n\n  // returns a promise for all the resolvables on this PathElement\n  // options.resolvePolicy: only return promises for those Resolvables which are at \n  // the specified policy, or above.  i.e., options.resolvePolicy === 'lazy' will\n  // resolve both 'lazy' and 'eager' resolves.\n  resolvePathElement(state: State, options: IOptions1 = {}): Promise<any> {\n    // The caller can request the path be resolved for a given policy and \"below\" \n    let policy: string = options && options.resolvePolicy;\n    let policyOrdinal: number = ResolvePolicy[policy || defaultResolvePolicy];\n    // Get path Resolvables available to this element\n    let resolvables = this.getOwnResolvables(state);\n\n    const matchesRequestedPolicy = resolvable => getPolicy(state.resolvePolicy, resolvable) >= policyOrdinal;\n    let matchingResolves = filter(resolvables, matchesRequestedPolicy);\n\n    const getResolvePromise = (resolvable: Resolvable) => resolvable.get(this.isolateRootTo(state), options);\n    let resolvablePromises: Promises = <any> map(matchingResolves, getResolvePromise);\n\n    trace.traceResolvePathElement(this, matchingResolves, options);\n\n    return services.$q.all(resolvablePromises);\n  } \n  \n  \n  /**\n   * Injects a function given the Resolvables available in the path, from the first node\n   * up to the node for the given state.\n   *\n   * First it resolves all the resolvable depencies.  When they are done resolving, it invokes\n   * the function.\n   *\n   * @return a promise for the return value of the function.\n   *\n   * @param fn: the function to inject (i.e., onEnter, onExit, controller)\n   * @param locals: are the angular $injector-style locals to inject\n   * @param options: options (TODO: document)\n   */\n  invokeLater(fn: IInjectable, locals: any = {}, options: IOptions1 = {}): Promise<any> {\n    let resolvables = this.getResolvablesForFn(fn);\n    trace.tracePathElementInvoke(tail(this._path), fn, Object.keys(resolvables), extend({when: \"Later\"}, options));\n    const getPromise = (resolvable: Resolvable) => resolvable.get(this, options);\n    let promises: Promises = <any> map(resolvables, getPromise);\n    \n    return services.$q.all(promises).then(() => {\n      try {\n        return this.invokeNow(fn, locals, options);\n      } catch (error) {\n        return services.$q.reject(error);\n      }\n    });\n  }\n\n  /**\n   * Immediately injects a function with the dependent Resolvables available in the path, from\n   * the first node up to the node for the given state.\n   *\n   * If a Resolvable is not yet resolved, then null is injected in place of the resolvable.\n   *\n   * @return the return value of the function.\n   *\n   * @param fn: the function to inject (i.e., onEnter, onExit, controller)\n   * @param locals: are the angular $injector-style locals to inject\n   * @param options: options (TODO: document)\n   */\n  // Injects a function at this PathElement level with available Resolvables\n  // Does not wait until all Resolvables have been resolved; you must call PathElement.resolve() (or manually resolve each dep) first\n  invokeNow(fn: IInjectable, locals: any, options: any = {}) {\n    let resolvables = this.getResolvablesForFn(fn);\n    trace.tracePathElementInvoke(tail(this._path), fn, Object.keys(resolvables), extend({when: \"Now  \"}, options));\n    let resolvedLocals = map(resolvables, prop(\"data\"));\n    return services.$injector.invoke(<Function> fn, options.bind || null, extend({}, locals, resolvedLocals));\n  }\n}\n\n/**\n * Given a state's resolvePolicy attribute and a resolvable from that state, returns the policy ordinal for the Resolvable\n * Use the policy declared for the Resolve. If undefined, use the policy declared for the State.  If\n * undefined, use the system defaultResolvePolicy.\n * \n * @param stateResolvePolicyConf The raw resolvePolicy declaration on the state object; may be a String or Object\n * @param resolvable The resolvable to compute the policy for\n */\nfunction getPolicy(stateResolvePolicyConf, resolvable: Resolvable): number {\n  // Normalize the configuration on the state to either state-level (a string) or resolve-level (a Map of string:string)\n  let stateLevelPolicy: string = <string> (isString(stateResolvePolicyConf) ? stateResolvePolicyConf : null);\n  let resolveLevelPolicies: IPolicies = <any> (isObject(stateResolvePolicyConf) ? stateResolvePolicyConf : {});\n  let policyName = resolveLevelPolicies[resolvable.name] || stateLevelPolicy || defaultResolvePolicy;\n  return ResolvePolicy[policyName];  \n}\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolveContext.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {map} from \"../common/common\";\n\nimport {Resolvable} from \"./resolvable\";\nimport {ResolveContext} from \"./resolveContext\";\nimport {State} from \"../state/module\";\nimport {TypedMap} from \"../common/common\";\n\nexport class ResolveInjector {\n  constructor(private _resolveContext: ResolveContext, private _state: State) { }\n\n  /** Returns a promise to invoke an annotated function in the resolve context */\n  invokeLater(injectedFn, locals) {\n    return this._resolveContext.invokeLater(injectedFn, locals);\n  }\n\n  /** Invokes an annotated function in the resolve context */\n  invokeNow(injectedFn, locals) {\n    return this._resolveContext.invokeNow(null, injectedFn, locals);\n  }\n\n  /** Returns the a promise for locals (realized Resolvables) that a function wants */\n  getLocals(injectedFn) {\n    const resolve = (r: Resolvable) => r.get(this._resolveContext);\n    return map(this._resolveContext.getResolvablesForFn(injectedFn), resolve);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolveInjector.ts\n **/","/** @module transition */ /** for typedoc */\nimport {IHookRegistry, ITransitionService, TransitionOptions, IHookRegistration} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {HookRegistry} from \"./hookRegistry\";\nimport {TargetState} from \"../state/module\";\nimport {Node} from \"../path/module\";\nimport {IEventHook} from \"./interface\";\nimport {ViewService} from \"../view/view\";\n\n/**\n * The default transition options.\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null\n};\n\n/**\n * This class provides services related to Transitions.\n *\n * Most importantly, it allows global Transition Hooks to be registered, and has a factory function\n * for creating new Transitions.\n */\nexport class TransitionService implements ITransitionService, IHookRegistry {\n  constructor(public $view: ViewService) {\n    HookRegistry.mixin(new HookRegistry(), this);\n  }\n\n  /**\n   * Registers a callback function as an `onBefore` Transition Hook\n   *\n   * See [[IHookRegistry.onBefore]]\n   */\n  onBefore  : IHookRegistration;\n  /**\n   * Registers a callback function as an `onStart` Transition Hook\n   *\n   * See [[IHookRegistry.onStart]]\n   */\n  onStart   : IHookRegistration;\n  /**\n   * Registers a callback function as an `onEnter` Transition Hook\n   *\n   * See [[IHookRegistry.onEnter]]\n   */\n  onEnter   : IHookRegistration;\n  /**\n   * Registers a callback function as an `onRetain` Transition Hook\n   *\n   * See [[IHookRegistry.onRetain]]\n   */\n  onRetain  : IHookRegistration;\n  /**\n   * Registers a callback function as an `onExit` Transition Hook\n   *\n   * See [[IHookRegistry.onExit]]\n   */\n  onExit    : IHookRegistration;\n  /**\n   * Registers a callback function as an `onFinish` Transition Hook\n   *\n   * See [[IHookRegistry.onFinish]]\n   */\n  onFinish  : IHookRegistration;\n  /**\n   * Registers a callback function as an `onSuccess` Transition Hook\n   *\n   * See [[IHookRegistry.onSuccess]]\n   */\n  onSuccess : IHookRegistration;\n  /**\n   * Registers a callback function as an `onError` Transition Hook\n   *\n   * See [[IHookRegistry.onError]]\n   */\n  onError   : IHookRegistration;\n\n  /** @hidden */\n  getHooks  : (hookName: string) => IEventHook[];\n\n  private _defaultErrorHandler: ((_error) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error) {\n      console.error($error$);\n    }\n  };\n\n  defaultErrorHandler(handler: (error) => void) {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   *\n   * @param fromPath\n   * @param targetState\n   * @returns {Transition}\n   */\n  create(fromPath: Node[], targetState: TargetState) {\n    return new Transition(fromPath, targetState, this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionService.ts\n **/","/** @module path */ /** for typedoc */\nexport * from \"./node\";\nexport * from \"./pathFactory\";\n\n\n/** WEBPACK FOOTER **\n ** ./path/module.ts\n **/","/** @module url */ /** for typedoc */\nexport * from \"./urlMatcher\";\nexport * from \"./urlMatcherConfig\";\nexport * from \"./urlMatcherFactory\";\nexport * from \"./urlRouter\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/module.ts\n **/","/** @module url */ /** for typedoc */\nimport {\n  map, defaults, extend, inherit, identity,\n  unnest, tail, forEach, find, omit, pairs, allTrueR\n} from \"../common/common\";\nimport {prop, propEq } from \"../common/hof\";\nimport {isArray, isString} from \"../common/predicates\";\nimport {Param, paramTypes} from \"../params/module\";\nimport {isDefined} from \"../common/predicates\";\nimport {DefType} from \"../params/param\";\nimport {unnestR} from \"../common/common\";\nimport {arrayTuples} from \"../common/common\";\n\ninterface params {\n  $$validates: (params: string) => Array<string>;\n}\n\nfunction quoteRegExp(string: any, param?: any) {\n  let surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\nconst memoizeTo = (obj, prop, fn) => obj[prop] = obj[prop] || fn();\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:UrlMatcher\n *\n * @description\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list\n * of search parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.\n *\n * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace\n * syntax, which optionally allows a regular expression for the parameter to be specified:\n *\n * * `':'` name - colon placeholder\n * * `'*'` name - catch-all placeholder\n * * `'{' name '}'` - curly placeholder\n * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the\n *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters). For colon\n * placeholders or curly placeholders without an explicit regexp, a path parameter matches any\n * number of characters other than '/'. For catch-all placeholders the path parameter matches\n * any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n * @param {string} pattern  The pattern to compile into a matcher.\n * @param {Object} config  A configuration object hash\n * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n *\n * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any\n *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n *   non-null) will start with this prefix.\n *\n * @property {string} pattern  The pattern that was passed into the constructor\n *\n * @returns {Object}  New `UrlMatcher` object\n */\nexport class UrlMatcher {\n\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  private _cache: { path: UrlMatcher[], pattern?: RegExp } = { path: [], pattern: null };\n  private _children: UrlMatcher[] = [];\n  private _params:   Param[]      = [];\n  private _segments: string[]     = [];\n  private _compiled: string[]     = [];\n\n  public prefix: string;\n\n  constructor(public pattern: string, public config: any) {\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    let placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        last = 0, m, patterns = [];\n\n    const checkParamErrors = (id) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m, isSearch) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      let id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp || \"string\") || inherit(paramTypes.type(\"string\"), {\n          pattern: new RegExp(regexp, this.config.caseInsensitive ? 'i' : undefined)\n        })\n      };\n    }\n\n    let p, segment;\n\n    while ((m = placeholder.exec(pattern))) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    let i = segment.indexOf('?');\n\n    if (i >= 0) {\n      let search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        while ((m = searchPlaceholder.exec(search))) {\n          p = matchDetails(m, true);\n          checkParamErrors(p.id);\n          this._params.push(Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n\n    extend(this, {\n      _compiled: patterns.map(pattern => quoteRegExp.apply(null, pattern)).concat(quoteRegExp(segment)),\n      prefix: this._segments[0]\n    });\n\n    Object.freeze(this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#append\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * @TODO\n   *\n   * @example\n   * @TODO\n   *\n   * @param {UrlMatcher} url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    forEach(url._cache, (val, key) => url._cache[key] = isArray(val) ? [] : null);\n    url._cache.path = this._cache.path.concat(this);\n    return url;\n  }\n\n  isRoot(): boolean {\n    return this._cache.path.length === 0;\n  }\n\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#exec\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Tests the specified path against this matcher, and returns an object containing the captured\n   * parameter values, or null if the path does not match. The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * @example\n   * <pre>\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * </pre>\n   *\n   * @param {string} path  The URL path to match, e.g. `$location.path()`.\n   * @param {Object} search  URL search parameters, e.g. `$location.search()`.\n   * @param {string} hash  URL hash e.g. `$location.hash()`.\n   * @param {Object} options\n   * @returns {Object}  The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}) {\n    let match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.concat(this).map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$'\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    //options = defaults(options, { isolate: false });\n\n    let allParams:    Param[] = this.parameters(),\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()),\n        searchParams: Param[] = allParams.filter(param => param.isSearch()),\n        nPathSegments  = this._cache.path.concat(this).map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n        values = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(string: string) {\n      const reverseString = (str: string) => str.split(\"\").reverse().join(\"\");\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, \"-\");\n\n      let split = reverseString(string).split(/-(?!\\\\)/);\n      let allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      let param: Param = pathParams[i];\n      let value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    forEach(searchParams, param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values[\"#\"] = hash;\n\n    return values;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#parameters\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Returns the names of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.concat(this).map(prop('_params')));\n  }\n\n  parameter(id: string, opts: any = {}): Param {\n    const parent = tail(this._cache.path);\n\n    return (\n      find(this._params, propEq('id', id)) ||\n      (opts.inherit !== false && parent && parent.parameter(id)) ||\n      null\n    );\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#validates\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param {Object} params The object hash of parameters to validate.\n   * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params): boolean {\n    const validParamVal = (param: Param, val) => !param || param.validates(val);\n    return pairs(params || {}).map(([key, val]) => validParamVal(this.parameter(key), val)).reduce(allTrueR, true);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#format\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters. Null values for path parameters are\n   * treated as empty strings.\n   *\n   * @example\n   * <pre>\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * </pre>\n   *\n   * @param {Object} values  the values to substitute for the parameters in this pattern.\n   * @returns {string}  the formatted URL (path and optionally search part).\n   */\n  format(values = {}) {\n    if (!this.validates(values)) return null;\n\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    let urlMatchers = this._cache.path.slice().concat(this);\n\n    // Extract all the static segments and Params into an ordered array\n    let pathSegmentsAndParams: Array<string|Param> =\n        urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(unnestR, []);\n\n    // Extract the query params into a separate array\n    let queryParams: Array<Param> =\n        urlMatchers.map(UrlMatcher.queryParams).reduce(unnestR, []);\n\n    /**\n     * Given a Param,\n     * Applies the parameter value, then returns details about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      let value = param.value(values[param.id]);\n      let isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      let squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      let encoded = param.type.encode(value);\n\n      return { param, value, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    let pathString = pathSegmentsAndParams.reduce((acc: string, x: string|Param) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a Param.  Fetch details about the parameter value\n      let {squash, encoded, param} = getDetails(<Param> x);\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]> encoded, UrlMatcher.encodeDashes).join(\"-\");\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.type.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string> encoded);\n    }, \"\");\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    let queryString = queryParams.map((param: Param) => {\n      let {squash, encoded, isDefaultValue} = getDetails(param);\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [<string> encoded];\n      if (encoded.length === 0) return;\n      if (!param.type.raw) encoded = map(<string[]> encoded, encodeURIComponent);\n\n      return (<string[]> encoded).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join(\"&\");\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n  }\n\n  static encodeDashes(str) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    let staticSegments = matcher._segments;\n    let pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(unnestR, []).filter(x => x !== \"\" && isDefined(x));\n  }\n\n  /** Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n}\n\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcher.ts\n **/","/** @module url */ /** for typedoc */\nimport {forEach, extend} from \"../common/common\";\nimport {isObject, isDefined, isFunction} from \"../common/predicates\";\n\nimport {UrlMatcher, matcherConfig} from \"./module\";\nimport {Param, paramTypes, Type} from \"../params/module\";\n\nfunction getDefaultConfig() {\n  return {\n    strict: matcherConfig.strictMode(),\n    caseInsensitive: matcherConfig.caseInsensitive()\n  };\n}\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory {\n  constructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n  caseInsensitive(value: boolean) {\n    return matcherConfig.caseInsensitive(value);\n  }\n\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n  strictMode(value: boolean) {\n    return matcherConfig.strictMode(value);\n  }\n\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n  defaultSquashPolicy(value: string) {\n    return matcherConfig.defaultSquashPolicy(value);\n  }\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any) {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  };\n\n  /**\n   * Registers a custom [[Type]] object that can be used to generate URLs with typed parameters.\n   *\n   * @param name  The type name.\n   * @param definition The type definition. See [[Type]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app\n   *        runtime starts.  The result of this function is merged into the existing `definition`.\n   *        See [[Type]] for information on the values accepted.\n   *\n   * @returns - if a type was registered: the [[UrlMatcherFactory]]\n   *   - if only the `name` parameter was specified: the currently registered [[Type]] object, or undefined\n   *\n   * ---\n   *\n   * This is a simple example of a custom type that encodes and decodes items from an\n   * array, using the array index as the URL-encoded value:\n   *\n   * @example\n   * ```\n   *\n   * var list = ['John', 'Paul', 'George', 'Ringo'];\n   *\n   * $urlMatcherFactoryProvider.type('listItem', {\n   *   encode: function(item) {\n   *     // Represent the list item in the URL using its corresponding index\n   *     return list.indexOf(item);\n   *   },\n   *   decode: function(item) {\n   *     // Look up the list item by index\n   *     return list[parseInt(item, 10)];\n   *   },\n   *   is: function(item) {\n   *     // Ensure the item is valid by checking to see that it appears\n   *     // in the list\n   *     return list.indexOf(item) > -1;\n   *   }\n   * });\n   *\n   * $stateProvider.state('list', {\n   *   url: \"/list/{item:listItem}\",\n   *   controller: function($scope, $stateParams) {\n   *     console.log($stateParams.item);\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * // Changes URL to '/list/3', logs \"Ringo\" to the console\n   * $state.go('list', { item: \"Ringo\" });\n   * ```\n   */\n  type(name: string, definition?: (Function|Type), definitionFn?: Function) {\n    let type = paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n\n  /** @hidden */\n  $get() {\n    paramTypes.enqueue = false;\n    paramTypes._flushTypeQueue();\n    return this;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherFactory.ts\n **/","/** @module url */ /** for typedoc */\nimport {extend, bindFunctions} from \"../common/common\";\nimport {isFunction, isString, isDefined, isArray} from \"../common/predicates\";\nimport {UrlMatcher} from \"./module\";\nimport {services} from \"../common/coreservices\";\nimport {UrlMatcherFactory} from \"./urlMatcherFactory\";\nimport {StateParams} from \"../params/stateParams\";\n\nlet $location = services.location;\n\n// Returns a string that is a prefix of all strings matching the RegExp\nfunction regExpPrefix(re) {\n  let prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n  return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n}\n\n// Interpolates matched values into a String.replace()-style pattern\nfunction interpolate(pattern, match) {\n  return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n    return match[what === '$' ? 0 : Number(what)];\n  });\n}\n\nfunction handleIfMatch($injector, $stateParams, handler, match) {\n  if (!match) return false;\n  let result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n  return isDefined(result) ? result : true;\n}\n\nfunction appendBasePath(url, isHtml5, absolute) {\n  let baseHref = services.locationConfig.baseHref();\n  if (baseHref === '/') return url;\n  if (isHtml5) return baseHref.slice(0, -1) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\nfunction update(rules: Function[], otherwiseFn: Function, evt?: any) {\n  if (evt && evt.defaultPrevented) return;\n\n  function check(rule) {\n    let handled = rule(services.$injector, $location);\n\n    if (!handled) return false;\n    if (isString(handled)) {\n      $location.replace();\n      $location.url(handled);\n    }\n    return true;\n  }\n  let n = rules.length, i;\n\n  for (i = 0; i < n; i++) {\n    if (check(rules[i])) return;\n  }\n  // always check otherwise last to allow dynamic updates to the set of rules\n  if (otherwiseFn) check(otherwiseFn);\n}\n\n\n/**\n * @ngdoc object\n * @name ui.router.router.$urlRouterProvider\n *\n * @requires ui.router.util.$urlMatcherFactoryProvider\n * @requires $locationProvider\n *\n * @description\n * `$urlRouterProvider` has the responsibility of watching `$location`.\n * When `$location` changes it runs through a list of rules one by one until a\n * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify\n * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n *\n * There are several methods on `$urlRouterProvider` that make it useful to use directly\n * in your module config.\n */\nexport class UrlRouterProvider {\n  /** @hidden */\n  rules = [];\n  /** @hidden */\n  otherwiseFn: Function = null;\n  /** @hidden */\n  interceptDeferred = false;\n\n  constructor(private $urlMatcherFactory: UrlMatcherFactory, private $stateParams: StateParams) {\n\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#rule\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines rules that are used by `$urlRouterProvider` to find matches for\n   * specific URLs.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {function} rule Handler function that takes `$injector` and `$location`\n   * services as arguments. You can use them to return a valid path as a string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  rule(rule) {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    this.rules.push(rule);\n    return this;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouterProvider#otherwise\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines a path that is used when an invalid route is requested.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|function} rule The url path you want to redirect to or a function\n   * rule that returns the url path. The function version is passed two params:\n   * `$injector` and `$location` services, and must return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  otherwise(rule) {\n    if (!isFunction(rule) && !isString(rule)) throw new Error(\"'rule' must be a string or function\");\n    this.otherwiseFn = isString(rule) ? () => rule : rule;\n    return this;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#when\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable. It gets invoked if `$location`\n   * matches. You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} what The incoming path that you want to redirect.\n   * @param {string|function} handler The path you want to redirect your user to.\n   */\n  when(what, handler) {\n    let {$urlMatcherFactory, $stateParams} = this;\n    let redirect, handlerIsString = isString(handler);\n\n    // @todo Queue this\n    if (isString(what)) what = $urlMatcherFactory.compile(what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    let strategies = {\n      matcher: function (_what, _handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(_handler);\n          _handler = ['$match', redirect.format.bind(redirect)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n        }, {\n          prefix: isString(_what.prefix) ? _what.prefix : ''\n        });\n      },\n      regex: function (_what, _handler) {\n        if (_what.global || _what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = _handler;\n          _handler = ['$match', ($match) => interpolate(redirect, $match)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(_what)\n        });\n      }\n    };\n\n    let check = {\n      matcher: $urlMatcherFactory.isMatcher(what),\n      regex: what instanceof RegExp\n    };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#deferIntercept\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Disables (or enables) deferring location change interception.\n   *\n   * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n   * defer a transition but maintain the current URL), call this method at configuration time.\n   * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n   * `$locationChangeSuccess` event handler.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   // this allows you to configure custom behavior in between\n   *   // location changes and route synchronization:\n   *   $urlRouterProvider.deferIntercept();\n   *\n   * }).run(function ($rootScope, $urlRouter, UserService) {\n   *\n   *   $rootScope.$on('$locationChangeSuccess', function(e) {\n   *     // UserService is an example service for managing user state\n   *     if (UserService.isLoggedIn()) return;\n   *\n   *     // Prevent $urlRouter's default handler from firing\n   *     e.preventDefault();\n   *\n   *     UserService.handleLogin().then(function() {\n   *       // Once the user has logged in, sync the current URL\n   *       // to the router:\n   *       $urlRouter.sync();\n   *     });\n   *   });\n   *\n   *   // Configures $urlRouter's listener *after* your custom listener\n   *   $urlRouter.listen();\n   * });\n   * </pre>\n   *\n   * @param {boolean} defer Indicates whether to defer location change interception. Passing\n   *        no parameter is equivalent to `true`.\n   */\n  deferIntercept(defer) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nexport class UrlRouter {\n  private location: string;\n  private listener: Function;\n\n  constructor(private urlRouterProvider: UrlRouterProvider) {\n    bindFunctions(UrlRouter.prototype, this, this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouter#sync\n   * @methodOf ui.router.router.$urlRouter\n   *\n   * @description\n   * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n   * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n   * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n   * with the transition by calling `$urlRouter.sync()`.\n   *\n   * @example\n   * <pre>\n   * angular.module('app', ['ui.router'])\n   *   .run(function($rootScope, $urlRouter) {\n   *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n   *       // Halt state change from even starting\n   *       evt.preventDefault();\n   *       // Perform custom logic\n   *       var meetsRequirement = ...\n   *       // Continue with the update and state transition if logic allows\n   *       if (meetsRequirement) $urlRouter.sync();\n   *     });\n   * });\n   * </pre>\n   */\n  sync() {\n    update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n  }\n\n  listen() {\n    return this.listener = this.listener || $location.onChange(evt => update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn, evt));\n  }\n\n  update(read?) {\n    if (read) {\n      this.location = $location.url();\n      return;\n    }\n    if ($location.url() === this.location) return;\n\n    $location.url(this.location);\n    $location.replace();\n  }\n\n  push(urlMatcher, params, options) {\n    $location.url(urlMatcher.format(params || {}));\n    if (options && options.replace) $location.replace();\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouter#href\n   * @methodOf ui.router.router.$urlRouter\n   *\n   * @description\n   * A URL generation method that returns the compiled URL for a given\n   * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n   *\n   * @example\n   * <pre>\n   * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n   *   person: \"bob\"\n   * });\n   * // $bob == \"/about/bob\";\n   * </pre>\n   *\n   * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n   * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params: any, options: any): string {\n    if (!urlMatcher.validates(params)) return null;\n\n    let url = urlMatcher.format(params);\n    options = options || {};\n\n    let cfg = services.locationConfig;\n    let isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute);\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n    port = <any> (port === 80 || port === 443 ? '' : ':' + port);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlRouter.ts\n **/","/** @module view */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./view\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./view/module.ts\n **/","/** @module view */ /** for typedoc */\nimport {equals, applyPairs, removeFrom, TypedMap} from \"../common/common\";\nimport {curry, prop} from \"../common/hof\";\nimport {isString} from \"../common/predicates\";\nimport {trace} from \"../common/module\";\nimport {Node} from \"../path/node\";\n\nimport {ActiveUIView, ViewContext, ViewConfig} from \"./interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nconst match = (obj1, ...keys) =>\n    (obj2) => keys.reduce((memo, key) => memo && obj1[key] === obj2[key], true);\n\nexport type ViewConfigFactory = (node: Node, decl: _ViewDeclaration) => ViewConfig;\n\n/**\n * The View service\n */\nexport class ViewService {\n  private uiViews: ActiveUIView[] = [];\n  private viewConfigs: ViewConfig[] = [];\n  private _rootContext;\n  private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n\n  constructor() { }\n\n  rootContext(context) {\n    return this._rootContext = context || this._rootContext;\n  };\n\n  viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(node: Node, decl: _ViewDeclaration): ViewConfig {\n    let cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n    return cfgFactory(node, decl);\n  }\n  \n  /**\n   * De-registers a ViewConfig.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n    removeFrom(this.viewConfigs, viewConfig);\n  };\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"-> Registering\", <any> viewConfig);\n    this.viewConfigs.push(viewConfig);\n  };\n\n  sync = () => {\n    let uiViewsByFqn: TypedMap<ActiveUIView> =\n        this.uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any> {});\n\n    /**\n     * Given a ui-view and a ViewConfig, determines if they \"match\".\n     *\n     * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n     * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n     *\n     * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n     * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n     *\n     * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n     * - the ui-view's name matches the ViewConfig's target name\n     * - the ui-view's context matches the ViewConfig's anchor\n     *\n     * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n     * - There exists a parent ui-view where:\n     *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n     *    - the parent ui-view's context matches the ViewConfig's anchor\n     * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n     *\n     * Example:\n     *\n     * DOM:\n     * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n     *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n     *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n     *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n     *       </div>\n     *     </div>\n     *   </div>\n     * </div>\n     *\n     * uiViews: [\n     *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n     *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n     *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n     *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n     * ]\n     *\n     * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n     *\n     * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n     * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n     * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n     * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n     *\n     * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n     * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n     * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n     *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n     *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n     * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n     *   the tail of the ui-view's fqn \"default.bar\"\n     */\n    const matches = (uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n      // Split names apart from both viewConfig and uiView into segments\n      let vc = viewConfig.viewDecl;\n      let vcSegments = vc.$uiViewName.split(\".\");\n      let uivSegments = uiView.fqn.split(\".\");\n\n      // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n      // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n      if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n        return false;\n\n      // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n      // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n      let negOffset = (1 - vcSegments.length) || undefined;\n      let fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n      let uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n      return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n\n    // Return the number of dots in the fully qualified name\n    function uiViewDepth(uiView: ActiveUIView) {\n      return uiView.fqn.split(\".\").length;\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context, count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = uiView => {\n      let matchingConfigs = this.viewConfigs.filter(matches(uiView));\n      if (matchingConfigs.length > 1)\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      return [uiView, matchingConfigs[0]];\n    };\n\n    const configureUiView = ([uiView, viewConfig]) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this.uiViews.indexOf(uiView) !== -1)\n        uiView.configUpdated(viewConfig);\n    };\n\n    this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUiView);\n  };\n\n  /**\n   * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n   * be updated with a template, controller, and local variables.\n   *\n   * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n   * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n   *                   of the view.\n   * @return {Function} Returns a de-registration function used when the view is destroyed.\n   */\n  registerUiView(uiView: ActiveUIView) {\n    trace.traceViewServiceUiViewEvent(\"-> Registering\", uiView);\n    let uiViews = this.uiViews;\n    const fqnMatches = uiv => uiv.fqn === uiView.fqn;\n    if (uiViews.filter(fqnMatches).length)\n      trace.traceViewServiceUiViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      let idx = uiViews.indexOf(uiView);\n      if (idx <= 0) {\n        trace.traceViewServiceUiViewEvent(\"Tried removing non-registered uiView\", uiView);\n        return;\n      }\n      trace.traceViewServiceUiViewEvent(\"<- Deregistering\", uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this.uiViews.map(prop(\"fqn\"));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this.uiViews.filter(prop(\"$config\")).map(prop(\"name\"));\n  }\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUiViewTarget(context: ViewContext, rawViewName = \"\") {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    let viewAtContext: string[] = rawViewName.split(\"@\");\n    let uiViewName = viewAtContext[0] || \"$default\";  // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : \"^\";    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    let relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = \"\"; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    let relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      let anchor = uiViewContextAnchor.split(\".\").reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchor.name;\n    }\n\n    return {uiViewName, uiViewContextAnchor};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./view/view.ts\n **/","/** @module core */ /** */\nimport {StateParams} from \"./params/stateParams\";\nimport {StateDeclaration} from \"./state/interface\";\nimport {State} from \"./state/stateObject\";\nimport {Transition} from \"./transition/transition\";\nimport {Queue} from \"./common/queue\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {copy} from \"./common/common\";\n\n/**\n * Global mutable state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, last successful transition, last attempted transition, etc.\n */\nexport class UIRouterGlobals {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams = new StateParams();\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  $current: State;\n  /**\n   * The current transition (in progress)\n   */\n  transition: Transition;\n  /**\n   * The transition history\n   *\n   * This queue's size is limited to a maximum number (default: 1)\n   */\n  transitionHistory = new Queue<Transition>([], 1);\n  /**\n   * The history of successful transitions\n   *\n   * This queue's size is limited to a maximum number (default: 1)\n   */\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  constructor(transitionService: TransitionService) {\n    const beforeNewTransition = ($transition$) => {\n\n      this.transition = $transition$;\n      this.transitionHistory.enqueue($transition$);\n\n      const updateGlobalState = () => {\n        this.successfulTransitions.enqueue($transition$);\n        this.$current = $transition$.$to();\n        this.current = this.$current.self;\n        copy($transition$.params(), this.params);\n      };\n\n      $transition$.onSuccess({}, updateGlobalState, {priority: 10000});\n\n      const clearCurrentTransition = () => { if (this.transition === $transition$) this.transition = null; };\n\n      $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\n    };\n\n    transitionService.onBefore({}, ['$transition$', beforeNewTransition]);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./globals.ts\n **/","/** @module core */ /** */\nimport {UrlMatcherFactory} from \"./url/urlMatcherFactory\";\nimport {UrlRouterProvider} from \"./url/urlRouter\";\nimport {StateProvider} from \"./state/state\";\nimport {UrlRouter} from \"./url/urlRouter\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {ViewService} from \"./view/view\";\nimport {StateRegistry} from \"./state/stateRegistry\";\nimport {StateService} from \"./state/stateService\";\nimport {UIRouterGlobals} from \"./globals\";\n\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * This class instantiates and wires the global UI-Router services.\n *\n * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n */\nexport class UIRouter {\n  viewService = new ViewService();\n\n  transitionService: TransitionService = new TransitionService(this.viewService);\n\n  globals: UIRouterGlobals = new UIRouterGlobals(this.transitionService);\n\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n\n  urlRouterProvider: UrlRouterProvider = new UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\n  urlRouter: UrlRouter = new UrlRouter(this.urlRouterProvider);\n\n  stateRegistry: StateRegistry = new StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\n  /** @hidden TODO: move this to ng1.ts */\n  stateProvider = new StateProvider(this.stateRegistry);\n\n  stateService = new StateService(this.viewService, this.urlRouter, this.transitionService, this.stateRegistry, this.stateProvider, this.globals);\n\n  constructor() {\n    this.viewService.rootContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./router.ts\n **/","/**\n * # UI-Router for Angular 1\n *\n * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.\n * - Also registers some services with the angular 1 injector.\n * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.\n *\n * @module ng1\n * @preferred\n */\n\n/** for typedoc */\nimport {UIRouter} from \"../router\";\nimport {services} from \"../common/coreservices\";\nimport {map, bindFunctions, removeFrom, find, noop} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {isObject} from \"../common/predicates\";\nimport {Node} from \"../path/module\";\nimport {Resolvable, ResolveContext} from \"../resolve/module\";\nimport {State} from \"../state/module\";\nimport {trace} from \"../common/trace\";\nimport {ng1ViewsBuilder, ng1ViewConfigFactory, Ng1ViewConfig} from \"./viewsBuilder\";\nimport {TemplateFactory} from \"./templateFactory\";\n\n/** @hidden */\nlet app = angular.module(\"ui.router.angular1\", []);\n\n/**\n * @ngdoc overview\n * @name ui.router.util\n *\n * @description\n * # ui.router.util sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.util', ['ng', 'ui.router.init']);\n\n/**\n * @ngdoc overview\n * @name ui.router.router\n *\n * @requires ui.router.util\n *\n * @description\n * # ui.router.router sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n */\nangular.module('ui.router.router', ['ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router.state\n *\n * @requires ui.router.router\n * @requires ui.router.util\n *\n * @description\n * # ui.router.state sub-module\n *\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\n\n/**\n * @ngdoc overview\n * @name ui.router\n *\n * @requires ui.router.state\n *\n * @description\n * # ui.router\n *\n * ## The main module for ui.router\n * There are several sub-modules included with the ui.router module, however only this module is needed\n * as a dependency within your angular app. The other modules are for organization purposes.\n *\n * The modules are:\n * * ui.router - the main \"umbrella\" module\n * * ui.router.router -\n *\n * *You'll need to include **only** this module as the dependency within your angular app.*\n *\n * <pre>\n * <!doctype html>\n * <html ng-app=\"myApp\">\n * <head>\n *   <script src=\"js/angular.js\"></script>\n *   <!-- Include the ui-router script -->\n *   <script src=\"js/angular-ui-router.min.js\"></script>\n *   <script>\n *     // ...and add 'ui.router' as a dependency\n *     var myApp = angular.module('myApp', ['ui.router']);\n *   </script>\n * </head>\n * <body>\n * </body>\n * </html>\n * </pre>\n */\nangular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\n\nangular.module('ui.router.compat', ['ui.router']);\n\n/**\n * Annotates a controller expression (may be a controller function(), a \"controllername\",\n * or \"controllername as name\")\n *\n * - Temporarily decorates $injector.instantiate.\n * - Invokes $controller() service\n *   - Calls $injector.instantiate with controller constructor\n * - Annotate constructor\n * - Undecorate $injector\n *\n * returns an array of strings, which are the arguments of the controller expression\n */\n\nexport function annotateController(controllerExpression): string[] {\n  let $injector = services.$injector;\n  let $controller = $injector.get(\"$controller\");\n  let oldInstantiate = $injector.instantiate;\n  try {\n    let deps;\n\n    $injector.instantiate = function fakeInstantiate(constructorFunction) {\n      $injector.instantiate = oldInstantiate; // Un-decorate ASAP\n      deps = $injector.annotate(constructorFunction);\n    };\n\n    $controller(controllerExpression, { $scope: {} });\n\n    return deps;\n  } finally {\n    $injector.instantiate = oldInstantiate;\n  }\n}\n\nrunBlock.$inject = ['$injector', '$q'];\nfunction runBlock($injector, $q) {\n  services.$injector = $injector;\n  services.$q = $q;\n}\n\napp.run(runBlock);\n\nlet router: UIRouter = null;\n\nng1UIRouter.$inject = ['$locationProvider'];\n/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\nfunction ng1UIRouter($locationProvider) {\n\n  // Create a new instance of the Router when the ng1UIRouterProvider is initialized\n  router = new UIRouter();\n  \n  // Apply ng1 `views` builder to the StateBuilder\n  router.stateRegistry.decorator(\"views\", ng1ViewsBuilder);\n\n  router.viewService.viewConfigFactory('ng1', ng1ViewConfigFactory);\n\n  // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix\n  bindFunctions($locationProvider, services.locationConfig, $locationProvider, ['hashPrefix']);\n\n  // Create a LocationService.onChange registry\n  let urlListeners: Function[] = [];\n  services.location.onChange = (callback) => {\n    urlListeners.push(callback);\n    return () => removeFrom(urlListeners)(callback);\n  };\n\n  this.$get = $get;\n  $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\n  function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {\n\n    // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n    $rootScope.$on(\"$locationChangeSuccess\", evt => urlListeners.forEach(fn => fn(evt)));\n\n    // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history\n    services.locationConfig.html5Mode = function() {\n      let html5Mode = $locationProvider.html5Mode();\n      html5Mode = isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n      return html5Mode && $sniffer.history;\n    };\n\n    services.template.get = (url: string) =>\n        $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' }}).then(prop(\"data\"));\n\n    // Bind these LocationService functions to $location\n    bindFunctions($location, services.location, $location, [\"replace\", \"url\", \"path\", \"search\", \"hash\"]);\n    // Bind these LocationConfig functions to $location\n    bindFunctions($location, services.locationConfig, $location, ['port', 'protocol', 'host']);\n    // Bind these LocationConfig functions to $browser\n    bindFunctions($browser, services.locationConfig, $browser, ['baseHref']);\n\n    return router;\n  }\n}\n\nconst resolveFactory = () => ({\n  /**\n   * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.\n   * @param invocables an object, with keys as resolve names and values as injectable functions\n   * @param locals key/value pre-resolved data (locals)\n   * @param parent a promise for a \"parent resolve\"\n   */\n  resolve: (invocables, locals = {}, parent?) => {\n    let parentNode = new Node(new State(<any> { params: {} }));\n    let node = new Node(new State(<any> { params: {} }));\n    let context = new ResolveContext([parentNode, node]);\n\n    context.addResolvables(Resolvable.makeResolvables(invocables), node.state);\n\n    const resolveData = (parentLocals) => {\n      const rewrap = _locals => Resolvable.makeResolvables(<any> map(_locals, local => () => local));\n      context.addResolvables(rewrap(parentLocals), parentNode.state);\n      context.addResolvables(rewrap(locals), node.state);\n      return context.resolvePath();\n    };\n\n    return parent ? parent.then(resolveData) : resolveData({});\n  }\n});\n\nfunction $stateParamsFactory(ng1UIRouter) {\n  return ng1UIRouter.globals.params;\n}\n\n// The 'ui.router' ng1 module depends on 'ui.router.init' module.\nangular.module('ui.router.init', []).provider(\"ng1UIRouter\", <any> ng1UIRouter);\n// This effectively calls $get() to init when we enter runtime\nangular.module('ui.router.init').run(['ng1UIRouter', function(ng1UIRouter) { }]);\n\n// $urlMatcherFactory service and $urlMatcherFactoryProvider\nangular.module('ui.router.util').provider('$urlMatcherFactory', ['ng1UIRouterProvider', () => router.urlMatcherFactory]);\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);\n\n// $urlRouter service and $urlRouterProvider\nfunction getUrlRouterProvider() {\n  router.urlRouterProvider[\"$get\"] = function() {\n    router.urlRouter.update(true);\n    if (!this.interceptDeferred) router.urlRouter.listen();\n    return router.urlRouter;\n  };\n  return router.urlRouterProvider;\n}\nangular.module('ui.router.router').provider('$urlRouter', ['ng1UIRouterProvider', getUrlRouterProvider]);\nangular.module('ui.router.router').run(['$urlRouter', function($urlRouter) { }]);\n\n// $state service and $stateProvider\n// $urlRouter service and $urlRouterProvider\nfunction getStateProvider() {\n  router.stateProvider[\"$get\"] = function() {\n    // Autoflush once we are in runtime\n    router.stateRegistry.stateQueue.autoFlush(router.stateService);\n    return router.stateService;\n  };\n  return router.stateProvider;\n}\nangular.module('ui.router.state').provider('$state', ['ng1UIRouterProvider', getStateProvider]);\nangular.module('ui.router.state').run(['$state', function($state) { }]);\n\n// $stateParams service\nangular.module('ui.router.state').factory('$stateParams', ['ng1UIRouter', (ng1UIRouter) =>\n    ng1UIRouter.globals.params]);\n\n// $transitions service and $transitionsProvider\nfunction getTransitionsProvider() {\n  loadAllControllerLocals.$inject = ['$transition$'];\n  function loadAllControllerLocals($transition$) {\n    const loadLocals = (vc: Ng1ViewConfig) => {\n      let node = (<Node> find($transition$.treeChanges().to, propEq('state', vc.viewDecl.$context)));\n      // Temporary fix; This whole callback should be nuked when fixing #2662\n      if (!node) return services.$q.when();\n      let resolveCtx = node.resolveContext;\n      let controllerDeps = annotateController(vc.controller);\n      let resolvables = resolveCtx.getResolvables();\n\n      function $loadControllerLocals() { }\n      $loadControllerLocals.$inject = controllerDeps.filter(dep => resolvables.hasOwnProperty(dep));\n      // Load any controller resolves that aren't already loaded\n      return resolveCtx.invokeLater($loadControllerLocals)\n          // Then provide the view config with all the resolved data\n          .then(() => vc.locals = map(resolvables, res => res.data));\n    };\n\n    let loadAllLocals = $transition$.views(\"entering\").filter(vc => !!vc.controller).map(loadLocals);\n    return services.$q.all(loadAllLocals).then(noop);\n  }\n  router.transitionService.onFinish({}, loadAllControllerLocals);\n\n  router.transitionService[\"$get\"] = () => router.transitionService;\n  return router.transitionService;\n}\nangular.module('ui.router.state').provider('$transitions', ['ng1UIRouterProvider', getTransitionsProvider]);\n\n// $templateFactory service\nangular.module('ui.router.util').factory('$templateFactory', ['ng1UIRouter', () => new TemplateFactory()]);\n\n// The $view service\nangular.module('ui.router').factory('$view', () => router.viewService);\n\n// The old $resolve service\nangular.module('ui.router').factory('$resolve', <any> resolveFactory);\n\n// $trace service\nangular.module(\"ui.router\").service(\"$trace\", () => trace);\nwatchDigests.$inject = ['$rootScope'];\nexport function watchDigests($rootScope) {\n  $rootScope.$watch(function() { trace.approximateDigests++; });\n}\nangular.module(\"ui.router\").run(watchDigests);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/services.ts\n **/","/** @module ng1 */ /** */\nimport {State} from \"../state/stateObject\";\nimport {pick, forEach, anyTrueR, unnestR} from \"../common/common\";\nimport {kebobString} from \"../common/strings\";\nimport {ViewConfig} from \"../view/interface\";\nimport {Ng1ViewDeclaration} from \"./interface\";\nimport {ViewService} from \"../view/view\";\nimport {isInjectable, isDefined, isString, isObject} from \"../common/predicates\";\nimport {services} from \"../common/coreservices\";\nimport {trace} from \"../common/trace\";\nimport {Node} from \"../path/node\";\nimport {TemplateFactory} from \"./templateFactory\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\n\nexport const ng1ViewConfigFactory = (node, view) => new Ng1ViewConfig(node, view);\n\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to angular-ui-router (ng1).\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n * and applies the state-level configuration to a view named `$default`.\n */\nexport function ng1ViewsBuilder(state: State) {\n  let tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'],\n      ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'],\n      compKeys = ['component', 'bindings'],\n      nonCompKeys = tplKeys.concat(ctrlKeys),\n      allKeys = compKeys.concat(nonCompKeys);\n\n  let views = {}, viewsObject = state.views || {\"$default\": pick(state, allKeys)};\n\n  forEach(viewsObject, function (config: Ng1ViewDeclaration, name) {\n    // Account for views: { \"\": { template... } }\n    name = name || \"$default\";\n    // Account for views: { header: \"headerComponent\" }\n    if (isString(config)) config = { component: <string> config };\n    if (!Object.keys(config).length) return;\n\n    // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)\n    if (config.component) {\n      if (nonCompKeys.map(key => isDefined(config[key])).reduce(anyTrueR, false)) {\n        throw new Error(`Cannot combine: ${compKeys.join(\"|\")} with: ${nonCompKeys.join(\"|\")} in stateview: 'name@${state.name}'`);\n      }\n\n      // Dynamically build a template like \"<component-name input1='$resolve.foo'></component-name>\"\n      config.templateProvider = ['$injector', function($injector) {\n        const resolveFor = key => config.bindings && config.bindings[key] || key;\n        const prefix = angular.version.minor >= 3 ? \"::\" : \"\";\n        let attrs = getComponentInputs($injector, config.component)\n            .map(key => `${kebobString(key)}='${prefix}$resolve.${resolveFor(key)}'`).join(\" \");\n        let kebobName = kebobString(config.component);\n        return `<${kebobName} ${attrs}></${kebobName}>`;\n      }];\n    }\n\n    config.resolveAs = config.resolveAs || '$resolve';\n    config.$type = \"ng1\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUiViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\n// for ng 1.2 style, process the scope: { input: \"=foo\" } object\nconst scopeBindings = bindingsObj => Object.keys(bindingsObj || {})\n      .map(key => [key, /^[=<](.*)/.exec(bindingsObj[key])])\n      .filter(tuple => isDefined(tuple[1]))\n      .map(tuple => tuple[1][1] || tuple[0]);\n\n// for ng 1.3+ bindToController or 1.5 component style, process a $$bindings object\nconst bindToCtrlBindings = bindingsObj => Object.keys(bindingsObj || {})\n      .filter(key => !!/[=<]/.exec(bindingsObj[key].mode))\n      .map(key => bindingsObj[key].attrName);\n\n// Given a directive definition, find its object input attributes\n// Use different properties, depending on the type of directive (component, bindToController, normal)\nconst getBindings = def => {\n  if (isObject(def.bindToController)) return scopeBindings(def.bindToController);\n  if (def.$$bindings && def.$$bindings.bindToController) return bindToCtrlBindings(def.$$bindings.bindToController);\n  if (def.$$isolateBindings) return bindToCtrlBindings(def.$$isolateBindings);\n  return <any> scopeBindings(def.scope);\n};\n\n// Gets all the directive(s)' inputs ('=' and '<')\nfunction getComponentInputs($injector, name) {\n  let cmpDefs = $injector.get(name + \"Directive\"); // could be multiple\n  if (!cmpDefs || !cmpDefs.length) throw new Error(`Unable to find component named '${name}'`);\n  return cmpDefs.map(getBindings).reduce(unnestR, []);\n}\n\nexport class Ng1ViewConfig implements ViewConfig {\n  loaded: boolean = false;\n  controller: Function;\n  template: string;\n  locals: any; // TODO: delete me\n\n  constructor(public node: Node, public viewDecl: Ng1ViewDeclaration) { }\n\n  load() {\n    let $q = services.$q;\n    if (!this.hasTemplate())\n      throw new Error(`No template configuration specified for '${this.viewDecl.$uiViewName}@${this.viewDecl.$uiViewContextAnchor}'`);\n\n    let injector = this.node.resolveContext;\n    let params = this.node.paramValues;\n    let promises: any = {\n      template: $q.when(this.getTemplate(params, new TemplateFactory(), injector)),\n      controller: $q.when(this.getController(injector))\n    };\n\n    return $q.all(promises).then((results) => {\n      trace.traceViewServiceEvent(\"Loaded\", this);\n      this.controller = results.controller;\n      this.template = results.template;\n    });\n  }\n\n  /**\n   * Checks a view configuration to ensure that it specifies a template.\n   *\n   * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.\n   */\n  hasTemplate() {\n    return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);\n  }\n\n  getTemplate(params, $factory, injector: ResolveContext) {\n    return $factory.fromConfig(this.viewDecl, params, injector.invokeLater.bind(injector));\n  }\n\n  /**\n   * Gets the controller for a view configuration.\n   *\n   * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n   */\n  getController(injector: ResolveContext) {\n    //* @param {Object} locals A context object from transition.context() to invoke a function in the correct context\n    let provider = this.viewDecl.controllerProvider;\n    return isInjectable(provider) ? injector.invokeLater(provider, {}) : this.viewDecl.controller;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/viewsBuilder.ts\n **/","/** @module view */ /** for typedoc */\nimport {isDefined, isFunction} from \"../common/predicates\";\nimport {services} from \"../common/coreservices\";\nimport {Ng1ViewDeclaration} from \"./interface\";\nimport {IInjectable} from \"../common/common\";\n\n/**\n * Service which manages loading of templates from a ViewConfig.\n */\nexport class TemplateFactory {\n  /**\n   * Creates a template from a configuration object.\n   *\n   * @param config Configuration object for which to load a template.\n   * The following properties are search in the specified order, and the first one \n   * that is defined is used to create the template:\n   *\n   * @param params  Parameters to pass to the template function.\n   * @param injectFn Function to which an injectable function may be passed.\n   *        If templateProvider is defined, this injectFn will be used to invoke it.\n   *\n   * @return {string|object}  The template html as a string, or a promise for \n   * that string,or `null` if no template is configured.\n   */\n  fromConfig(config: Ng1ViewDeclaration, params: any, injectFn: Function) {\n    return (\n      isDefined(config.template) ? this.fromString(config.template, params) :\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, injectFn) :\n      null\n    );\n  };\n\n  /**\n   * Creates a template from a string or a function returning a string.\n   *\n   * @param template html template as a string or function that returns an html template as a string.\n   * @param params Parameters to pass to the template function.\n   *\n   * @return {string|object} The template html as a string, or a promise for that \n   * string.\n   */\n  fromString(template: (string|Function), params?) {\n    return isFunction(template) ? (<any> template)(params) : template;\n  };\n\n  /**\n   * Loads a template from the a URL via `$http` and `$templateCache`.\n   *\n   * @param {string|Function} url url of the template to load, or a function \n   * that returns a url.\n   * @param {Object} params Parameters to pass to the url function.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  fromUrl(url: (string|Function), params: any) {\n    if (isFunction(url)) url = (<any> url)(params);\n    if (url == null) return null;\n    return services.template.get(<string> url);\n  };\n\n  /**\n   * Creates a template by invoking an injectable provider function.\n   *\n   * @param provider Function to invoke via `locals`\n   * @param {Function} injectFn a function used to invoke the template provider\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  fromProvider(provider: IInjectable, params: any, injectFn: Function) {\n    return injectFn(provider);\n  };\n}\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/templateFactory.ts\n **/","/**\n * These are the UI-Router angular 1 directives.\n *\n * These directives are used in templates to create viewports and navigate to states\n *\n * @preferred @module ng1_directives\n */ /** for typedoc */\nimport {extend, forEach, toJson} from \"../common/common\";\nimport {isString, isObject} from \"../common/predicates\";\nimport {UIViewData} from \"./viewDirective\";\nimport {parse} from \"../common/hof\";\n\n/** @hidden */\nfunction parseStateRef(ref, current) {\n  let preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\n/** @hidden */\nfunction stateContext(el) {\n  let $uiView: UIViewData = el.parent().inheritedData('$uiView');\n  let context = parse('$cfg.node.state')($uiView);\n  return context && context.name ? context : undefined;\n}\n\n/** @hidden */\nfunction getTypeInfo(el) {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  var isForm = el[0].nodeName === \"FORM\";\n\n  return {\n    attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n    isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n    clickable: !isForm\n  };\n}\n\n/** @hidden */\nfunction clickHook(el, $state, $timeout, type, current) {\n  return function(e) {\n    var button = e.which || e.button, target = current();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      var transition = $timeout(function() {\n        $state.go(target.state, target.params, target.options);\n      });\n      e.preventDefault();\n\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\n      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;\n\n      e.preventDefault = function() {\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n      };\n    }\n  };\n}\n\n/** @hidden */\nfunction defaultOpts(el, $state) {\n  return { relative: stateContext(el) || $state.$current, inherit: true };\n}\n\n/**\n * `ui-sref`: A directive for linking to a state\n *\n * A directive that binds a link (`<a>` tag) to a state. If the state has an associated\n * URL, the directive will automatically generate & update the `href` attribute via\n * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking\n * the link will trigger a state transition with optional parameters.\n *\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n * handled natively by the browser.\n *\n * You can also use relative state paths within ui-sref, just like the relative\n * paths passed to `$state.go()`. You just need to be aware that the path is relative\n * to the state that the link lives in, in other words the state that loaded the\n * template containing the link.\n *\n * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}\n * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,\n * and `reload`.\n *\n * Here's an example of how you'd use ui-sref and how it would compile. If you have the\n * following template:\n *\n * @example\n * ```html\n *\n * <pre>\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * </pre>\n * ```\n *\n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n *\n * ```html\n *\n * <pre>\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * </pre>\n * ```\n *\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-sref-opts options to pass to [[StateService.go]]\n */\nlet uiSrefNg1 = ['$state', '$timeout',\nfunction $StateRefDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var ref    = parseStateRef(attrs.uiSref, $state.current.name);\n      var def    = { state: ref.state, href: null, params: null, options: null };\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var unlinkInfoFn = null;\n\n      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\n      var update = function(val?) {\n        if (val) def.params = angular.copy(val);\n        def.href = $state.href(ref.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n        if (def.href !== null) attrs.$set(type.attr, def.href);\n      };\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);\n        def.params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      update();\n\n      if (!type.clickable) return;\n      element.bind(\"click\", clickHook(element, $state, $timeout, type, function() { return def; }));\n    }\n  };\n}];\n\n/**\n * `ui-state`: A dynamic version of `ui-sref`\n *\n * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n * params and override options.\n *\n * @example\n * ```html\n *\n * <li ng-repeat=\"nav in navlinks\">\n *   <a ui-state=\"nav.statename\">{{nav.description}}</a>\n * </li>\n *\n * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-state-params params to pass to [[StateService.href]]\n * @param {Object} ui-state-opts options to pass to [[StateService.go]]\n */\nlet uiStateNg1 = ['$state', '$timeout',\nfunction $StateRefDynamicDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';\n      var def    = { state: null, params: null, options: null, href: null };\n      var unlinkInfoFn = null;\n\n      function runStateRefLink (group) {\n        def.state = group[0]; def.params = group[1]; def.options = group[2];\n        def.href = $state.href(def.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n        if (def.href) attrs.$set(type.attr, def.href);\n      }\n\n      scope.$watch(watch, runStateRefLink, true);\n      runStateRefLink(scope.$eval(watch));\n\n      if (!type.clickable) return;\n      element.bind(\"click\", clickHook(element, $state, $timeout, type, function() { return def; }));\n    }\n  };\n}];\n\n\n/**\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n *\n * A directive working alongside ui-sref to add classes to an element when the\n * related ui-sref directive's state is active, and removing them when it is inactive.\n * The primary use-case is to simplify the special appearance of navigation menus\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n * distinguishing it from the inactive menu items.\n *\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n * ui-sref-active found at the same level or above the ui-sref will be used.\n *\n * Will activate when the ui-sref's target state or any child state is active. If you\n * need to activate only when the ui-sref target state is active and *not* any of\n * it's children, then you will use ui-sref-active-eq\n *\n * Given the following template:\n * @example\n * ```html\n *\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n *\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n *\n * ```html\n *\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n * The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * Multiple classes may be specified in a space-separated format:\n *\n * ```html\n * <pre>\n * <ul>\n *   <li ui-sref-active='class1 class2 class3'>\n *     <a ui-sref=\"app.user\">link</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n * It is also possible to pass ui-sref-active an expression that evaluates\n * to an object hash, whose keys represent active class names and whose\n * values represent the respective state names/globs.\n * ui-sref-active will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * Given the following template, with \"admin\" being an abstract state:\n * @example\n * ```html\n *\n * <pre>\n * <div ui-sref-active=\"{'active': 'admin.*'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * </pre>\n * ```\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied\n * to both the <div> and <a> elements. It is important to note that the state\n * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n */\nlet uiSrefActiveNg1 = ['$state', '$stateParams', '$interpolate', '$transitions',\nfunction $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions) {\n  return  {\n    restrict: \"A\",\n    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\n\n      // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n      try {\n        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n      } catch (e) {\n        // Do nothing. uiSrefActive is not a valid expression.\n        // Fall back to using $interpolate below\n      }\n      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n      if (isObject(uiSrefActive)) {\n        forEach(uiSrefActive, function(stateOrName, activeClass) {\n          if (isString(stateOrName)) {\n            var ref = parseStateRef(stateOrName, $state.current.name);\n            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n          }\n        });\n      }\n\n      // Allow uiSref to communicate with uiSrefActive[Equals]\n      this.$$addStateInfo = function (newState, newParams) {\n        // we already got an explicit state provided by ui-sref-active, so we\n        // shadow the one that comes from ui-sref\n        if (isObject(uiSrefActive) && states.length > 0) {\n          return;\n        }\n        var deregister = addState(newState, newParams, uiSrefActive);\n        update();\n        return deregister;\n      };\n\n      $scope.$on('$stateChangeSuccess', update);\n      let updateAfterTransition = ['$transition$', function($transition$) { $transition$.promise.then(update); }];\n      let deregisterFn = $transitions.onStart({}, updateAfterTransition);\n      $scope.$on('$destroy', deregisterFn);\n\n      function addState(stateName, stateParams, activeClass) {\n        var state = $state.get(stateName, stateContext($element));\n        var stateHash = createStateHash(stateName, stateParams);\n\n        var stateInfo = {\n          state: state || { name: stateName },\n          params: stateParams,\n          hash: stateHash\n        };\n\n        states.push(stateInfo);\n        activeClasses[stateHash] = activeClass;\n\n        return function removeState() {\n          var idx = states.indexOf(stateInfo);\n          if (idx !== -1) states.splice(idx, 1);\n        }\n      }\n\n      /**\n       * @param {string} state\n       * @param {Object|string} [params]\n       * @return {string}\n       */\n      function createStateHash(state, params) {\n        if (!isString(state)) {\n          throw new Error('state should be a string');\n        }\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        params = $scope.$eval(params);\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        return state;\n      }\n\n      // Update route state\n      function update() {\n        for (var i = 0; i < states.length; i++) {\n          if (anyMatch(states[i].state, states[i].params)) {\n            addClass($element, activeClasses[states[i].hash]);\n          } else {\n            removeClass($element, activeClasses[states[i].hash]);\n          }\n\n          if (exactMatch(states[i].state, states[i].params)) {\n            addClass($element, activeEqClass);\n          } else {\n            removeClass($element, activeEqClass);\n          }\n        }\n      }\n\n      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\n      function removeClass(el, className) { el.removeClass(className); }\n      function anyMatch(state, params) { return $state.includes(state.name, params); }\n      function exactMatch(state, params) { return $state.is(state.name, params); }\n\n      update();\n    }]\n  };\n}];\n\nangular.module('ui.router.state')\n    .directive('uiSref', uiSrefNg1)\n    .directive('uiSrefActive', uiSrefActiveNg1)\n    .directive('uiSrefActiveEq', uiSrefActiveNg1)\n    .directive('uiState', uiStateNg1);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/stateDirectives.ts\n **/","/** @module state */ /** for typedoc */\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:isState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n */\n$IsStateFilter.$inject = ['$state'];\nexport function $IsStateFilter($state) {\n  var isFilter: any = function(state, params, options) {\n    return $state.is(state, params, options);\n  };\n  isFilter.$stateful = true;\n  return isFilter;\n}\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:includedByState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n */\n$IncludedByStateFilter.$inject = ['$state'];\nexport function $IncludedByStateFilter($state) {\n  var includesFilter: any = function(state, params, options) {\n    return $state.includes(state, params, options);\n  };\n  includesFilter.$stateful = true;\n  return  includesFilter;\n}\n\nangular.module('ui.router.state')\n  .filter('isState', $IsStateFilter)\n  .filter('includedByState', $IncludedByStateFilter);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/stateFilters.ts\n **/","/** @module ng1_directives */ /** for typedoc */\n\"use strict\";\nimport {extend, map, unnestR, filter} from \"../common/common\";\nimport {isDefined, isFunction, isString} from \"../common/predicates\";\nimport {trace} from \"../common/trace\";\nimport {ActiveUIView} from \"../view/interface\";\nimport {Ng1ViewConfig} from \"./viewsBuilder\";\nimport {RejectType} from \"../transition/rejectFactory\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {parse} from \"../common/hof\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {Transition} from \"../transition/transition\";\nimport {Node} from \"../path/node\";\nimport {Param} from \"../params/param\";\nimport {kebobString} from \"../common/strings\";\nimport {HookRegOptions} from \"../transition/interface\";\nimport {Ng1Controller} from \"./interface\";\n\n/** @hidden */\nexport type UIViewData = {\n  $cfg: Ng1ViewConfig;\n  $uiView: ActiveUIView;\n\n  $animEnter: Promise<any>;\n  $animLeave: Promise<any>;\n  $$animLeave: { resolve(); } // \"deferred\"\n}\n\n/**\n * `ui-view`: A viewport directive which is filled in by a view from the active state.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * A view can be unnamed or named.\n * @example\n * ```html\n *\n * <!-- Unnamed -->\n * <div ui-view></div>\n *\n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * ```\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a\n * single view and it is unnamed then you can populate it like so:\n * ```\n *\n * <div ui-view></div>\n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * ```\n *\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n * config property, by name, in this case an empty name:\n * ```js\n *\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }\n * })\n * ```\n *\n * But typically you'll only use the views property if you name your view or have more than one view\n * in the same template. There's not really a compelling reason to name a view if its the only one,\n * but you could if you wanted, like so:\n *\n * ```html\n *\n * <div ui-view=\"main\"></div>\n * ```\n *\n * ```js\n *\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }\n * })\n * ```\n *\n * Really though, you'll use views to set up multiple views:\n * ```html\n *\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div>\n * <div ui-view=\"data\"></div>\n * ```\n *\n * ```js\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }\n * })\n * ```\n *\n * Examples for `autoscroll`:\n *\n * ```html\n *\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * ```\n *\n * Resolve data:\n *\n * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n *\n * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n * depends on `$resolve` data.\n *\n * @example\n * ```js\n *\n * $stateProvider.state('home', {\n *   template: '<my-component user=\"$resolve.user\"></my-component>',\n *   resolve: {\n *     user: function(UserService) { return UserService.fetchUser(); }\n *   }\n * });\n * ```\n */\nlet uiViewNg1 = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',\nfunction $ViewDirective(   $view,   $animate,   $uiViewScroll,   $interpolate,   $q) {\n\n  function getRenderer(attrs, scope) {\n    return {\n      enter: function(element, target, cb) {\n        if (angular.version.minor > 2) {\n          $animate.enter(element, null, target).then(cb);\n        } else {\n          $animate.enter(element, null, target, cb);\n        }\n      },\n      leave: function(element, cb) {\n        if (angular.version.minor > 2) {\n          $animate.leave(element).then(cb);\n        } else {\n          $animate.leave(element, cb);\n        }\n      }\n    };\n  }\n\n  function configsEqual(config1, config2) {\n    return config1 === config2;\n  }\n\n  let rootData = {\n    $cfg: { viewDecl: { $context: $view.rootContext() } },\n    $uiView: { }\n  };\n\n  let directive = {\n    count: 0,\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement, tAttrs, $transclude) {\n\n      return function (scope, $element, attrs) {\n        let previousEl, currentEl, currentScope, unregister,\n            onloadExp     = attrs.onload || '',\n            autoScrollExp = attrs.autoscroll,\n            renderer      = getRenderer(attrs, scope),\n            viewConfig    = undefined,\n            inherited     = $element.inheritedData('$uiView') || rootData,\n            name          = $interpolate(attrs.uiView || attrs.name || '')(scope) || '$default';\n\n        let activeUIView: ActiveUIView = {\n          id: directive.count++,                                   // Global sequential ID for ui-view tags added to DOM\n          name: name,                                              // ui-view name (<div ui-view=\"name\"></div>\n          fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name, // fully qualified name, describes location in DOM\n          config: null,                                            // The ViewConfig loaded (from a state.views definition)\n          configUpdated: configUpdatedCallback,                    // Called when the matching ViewConfig changes\n          get creationContext() {                                  // The context in which this ui-view \"tag\" was created\n            return parse('$cfg.viewDecl.$context')(inherited);\n          }\n        };\n\n        trace.traceUiViewEvent(\"Linking\", activeUIView);\n\n        function configUpdatedCallback(config?: Ng1ViewConfig) {\n          if (configsEqual(viewConfig, config)) return;\n          trace.traceUiViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\n\n          viewConfig = config;\n          updateView(config);\n        }\n\n        $element.data('$uiView', { $uiView: activeUIView });\n\n        updateView();\n\n        unregister = $view.registerUiView(activeUIView);\n        scope.$on(\"$destroy\", function() {\n          trace.traceUiViewEvent(\"Destroying/Unregistering\", activeUIView);\n          unregister();\n        });\n\n        function cleanupLastView() {\n          if (previousEl) {\n            trace.traceUiViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\n            previousEl.remove();\n            previousEl = null;\n          }\n\n          if (currentScope) {\n            trace.traceUiViewEvent(\"Destroying scope\", activeUIView);\n            currentScope.$destroy();\n            currentScope = null;\n          }\n\n          if (currentEl) {\n            let _viewData = currentEl.data('$uiView');\n            trace.traceUiViewEvent(\"Animate out\", _viewData);\n            renderer.leave(currentEl, function() {\n              _viewData.$$animLeave.resolve();\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n            currentEl = null;\n          }\n        }\n\n        function updateView(config?: Ng1ViewConfig) {\n          let newScope = scope.$new();\n          trace.traceUiViewScopeCreated(activeUIView, newScope);\n          let animEnter = $q.defer(), animLeave = $q.defer();\n          \n          let $uiViewData: UIViewData = {\n            $cfg: config,\n            $uiView: activeUIView,\n            $animEnter: animEnter.promise,\n            $animLeave: animLeave.promise,\n            $$animLeave: animLeave\n          };\n\n          let cloned = $transclude(newScope, function(clone) {\n            renderer.enter(clone.data('$uiView', $uiViewData), $element, function onUiViewEnter() {\n              animEnter.resolve();\n              if (currentScope) currentScope.$emit('$viewContentAnimationEnded');\n\n              if (isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n            \n            cleanupLastView();\n          });\n\n          currentEl = cloned;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description           *\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           */\n          currentScope.$emit('$viewContentLoaded', config || viewConfig);\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}];\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];\n/** @hidden */\nfunction $ViewDirectiveFill (  $compile,   $controller,   $transitions,   $view,   $timeout) {\n  const getControllerAs = parse('viewDecl.controllerAs');\n  const getResolveAs = parse('viewDecl.resolveAs');\n  const getResolveContext = parse('node.resolveContext');\n\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement) {\n      let initial = tElement.html();\n\n      return function (scope, $element) {\n        let data: UIViewData = $element.data('$uiView');\n        if (!data) return;\n\n        let cfg: Ng1ViewConfig = data.$cfg || <any> { viewDecl: {} };\n        $element.html(cfg.template || initial);\n        trace.traceUiViewFill(data.$uiView, $element.html());\n\n        let link = $compile($element.contents());\n        let controller = cfg.controller;\n        let controllerAs: string = getControllerAs(cfg);\n        let resolveAs: string = getResolveAs(cfg);\n        let resolveCtx: ResolveContext = getResolveContext(cfg);\n        let locals = resolveCtx && map(resolveCtx.getResolvables(), r => r.data);\n\n        scope[resolveAs] = locals;\n        \n        if (controller) {\n          let controllerInstance = $controller(controller, extend({}, locals, { $scope: scope, $element: $element }));\n          if (controllerAs) {\n            scope[controllerAs] = controllerInstance;\n            scope[controllerAs][resolveAs] = locals;\n          }\n\n          // TODO: Use $view service as a central point for registering component-level hooks\n          // Then, when a component is created, tell the $view service, so it can invoke hooks\n          // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n          // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n\n          $element.data('$ngControllerController', controllerInstance);\n          $element.children().data('$ngControllerController', controllerInstance);\n\n          registerControllerCallbacks($transitions, controllerInstance, scope, cfg);\n        }\n\n        // Wait for the component to appear in the DOM\n        if (isString(cfg.viewDecl.component)) {\n          let cmp = cfg.viewDecl.component;\n          let kebobName = kebobString(cmp);\n          let getComponentController = () => {\n            let directiveEl = [].slice.call($element[0].children)\n                .filter(el => el && el.tagName && el.tagName.toLowerCase() === kebobName) ;\n            return directiveEl && angular.element(directiveEl).data(`$${cmp}Controller`);\n          };\n\n          let deregisterWatch = scope.$watch(getComponentController, function(ctrlInstance) {\n            if (!ctrlInstance) return;\n            registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);\n            deregisterWatch();\n          });\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/** @hidden */\nlet hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';\n\n/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\nfunction registerControllerCallbacks($transitions: TransitionService, controllerInstance: Ng1Controller, $scope, cfg: Ng1ViewConfig) {\n  // Call $onInit() ASAP\n  if (isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl)) controllerInstance.$onInit();\n\n  var hookOptions: HookRegOptions = { bind: controllerInstance };\n  // Add component-level hook for onParamsChange\n  if (isFunction(controllerInstance.uiOnParamsChanged)) {\n    // Fire callback on any successful transition\n    const paramsUpdated = ($transition$: Transition) => {\n      let ctx: ResolveContext = cfg.node.resolveContext;\n      let viewCreationTrans = ctx.getResolvables()['$transition$'].data;\n      // Exit early if the $transition$ is the same as the view was created within.\n      // Exit early if the $transition$ will exit the state the view is for.\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(cfg.node.state.self) !== -1) return;\n\n      let toParams = $transition$.params(\"to\");\n      let fromParams = $transition$.params(\"from\");\n      let toSchema: Param[] = $transition$.treeChanges().to.map((node: Node) => node.paramSchema).reduce(unnestR, []);\n      let fromSchema: Param[] = $transition$.treeChanges().from.map((node: Node) => node.paramSchema).reduce(unnestR, []);\n\n      // Find the to params that have different values than the from params\n      let changedToParams = toSchema.filter((param: Param) => {\n        let idx = fromSchema.indexOf(param);\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n      });\n\n      // Only trigger callback if a to param has changed or is new\n      if (changedToParams.length) {\n        let changedKeys = changedToParams.map(x => x.id);\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n        controllerInstance.uiOnParamsChanged(filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1), $transition$);\n      }\n    };\n    $scope.$on('$destroy', $transitions.onSuccess({}, ['$transition$', paramsUpdated]), hookOptions);\n\n    // Fire callback on any IGNORED transition\n    let onDynamic = ($error$, $transition$) => {\n      if ($error$.type === RejectType.IGNORED) paramsUpdated($transition$);\n    };\n    $scope.$on('$destroy', $transitions.onError({}, ['$error$', '$transition$', onDynamic]), hookOptions);\n  }\n\n  // Add component-level hook for uiCanExit\n  if (isFunction(controllerInstance.uiCanExit)) {\n    var criteria = {exiting: cfg.node.state.name};\n    $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));\n  }\n}\n\nangular.module('ui.router.state').directive('uiView', uiViewNg1);\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/viewDirective.ts\n **/","/** @module ng1 */ /** */\nimport {IServiceProviderFactory} from \"angular\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.$uiViewScrollProvider\n *\n * @description\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n */\nfunction $ViewScrollProvider() {\n\n  var useAnchorScroll = false;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n   * @methodOf ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n   * scrolling based on the url anchor.\n   */\n  this.useAnchorScroll = function () {\n    useAnchorScroll = true;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScroll\n   *\n   * @requires $anchorScroll\n   * @requires $timeout\n   *\n   * @description\n   * When called with a jqLite element, it scrolls the element into view (after a\n   * `$timeout` so the DOM has time to refresh).\n   *\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n    if (useAnchorScroll) {\n      return $anchorScroll;\n    }\n\n    return function ($element) {\n      return $timeout(function () {\n        $element[0].scrollIntoView();\n      }, 0, false);\n    };\n  }];\n}\n\nangular.module('ui.router.state').provider('$uiViewScroll', <IServiceProviderFactory> $ViewScrollProvider);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/viewScroll.ts\n **/"],"sourceRoot":""}